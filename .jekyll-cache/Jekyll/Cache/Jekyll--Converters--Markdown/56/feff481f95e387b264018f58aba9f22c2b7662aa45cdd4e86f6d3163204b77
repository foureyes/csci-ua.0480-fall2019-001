I"D@<div class="panel panel-default">
	<div class="panel-heading">Homework #4</div>
	<div class="panel-body">

    <h1 id="express---static-files-forms-sessions-due-oct-13th-by-11pm">Express - Static Files, Forms, Sessions <strong>Due Oct 13th</strong>, by 11PM</h1>

    <h2 id="overview">Overview</h2>

    <h3 id="description">Description</h3>

    <p>Create a bird watching site called <em>The Busy Birder</em>. You&#39;ll explore the following concepts along the way:</p>

    <ul>
      <li>serving static files</li>
      <li>handling forms</li>
      <li>sessions</li>
    </ul>

    <p>You&#39;ll be creating 3 pages (2 of them allow form submission):</p>

    <ul>
      <li><strong>home</strong> - <code>/</code>: the first page on the site; links to the list and settings pages</li>
      <li><strong>list</strong> - <code>/birds</code>: lists <strong>all</strong> of the birds seen so far, as well as the number of times they&#39;ve been seen. also allows submission of bird sighting (by anyone!)</li>
      <li><strong>settings</strong> - <code>/settings</code>: controls the minimum number of birds seen on the list page&#8230; this is configured <em>per session</em></li>
    </ul>

    <h3 id="example-interaction">Example Interaction</h3>

    <div class="img">
      <p><img src="../resources/img/hw4-the-busy-birder.gif" alt="the busy birder" /></p>
    </div>

    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub. Create a file called <strong>app.js</strong> when you clone it.</p>

    <p>The final version of your assignment should be in GitHub, but a submission should still be sent via NYU Classes.</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
      <li>Add the URL of the repository to your assignment submission in NYU Classes.</li>
      <li>Commits later than that date will be handled on a case-by-case basis.</li>
      <li>24 hour grace period where NYU Classes is still open.</li>
      <li>After that, no late homeworks will be accepted.</li>
    </ul>

    <h3 id="points-make-at-least-4-commits">(3 points) Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 3 separate commits - (for example, one option may be to make one commit per part in the homework).</li>
    </ul>

    <h2 id="part-1---setup">Part 1 - Setup</h2>

    <h3 id="points-installing-dependencies">(2 points) Installing Dependencies</h3>

    <ul>
      <li>create a <code>package.json</code></li>
      <li><strong>install</strong> the following <strong>dependencies</strong> (make sure you use the <code>--save</code> option), and <strong>no others</strong>:
        <ul>
          <li><code>body-parser</code></li>
          <li><code>express</code></li>
          <li><code>express-handlebars</code></li>
          <li><code>express-session</code></li>
        </ul>
      </li>
    </ul>

    <h3 id="points-gitignore">(2 points) .gitignore</h3>

    <ul>
      <li>create a <code>.gitignore</code></li>
      <li>ignore the following files:
        <ul>
          <li><code>node_modules</code></li>
          <li><code>DS_Store</code> (if you&#39;re on OSX)</li>
        </ul>
      </li>
    </ul>

    <h2 id="part-2---homepage-and-static-files">Part 2 - Homepage and Static Files</h2>

    <h3 id="points-enabling-static-files">(3 points) Enabling Static Files</h3>

    <p>First, lets make sure we can serve up static content, like css and images.</p>

    <ul>
      <li>create the following directory structure in your project&#39;s root directory
        <ul>
          <li><code>public</code></li>
          <li><code>public/css</code></li>
          <li><code>public/img</code></li>
        </ul>
      </li>
      <li>add a blank css file in <code>public/css/base.css</code></li>
      <li>add an in image of a bird in<code>public/img/bird.png</code></li>
      <li>create a basic express application called <code>app.js</code>; you don&#39;t have to define any routes yet&#8230;</li>
      <li>just add the appropriate requires and middleware to enable static file serving:
        <ul>
          <li>check out the <a href="http://foureyes.github.io/csci-ua.0480-fall2015-001/slides/08/express.html#/29">slides on serving static files with Express</a></li>
          <li>or see page 26 in Chapter 3 of</li>
        </ul>
      </li>
      <li>test that both the css files and image work
        <ul>
          <li>for example, try to curl <code>http://localhost:3000/img/bird.png</code></li>
          <li>or go that url in your browser</li>
        </ul>
      </li>
    </ul>

    <h3 id="points-creating-a-home-page">(4 points) Creating a Home Page</h3>

    <p>Now that static files are set, create a homepage.</p>

    <ul>
      <li>
        <p>the homepage should field <code>GET</code> requests on the path, <code>/</code></p>
      </li>
      <li>set up handlebars - <a href="http://foureyes.github.io/csci-ua.0480-fall2015-001/slides/10/templating.html#/">these slides</a> may help, or read page 24 in Chapter 3 or skim Chapter 7 in )
        <ul>
          <li>get all the requirements and config setup</li>
          <li>create the appropriate views/templates and layout
            <ul>
              <li><code>views</code></li>
              <li><code>views/layouts</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>in your <code>main.handlebars</code>, drop in the surrounding html that will go on every page
        <ul>
          <li>pull in your <code>base.css</code> stylesheet</li>
          <li>include an <code>h1</code> on every page&#8230; the header on every page should say <strong>The Busy Birder</strong></li>
          <li>don&#39;t forget <code>body</code>, surrounded by triple curly braces!</li>
        </ul>
      </li>
      <li>in your template for your homepage (call this whatever you want&#8230; just make sure you can pull it up later), add the following:
        <ul>
          <li>an <code>h3</code> header with some welcome text</li>
          <li>an image of a bird</li>
          <li>a link to a <em>settings</em> page (settings)</li>
          <li>a link to <em>list of birds</em> page (birds)</li>
        </ul>
      </li>
      <li>create the appropriate route so that a <code>GET</code> request pulls up the page</li>
      <li>add some css to change background color, font color and font family</li>
    </ul>

    <p>Here&#39;s an example of what the page could look like (you don&#39;t have to use the same exact styles, but add enough styles so that you can see that it&#39;s being pulled up correctly):</p>

    <div class="img">
      <p><img src="../resources/img/hw4-home.png" alt="homepage" /></p>
    </div>

    <h2 id="the-bird-list-page-and-bird-submission-form">The Bird List Page and Bird Submission Form</h2>

    <p>The bird list page will list names of birds along with the number of times they&#39;ve been seen. By default, this list will start with some content:</p>

    <ul>
      <li>3 x Bald Eagle</li>
      <li>7 x Yellow Billed Duck</li>
      <li>4 x Great Cormorant</li>
    </ul>

    <p>This page will also allow you to submit the name of a bird that you saw. This will either:</p>

    <ul>
      <li>increment the quantity of birds seen if there&#39;s a bird with the same name already on the list</li>
      <li>add a new name to the list, with a quantity of one</li>
    </ul>

    <h2 id="part-3---list-of-bird-sightings">Part 3 - List of Bird Sightings</h2>

    <h3 id="points-middleware-and-logging">(3 points) Middleware and Logging</h3>

    <p>First, get some logging together so that you can troubleshoot. Log out the request that you receive, including the request&#39;s body.</p>

    <ul>
      <li>require the <code>body-parser</code> middleware and use it; this will allow you to access the content of the request&#39;s body</li>
      <li>set up some logging using your own middleware function; it should include
        <ul>
          <li>the request method and path</li>
          <li>followed by the contents of the request body</li>
        </ul>
      </li>
      <li>maintain a list of birds (can be a global variable)</li>
    </ul>

    <h3 id="points-bird-list">(6 points) Bird List</h3>

    <p>Now for some actual content. This page will display the names of birds and the number of times they&#39;ve been seen.</p>

    <p><strong>Bootstrap the list with some data.</strong></p>

    <ul>
      <li>store all of the birdwatching data in a global Array of objects&#8230;</li>
      <li>each object has two properties:
        <ul>
          <li>a bird&#39;s name</li>
          <li>the number of times they&#39;ve been seen</li>
        </ul>
      </li>
      <li>it should start off with:
        <ul>
          <li>3 x Bald Eagle</li>
          <li>7 x Yellow Billed Duck</li>
          <li>4 x Great Cormorant</li>
        </ul>
      </li>
      <li>(This isn&#39;t really good practice, but we&#39;ll have to store the data <em>somewhere</em> for now!)</li>
    </ul>

    <p><strong>Create the actual page&#8230;</strong></p>

    <ul>
      <li>the list page should field <code>GET</code> requests on the path, <code>/birds</code></li>
      <li>set up the template and routes appropriately; remember to render the template with the correct context</li>
      <li>in the template, you can iterate through the list of birds using the <code>#each</code> helper</li>
      <li>put each quantity/name pair in a list item (<code>li</code>)</li>
      <li>additionally, make the quantity a different color than the name</li>
      <li>add a link to a <em>settings</em> page (settings)</li>
      <li>finally, and an <code>h3</code> header with text indicating that this is the <em>bird sightings</em> page</li>
    </ul>

    <p><strong>Test your page.</strong></p>

    <ul>
      <li>it should look a little like the image below</li>
      <li>(ignore the form for now&#8230; you&#39;ll set that up next)</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw4-list.png" alt="list" /></p>
    </div>

    <h3 id="points-bird-form">(8 points) Bird Form</h3>
    <p><strong>Once it&#39;s working, create a form&#8230;</strong></p>

    <ul>
      <li>add a form beneath the list of birds
        <ul>
          <li>it should have a text <code>input</code>(name it appropriately&#8230; you&#39;ll see that name in the request body!)</li>
          <li>&#8230;as well as a submit <code>input</code></li>
        </ul>
      </li>
      <li>the form&#39;s method should be <code>POST</code></li>
      <li>the action should be empty string <code>""</code> or <code>birds</code> (it&#39;s <code>POST</code>ing to itself)</li>
      <li>modify <strong>app.js</strong>&#8230; add a route so that it accepts <code>POST</code> requests on <code>/birds</code>
        <ul>
          <li>in your callback function for this route&#8230;</li>
          <li>use the bird name that was passed in from the form (it should be in the request&#39;s body)&#8230;</li>
          <li>to search the current list of birds for an entry with the same name as what is the request&#39;s body</li>
          <li>if it exists, add one to it</li>
          <li>if it doesn&#39;t, create an object for it, with quantity one, and add it to the list</li>
          <li>&#8230;after that, redirect back to <code>/birds</code> with a <code>GET</code> request</li>
        </ul>
      </li>
      <li>the log should look something like this:</li>
    </ul>

    <p><code>GET</code> the list page.</p>

    <pre><code data-trim="" contenteditable="">GET /birds
=====
req.body: {}
</code></pre>

    <p><code>POST</code> the form (notice the body).</p>

    <pre><code data-trim="" contenteditable="">POST /birds
=====
req.body: { name: 'Ostrich', add: 'Add Another Bird' }
</code></pre>

    <p><code>GET</code> the list page again.</p>

    <pre><code data-trim="" contenteditable="">GET /birds
=====
req.body: {}
</code></pre>

    <h2 id="part-4---settings-page-filtering-with-a-session-value">Part 4 - Settings Page, Filtering With a Session Value</h2>

    <p>This last bit may be tricky. This feature will allow users with different sessions to optionally set a minimum value of sightings that determines which birds will be displayed on the list when they view the list page.</p>

    <p>For example, if the threshold is set to 4, only birds that have been sighted 4 times or more will show up on the list <em>for them</em>. You can try using two browser to test this out (setting the min on one will not affect the other).</p>

    <h3 id="points-session-setup">(6 points) Session Setup</h3>

    <p><strong>First, setup and configure sessions:</strong></p>

    <ul>
      <li>bring in the session module by requiring <code>express-session</code></li>
      <li>set up a some options for your session:</li>
    </ul>

    <pre><code data-trim="" contenteditable="">
var sessionOptions = {
	secret: 'secret cookie thang',
	resave: true,
	saveUninitialized: true
};
</code></pre>

    <ul>
      <li>then use those options for session handling middleware: <code>app.use(session(sessionOptions));</code></li>
    </ul>

    <p><strong>Modify your list route so that it only displays birds that have been sighted for a minimum number of times.</strong></p>

    <ul>
      <li>create a new list based off of the session value as the threshold: <code>req.session.yourMinimumValueVariable</code> (you can just loop or use a higher order function)</li>
      <li>pass this to your list template for <code>/birds</code> rather than the unfiltered version</li>
    </ul>

    <h3 id="points-the-settings-page">(8 points) The Settings Page</h3>

    <p><strong>Create a form to set the minumum value.</strong></p>

    <ul>
      <li>the settings page should field <code>GET</code> requests on the path, <code>/settings</code></li>
      <li>add a link to a <em>list</em> page (birds)</li>
      <li>add an <code>h3</code> header with text indicating that this is the <em>settings</em> page</li>
      <li>add a form to your settings page
        <ul>
          <li>it should have a text <code>input</code>(name it appropriately&#8230; you&#39;ll see that name in the request body!)</li>
          <li>&#8230;as well as a submit <code>input</code></li>
        </ul>
      </li>
      <li>the form&#39;s method should be <code>POST</code></li>
      <li>the action should be empty string <code>""</code> or <code>settings</code> (it&#39;s <code>POST</code>ing to itself)</li>
      <li>modify <strong>app.js</strong>&#8230; add a route so that it accepts <code>POST</code> requests on <code>/settings</code>
        <ul>
          <li>in your callback function for this route&#8230;</li>
          <li>create a session variable from the number that was passed in from the form</li>
          <li>redirect to the list page so you can see the new filtered results (<code>/birds</code>)</li>
          <li>it may also be good to log the value of your session variable for troubleshooting</li>
          <li>modify the <code>GET</code> version of the page so that if the session value for the minimum is set, the text input in the form should be pre-filled with that value (see the image below)</li>
        </ul>
      </li>
      <li>the page should look like:</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw4-settings.png" alt="settings" /></p>
    </div>

    <p><strong>The log should look something like this:</strong></p>

    <p><code>GET</code> the settings page.</p>
    <pre><code data-trim="" contenteditable="">
GET /settings
=====
req.body: {}
req.session.minVal: undefined
</code></pre>

    <p><code>POST</code> the form&#8230;</p>
    <pre><code data-trim="" contenteditable="">
POST /settings
=====
req.body: { minVal: '2', add: 'Set It!' }
req.session.minVal: undefined
</code></pre>

    <p><code>GET</code> the list page to show the filtered results</p>
    <pre><code data-trim="" contenteditable="">
GET /birds
=====
req.body: {}
req.session.minVal: 2
</code></pre>

    <p><strong>Test the session management.</strong></p>

    <ul>
      <li>open your app with one browser&#8230; and set a minimum threshold</li>
      <li>open your app in another browser</li>
      <li>check that the filter is not applied</li>
    </ul>

  </div>

</div>

:ET