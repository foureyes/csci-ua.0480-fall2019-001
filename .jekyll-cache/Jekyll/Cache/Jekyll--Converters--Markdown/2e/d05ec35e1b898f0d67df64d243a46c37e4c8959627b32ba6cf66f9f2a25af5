I"e<section class="intro-slide">
  <h1 id="javascript-timers">JavaScript Timers</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="timing-functions">Timing Functions</h2>

  <p>There are <strong>three built-in JavaScript functions</strong> that we could use for <strong>deferred and optionally repeated execution of functions</strong>.</p>

  <ul>
    <li>setTimeout</li>
    <li>setInterval</li>
    <li>window.requestAnimationFrame</li>
  </ul>

</section>

<section>
  <h2 id="requestanimationframe">requestAnimationFrame</h2>

  <p><strong>window.requestAnimationFrame(callback)</strong></p>

  <p>asks the browser to perform an animation based on the function supplied as the argument. This callback function is invoked before the screen is <em>repainted</em>.</p>

  <ul>
    <li>it has a single argument, <strong>callback</strong>, which <em>draws</em> the frame</li>
    <li>requestAnimationFrame must be called for every frame that you want to animate</li>
    <li>(that means that it must be called repeatedly)</li>
    <li>typically, the resulting animation is 60 frames per second
      <ul>
        <li>but the rate at which the callback is invoked may be adjusted based on resource utilization and priority</li>
        <li>for example, the frame rate may drop if it&#39;s not the currently active tab</li>
      </ul>
    </li>
  </ul>
</section>
<section>
  <h2 id="animation-example">Animation Example</h2>

  <p>Here&#39;s how <strong>window.requestAnimationFrame(callback)</strong> could be used to move the content div horizontally in our <a href="../../code/class18.html">sample page</a> from a previous set of slides:</p>

  <ul>
    <li>the div is animated by changing the left property value (which is a string that ends in px)</li>
    <li>note that the callback function must tell the browser to continue to animate by calling requestAnimationFrame</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
let pos = 0;
window.requestAnimationFrame(animate);
function animate() {
	console.log('I am being animated!')
	const c = document.getElementById('content')
	c.style.left = pos + 'px';
	pos += 1;
	window.requestAnimationFrame(animate);
}
</code></pre>
</section>

<section>
  <h2 id="lets-try-it-elsewhere">Let&#39;s Try It Elsewhere&#8230;</h2>

  <p>Open up a page&#8230; and <strong>modify the following code in the developer console to animate an element off screen</strong>!</p>

  <pre><code data-trim="" contenteditable="">
let pos = 0;
const ele = document.getElementsByClassName('className')[0];
ele.style.position = 'relative';
ele.style.zIndex = 1000;
function move() {
	ele.style.top = pos + 'px';
	pos += 1
	window.requestAnimationFrame(move);
}
window.requestAnimationFrame(move)
</code></pre>

</section>
<section>
  <h2 id="setinterval-settimeout">setInterval, setTimeout</h2>

  <p>A couple of other timing functions are:</p>

  <ul>
    <li><strong>setInterval(callback, delay)</strong>
      <ul>
        <li>calls callback in delay ms</li>
        <li>continues to call the callback <strong>repeatedly at specified interval</strong></li>
      </ul>
    </li>
    <li><strong>setTimeout(callback, delay)</strong>
      <ul>
        <li>calls callback in delay ms</li>
        <li>only invokes callback <strong>once</strong></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="using-setintervalsettimeout">Using setInterval/setTimeout</h2>

  <p>The following example uses set interval to:</p>

  <ul>
    <li>insert an h1 tag containing the current date/time</li>
    <li>&#8230; into the nyu homepage</li>
    <li>&#8230; every 2 seconds:</li>
  </ul>

  <p><br /></p>

  <pre><code data-trim="" contenteditable="">
setInterval(function() {
	const header = document.getElementsByClassName('header')[0];
	header.appendChild(document.createElement('h1')).innerText = Date();
}, 2000);
</code></pre>
</section>

<section>
  <h2 id="when-to-use-each">When to Use Each</h2>

  <p>What reasons would you choose to use one timing function (<strong>requestAnimationFrame</strong>, <strong>setTimeout</strong> and <strong>setInterval</strong>) over the others?. <strong>This may be obvious, but&#8230;</strong> &#8594;</p>

  <p class="fragment">For animation, use <strong>requestAnimationFrame</strong> because:</p>

  <ul class="fragment">
    <li>allows browser to make optimizations</li>
    <li>consequently more efficient</li>
    <li>(for example, Chrome will throttle setInterval)</li>
  </ul>

  <p class="fragment"><br />
Maybe setInterval, setTimeout&#8230; when you need to specify the timing of a function call (though may be unreliable based on throttling!)</p>

</section>

:ET