I"ñ <div class="panel panel-default">
  <div class="panel-heading">React Lab</div>
  <div class="panel-body">

    <h1 id="react-lab---binary-number-or-card-calculator-10-points-for-in-class-projectquiz-grade">React Lab - Binary Number or Card Calculator (10 points for In-Class Project/Quiz Grade)</h1>

    <h2 id="submission-process">Submission Process</h2>

    <ul>
      <li>work in groups of 2 or 3</li>
      <li>choose one of the applications described below in the Overview &#8594; Description and implement it</li>
      <li><strong>submit using <a href="https://docs.google.com/forms/d/e/1FAIpQLSde-vCFp3eJ9vFII9534X_FErSum5G8j3r2q4Uide7skzszaQ/viewform">this form</a></strong></li>
      <li><strong>each person on the team should submit their own individual form</strong></li>
      <li>once you&#39;ve submitted:
        <ul>
          <li>raise your hand to let me know</li>
          <li>either&#8230;
            <ol>
              <li>help others with their lab</li>
              <li>try the other application!</li>
            </ol>
          </li>
        </ul>
      </li>
    </ul>

    <h2 id="scoring">Scoring</h2>

    <ul>
      <li><strong>+7 points</strong> for showing up and submitting form</li>
      <li><strong>+2 points</strong> form submitted with a <em>reasonable</em> amount of <em>valid looking</em> code</li>
      <li><strong>+1 point</strong> code deployed on <a href="https://codepen.io">codepen.io</a></li>
    </ul>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>React
        <ul>
          <li>props</li>
          <li>state</li>
          <li>events</li>
          <li>nested components</li>
          <li>form elements</li>
        </ul>
      </li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Create <strong>one of these two applications</strong>:</p>

    <ol>
      <li>an application that calculates the decimal value of an 8-bit binary number</li>
      <li>an application that calculates the total of a hand of cards</li>
    </ol>

    <h2 id="instructions">Instructions</h2>

    <h3 id="setup">Setup</h3>

    <p>You can develop your application with any tools that you like. If you&#39;d like to use what we learned in the lectures, you can choose one of these methods:</p>

    <ol>
      <li>use <code class="highlighter-rouge">create-react-app</code>
        <ul>
          <li>allows quick setup for local development</li>
          <li>you can use your own text editor!</li>
          <li><a href="../slides/26/react-state-parent.html#/15">see the instructions on setting up create-react-app in the slides</a></li>
          <li><a href="https://github.com/facebookincubator/create-react-app/issues/138#issuecomment-334316575">but also, <strong>if you are having path issues, especially on windows</strong>, see this github ticket</a></li>
        </ul>
      </li>
      <li>remix a react-babel-webpack boilerplate using <a href="https://glitch.com/~react-babel">glitch.com</a>
        <ul>
          <li>add your code to <code class="highlighter-rouge">client/index.js</code></li>
          <li>a cheap way to add styles is to add a <code class="highlighter-rouge">style</code> tag in <code class="highlighter-rouge">views/index.html</code> and write your css directly there</li>
          <li>the boilerplate includes <code class="highlighter-rouge">render</code> directly rather than <code class="highlighter-rouge">ReactDOM</code>, so when you call <code class="highlighter-rouge">ReactDOM.render(...)</code> at the end, just call <code class="highlighter-rouge">render</code> instead</li>
        </ul>
      </li>
      <li>create a new project (pen) in <a href="https://codepen.io">codepen.io</a>
        <ul>
          <li>debugging might be difficult</li>
          <li>&#8230;but your application will already be deployed!</li>
          <li>to setup, configure babel as your JavaScript pre-processor and add React and ReactDOM Libraries:
  <br />
  <img src="../resources/img/codepen.gif" alt="codepen" /></li>
        </ul>
      </li>
    </ol>

    <h3 id="implementation">Implementation</h3>

    <p>Choose <strong>one of these two small React applications</strong> to implement &#8594;</p>

    <ol>
      <li><strong>Binary Number</strong>
        <ul>
          <li>create an application that calculates the decimal value of an 8-bit binary number</li>
          <li>start with 8 bits all set to 0</li>
          <li>add the decimal value of the binary number composed of the 8 bits</li>
          <li>each bit can be clicked so that it is set to either 0 or 1</li>
          <li>every time a bit is clicked, the value of the bit will be toggled (0 goes to 1, 1 goes to 0)</li>
          <li>recalculate the decimal value every time a bit is updated</li>
          <li>the bits should all be adjacent to each other, any other styling is your discretion</li>
          <li>see the example interaction below:
  <img src="../resources/img/hw10-screen.gif" alt="bin" /></li>
        </ul>
      </li>
      <li><strong>Card Calculator</strong>
        <ul>
          <li>create an application that:
            <ul>
              <li>uses a comma separated list of card values</li>
              <li>&#8230;to create a series of cards and</li>
              <li>&#8230; display the total value of all of the <em>valid</em> cards in the list</li>
            </ul>
          </li>
          <li>create a text input that allows entry of a comma separated list</li>
          <li>using only the valid faces from the list, display the cards in the DOM
            <ul>
              <li><strong>they can all be the same suit</strong></li>
              <li>valid faces are J, Q, K, A</li>
              <li>or numbers 2 through 10</li>
            </ul>
          </li>
          <li>the cards should styled such that:
            <ul>
              <li>each card has a width and a height</li>
              <li>each card is displayed adjacent to each other</li>
              <li>any other styling is your discretion</li>
            </ul>
          </li>
          <li>lastly, display the total of the valid cards (that is, the cards shown in the DOM)
            <ul>
              <li>numbers will be counted as their numeric value</li>
              <li>J, Q, and K are worth 10</li>
              <li>an ace (A) will always count as 11</li>
            </ul>
          </li>
          <li>see the example below:
  <img src="../resources/img/lab02-card-calculator.gif" alt="calc" /></li>
        </ul>
      </li>
    </ol>

    <h3 id="deployment">Deployment</h3>

    <p>To deploy your app on glitch.com&#8230; (only valid if you developed locally, otherwise, your code is already there!)</p>

    <ol>
      <li>use the <a href="https://glitch.com/~react-babel">react-babel-webpack boilerplate on glitch.com</a></li>
      <li>add your code to <code class="highlighter-rouge">client/index.js</code>
        <ul>
          <li>only add your components and your call to render</li>
          <li>no need to bring in imports (it&#39;s already done at the top of <code class="highlighter-rouge">index.js</code>)</li>
          <li>replace your call to <code class="highlighter-rouge">ReactDOM.render(...)</code> with just <code class="highlighter-rouge">render</code></li>
        </ul>
      </li>
      <li>add styles easily by adding a <code class="highlighter-rouge">style</code> tag in <code class="highlighter-rouge">views/index.html</code> and writing your css directly there</li>
    </ol>

    <p>To deploy your app in codepen.io&#8230; (only valid if you developed locally, otherwise, your code is <em>already there</em>)</p>

    <ol>
      <li>configure babel, React and React DOM as shown in the gif above (see Instructions &#8594; setup)</li>
      <li>copy all of your <strong>components</strong> over to the js panel (don&#39;t include any of the import statements)</li>
      <li>you may have to change <code class="highlighter-rouge">extends</code> so that it&#39;s <code class="highlighter-rouge">extends React.Component</code> for each component</li>
      <li>use <code class="highlighter-rouge">ReactDom.render</code> at the very end to render your main/root component:
 <code class="highlighter-rouge">ReactDOM.render(&lt;App /&gt;, document.body);</code></li>
    </ol>

  </div></div>
:ET