I""$<section class="intro-slide">
  <h1 id="templating-with-handlebars">Templating with HandleBars</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="templating">Templating</h2>

  <p><strong>What&#39;s a templating engine? Describe what it does&#8230;</strong> &#8594;</p>

  <p class="fragment">A templating engine is software/an application/a library that:</p>

  <ul class="fragment">
    <li>merges one or more templates (a document with placeholders)</li>
    <li>&#8230; with data</li>
    <li>&#8230; to create a single complete document</li>
    <li>templating engines are usually built so that they are decoupled from the rest of the application that is using it</li>
  </ul>
</section>

<section>
  <h2 id="templating-continued">Templating Continued</h2>

  <p>In our case, we&#39;re using a templating library called <strong>handlebars</strong>:</p>

  <ul>
    <li>&#8230;so that we could dynamically generate web pages</li>
    <li>&#8230;by combining variables/data with html layouts and templates.</li>
  </ul>

  <p><br />
<strong>Why bother using templating? We were able to emit html directly by using <code>res.end("&lt;html&gt;...") or res.send("&lt;html&gt;...")</code>?</strong></p>
</section>
<section>
  <h2 id="why-use-templating">Why Use Templating</h2>

  <p><strong>Using a templating engine that&#39;s decoupled from your application&#39;s logic is useful because:</strong> &#8594;</p>

  <ul>
    <li class="fragment">constructing html manually is easy for small pages, but quickly gets complicated as more markup gets written</li>
    <li class="fragment">it can be much more difficult to spot malformed html!</li>
    <li class="fragment">changes to your applications logic can be tangled with changes to your presentation (and vice versa), having some separation gives you at least a chance of avoiding unwanted side-effects</li>
    <li class="fragment">having separate templates allows isolation of work&#8230; a designer or front-end developer can work on the templates, while a backend developer can work on the application logic</li>
    <li class="fragment">most templating engines are featureful&#8230; providing conveniences such as automatic character escaping (why is this important? <strong>Let&#39;s check out a <em>bad</em> form.</strong>)</li>
  </ul>
</section>

<section>
  <h2 id="installation-and-setup">Installation and Setup</h2>

  <p>Install:</p>

  <pre><code data-trim="" contenteditable="">
npm install hbs --save
</code></pre>

  <p>Configure using <a href="http://expressjs.com/en/api.html#app.set">app.set (see other configurations you can set)</a></p>

  <pre><code data-trim="" contenteditable="">
app.set('view engine', 'hbs');
</code></pre>

  <p><strong>hbs directory structure</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
views/layout.hbs
views/index.hbs
</code></pre>
</section>

<section>
  <h2 id="context-objects">Context Objects</h2>

  <p><strong>When a template is rendered using <code>res.render</code>, there are two arguments.</strong> &#8594;</p>

  <p class="fragment">The <em>view</em> or <em>template</em> to render&#8230; and the <em>context object</em>.</p>

  <p class="fragment">The <strong>context object</strong>&#39;s properties are available to your template as variable names!</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
// the second argument is an object
res.render('myview', {'item':'pizza', 'description':'tasty'});
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
<h3>{{ description }} {{ item }}</h3>
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
<h3>tasty pizza</h3>
</code></pre>
</section>

<section>
  <h2 id="ok-variables-make-sense">Ok&#8230; Variables Make Sense</h2>

  <p>Just use double curly braces (no spaces) to drop a value in your context into your template!</p>

  <p><strong>But what about <em>some</em> logic. What if the value that I&#39;m passing in is an array or object?</strong> &#8594;</p>

  <p>Handlebars actually has some basic facilities for:</p>

  <ul>
    <li>looping</li>
    <li>conditionals</li>
    <li>&#8230;and other structures</li>
  </ul>
</section>

<section>
  <h2 id="block-expressions--helpers">Block Expressions / Helpers</h2>

  <p><strong>From the handlebars docs</strong></p>

  <blockquote>
    <p>Block expressions allow you to define helpers that will invoke a section of your template with a different context than the current</p>
  </blockquote>

  <ul>
    <li class="fragment">&#8230;errr &#8230; basically, that means <strong>you&#39;ll be able to add control structures to your templates, like conditionals and iteration.</strong></li>
    <li class="fragment">use double curly braces, but prefix your helper with a hash&#8230; and make sure you close it at the end</li>
    <li class="fragment"><code>{{#helper}}stuff{{/helper}}</code></li>
    <li class="fragment">notice that there are no spaces!</li>
  </ul>
</section>

<section>
  <h2 id="looping-over-arrays-example">Looping Over Arrays Example</h2>

  <p>The <code>#each</code> helper:</p>

  <ul>
    <li>allows you iterate over a series of items</li>
    <li>within <code>#each</code>, you can use <code>{{this}}</code> or <code>{{.}}</code> to output the current item</li>
  </ul>

  <p><br />
<strong>In your application:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
app.get('/templating-arrays', function(req, res) {
	res.render('templating-arrays', {'luckyNumbers':[42, 7, 78, 3, 5]});
});
</code></pre>

  <p><strong>In your view:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;ul&gt;
{{#each luckyNumbers}}
	&lt;li&gt;{{this}}&lt;/li&gt;
{{/each}}
&lt;/ul&gt;
</code></pre>

</section>

<section>
  <h2 id="arrays-with-named-elements">Arrays with Named Elements</h2>

  <p><strong>Handlebars allows <em>named block parameters</em>, which allows you to give each element a name while iterating:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&#123;&#123;#each words as |word|&#125;&#125;
&lt;p&gt;word again: &#123;&#123;word&#125;&#125;&lt;/p&gt;
&#123;&#123;/each&#125;&#125;
</code></pre>

</section>
<section>
  <h2 id="also-works-with-objects">Also Works With Objects</h2>

  <p><strong>In your application:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
app.get('/templating-objects', function(req, res) {
	res.render('templating-objects', {'obj':{'topping':'mushroom', 'size':'medium'}});
});
</code></pre>

  <p><strong>In your view, use <code class="highlighter-rouge">this</code> to get the value:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;ul&gt;
{{#each obj}}
	&lt;li&gt;{{this}}&lt;/li&gt;
{{/each}}
&lt;/ul&gt;
</code></pre>
</section>

<section>
  <h2 id="objects-continued">Objects Continued</h2>

  <p>Assuming this context object (cat is an object):</p>

  <pre><code data-trim="" contenteditable="">
{cat: {name:'bill furry', lives:9}};
</code></pre>

  <p>If you want both the key and the value, use <code class="highlighter-rouge">@key</code> and <code class="highlighter-rouge">this</code> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;ul&gt;
{{#each cat}}
&lt;li&gt;{{@key}}, {{this}}&lt;/li&gt;
{{/each}}
&lt;/ul&gt;
</code></pre>
</section>

<section>
  <h2 id="dealing-with-an-array-of-objects">Dealing with an Array of Objects</h2>

  <p>Assuming this context object (points is an Array of objects):</p>

  <pre><code data-trim="" contenteditable="">
{points: [{x:1, y:2, z:3}, {x:21, y:34, z:55}]}
</code></pre>

  <p>Use dot notation to access properties:</p>

  <pre><code data-trim="" contenteditable="">
&lt;ul&gt;
{{#each points}}
&lt;li&gt;{{this}}, {{this.x}}, {{this.y}}, {{this.z}} &lt;/li&gt;
{{/each}}
&lt;/ul&gt;
</code></pre>

  <p>Or just the property name!</p>

  <pre><code data-trim="" contenteditable="">
&lt;ul&gt;
{{#each points}}
&lt;li&gt;{{x}}, {{y}}, {{z}}&lt;/li&gt;
{{/each}}
&lt;/ul&gt;
</code></pre>
</section>

<section>
  <h2 id="conditionals">Conditionals</h2>

  <p>(Note - no equality operators 4 U) &#8230;</p>

  <pre><code data-trim="" contenteditable="">
{{#if isActive}}
  <img src="star.gif" alt="Active" />
{{else}}
  <img src="cry.gif" alt="Inactive" />
{{/if}}
</code></pre>
</section>

<section>
  <h2 id="template-error">Template Error?</h2>

  <p>By the way, if you see something like:</p>

  <pre><code data-trim="" contenteditable="">
Expecting 'ID', 'DATA', got 'INVALID'
</code></pre>

  <p>You probably have spaces in your <code>{{ #helper }}</code>.</p>
</section>

<section>
  <h2 id="more-haaalp-plese">More Haaalp Plese!</h2>

  <p><a href="http://handlebarsjs.com/block_helpers.html">Check out the docs for more block helpers!</a></p>
</section>

<!--
<section markdown="block">
## Oh Yes...

__We can use express-handlebars now (you might have noticed that the express3-handlebars version is deprecated)__ &rarr;
<pre><code data-trim contenteditable>
npm install express-handlebars
</code></pre>

<pre><code data-trim contenteditable>
var handlebars = require('express-handlebars')
	.create({defaultLayout:'main'});
</code></pre>
</section>
-->
:ET