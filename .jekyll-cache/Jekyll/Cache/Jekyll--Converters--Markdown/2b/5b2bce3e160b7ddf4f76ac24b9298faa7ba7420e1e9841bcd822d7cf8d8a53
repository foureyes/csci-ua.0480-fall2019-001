I"À<section class="intro-slide">
  <h1 id="using-get-review">Using GET, Review</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="get">GET</h2>

  <p><strong>In a GET request, how is data sent to the server?</strong></p>

  <p class="fragment">Data is passed through the url, in the <strong>query string</strong>.</p>

  <ul class="fragment">
    <li>starts with a <strong>question mark</strong></li>
    <li>followed by <strong>name/value</strong> pairs joined by an <strong>equals sign</strong></li>
    <li>with each pair separated by <strong>ampersands</strong></li>
    <li><code>?heardItAlready=yes&amp;nextThingPlease=ok</code></li>
  </ul>
</section>

<section>
  <h2 id="query-string--encoding">Query String &amp; Encoding</h2>

  <p><strong>Is the query string encoded in any way?</strong> &#8594;</p>

  <ul class="fragment">
    <li>query strings are URL encoded (also called percent encoded)</li>
    <li>numbers and letters are characters that <strong>do not have a special meaning in URL</strong>, and they don&#39;t have to be encoded</li>
    <li>however, there numeric references for characters with special meaning</li>
    <li>they&#39;re prefixed with a % &#8230; what characters do you think need this substitution?</li>
    <li><strong>what other characters do you think are encoded?</strong> &#8594;
      <ul>
        <li class="fragment"><code>%26</code> - ampersand, <code>%2F</code> - forward slash, <code>%40</code> - at symbol</li>
        <li class="fragment">and of course, a percent sign itself %25. what would <em>double urlencoding</em> <code>&amp;</code> be?</li>
        <li class="fragment"><code>%2525</code></li>
        <li class="fragment">space is special in that it <em>should</em> be %20, but it&#39;s +</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h1 id="aside-typing-a-url-in-your-browser-results-in-a-get-request">Aside: Typing a URL in your browser results in a GET request!</h1>
</section>

<section>
  <h2 id="access-to-the-query-string">Access to the Query String</h2>

  <p><strong>Is there a way for our application to access the query string?</strong> &#8594;</p>

  <p class="fragment">Just check out the req.query property. <strong>Let&#39;s take a look. What&#39;s the simplest application we can write? It should just respond to / and log out query string data if any.</strong>. &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
const express = require('express');
const app = express();

app.get('/', function(req, res) {
	console.log(req.query);
});
app.listen(8080);

</code></pre>
</section>

<section>
  <h2 id="access-to-query-string-data">Access to Query String Data</h2>

  <p>In order to access the data passed along in the data string, just look at <strong><code>req.query</code></strong>.</p>

  <ul>
    <li>each query string name is a property name</li>
    <li>each query string value is the value of a property in a JavaScript object.</li>
  </ul>

</section>

<section>
  <h2 id="a-quick-application">A Quick Application</h2>

  <p><strong>Define a route, call render&#8230; and pass it some context:</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
app.get('/', function(req, res) {
	res.render('index', {'items':[1, 2, 3, 4, 5, 6]});
});
</code></pre>
</section>

<section>
  <h2 id="create-your-templates-and-layouts">Create Your Templates and Layouts</h2>

  <p><strong>Create your surrounding html in <code>views/layout.hbs</code> (don&#39;t forget <code>body</code> with 3 curly braces):</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
&lt;!doctype html&gt;
&lt;html&gt;
&lt;body&gt;
in the layout
{{{body}}}
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

  <p class="fragment"><strong>And of course, a template. Here, we&#39;re iterating over the value <code>items</code> passed in as the <code>context</code>:</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
<ul>
{{#each items}}
<li>{{this}}</li>
{{/each}}
</ul>
</code></pre>
</section>

<section>
  <h2 id="using-query-string-params">Using Query String Params</h2>

  <p><strong>Can we use query string params to filter the numbers we&#39;re seeing in the list?</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
http://localhost:8080/?greaterThan=4

# show only numbers greater than 4 in the template!
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
// in your callback for / ...
const numbers = [1, 2, 3, 4, 5, 6];
const context = numbers;
if (req.query.greaterThan !== undefined) {
	context = numbers.filter(function(num) {
		return num &gt; +req.query.greaterThan;
	});
}
res.render('index', {'items':context});
</code></pre>
</section>

<section>
  <h2 id="we-can-do-the-same-for-basketball-stats">We Can Do the Same for Basketball Stats!</h2>

  <p><strong>Create a global stats variable (<em>don&#39;t really do this</em>, we&#39;ll find better data stores later) using data from the higher order functions slides.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
const stats = [
{"lastName":"Duncan", "team":"Spurs", "FGM":5, "FGA":10},
{"lastName":"Parker", "team":"Spurs", "FGM":7, "FGA":18},
{"lastName":"Ginobili", "team":"Spurs", "FGM":6, "FGA":11},
{"lastName":"James", "team":"Heat", "FGM":10, "FGA":21},
{"lastName":"Wade", "team":"Heat", "FGM":4, "FGA":12},
{"lastName":"Bosh", "team":"Heat", "FGM":6, "FGA":14}
];
</code></pre>

</section>
<section>
  <h2 id="basketball-continued">Basketball Continued</h2>

  <p><strong>In your route&#39;s callback function, create a similar filter, but for minimum field goals made:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
const minFgm = req.query.minFgm || 0;
const filteredPlayers = stats.filter(function(player) {
	return player.fgm &gt;= +minFgm;
});
res.render('index', {'players':filteredPlayers});
</code></pre>

  <p><strong>In the view.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
{{#each players}}
<li>{{lastName}} - {{FGM}} field goals made </li>
{{/each}}
</code></pre>

  <p><strong>Use this query string.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
?minFgm=3
</code></pre>
</section>
:ET