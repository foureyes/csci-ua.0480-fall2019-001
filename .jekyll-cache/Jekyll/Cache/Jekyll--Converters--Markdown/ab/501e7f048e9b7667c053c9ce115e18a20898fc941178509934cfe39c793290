I"¡<section class="intro-slide">
  <h1 id="css">CSS</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h1 id="layout">Layout</h1>

</section>

<section>
  <h2 id="layout-1">Layout</h2>

  <p><strong>Name two CSS properties that we learned that help define the layout of an HTML document.</strong> &#8594;</p>

  <ul>
    <li class="fragment"><code>display</code></li>
    <li class="fragment"><code>position</code></li>
  </ul>

</section>

<section>
  <h2 id="lets-talk-about-display">Let&#39;s Talk About Display</h2>

  <p>Every element on a webpage is essentially treated as a box.</p>

  <p>The <strong>display</strong> property determines how that box is rendered. <strong>What are some possible values of the <code>display</code> property?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>inline</code></li>
    <li><code>inline-block</code></li>
    <li><code>block</code></li>
    <li><code>none</code></li>
  </ul>

  <p class="fragment"><br />
We&#39;ll take a peek at some other interesting ones later. <strong>But first.</strong> &#8594;</p>

</section>

<section>

  <h2 id="block">Block</h2>

  <p>An element that is <code>display:block</code>:</p>

  <ul>
    <li>starts a new line</li>
    <li>&#8230;and stretches out as far horizontally as possible (full width)</li>
    <li>you can specify a block-level element&#39;s width and height!</li>
    <li>some elements that are commonly displayed as block: <code>div</code>, <code>p</code>, <code>h1</code>, etc.</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/3o7t0dzz/1/embedded/html,result,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="inline">Inline</h2>

  <p>An element that is <code>display:inline</code></p>

  <ul>
    <li>stays in line with its surrounding elements</li>
    <li>think of a single word in a paragraph.</li>
    <li><strong>does not have a <code>width</code> or <code>height</code> that can be specified</strong></li>
    <li>however (as we saw <em>in previous slides</em>) it can have a border, background&#8230; and even a margin and padding (though only horizontal margin and padding)</li>
  </ul>

  <iframe width="100%" height="300" src="https://jsfiddle.net/rdosf6ra/1/embedded/html,result,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="none">None</h2>

  <p>If an element is <code>display:none</code>:</p>

  <ul>
    <li>the element is not displayed and has no effect on layout</li>
    <li>all elements nested within it are also not displayed</li>
    <li>the document is rendered as if the element did not exist</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/eyumt37L/embedded/html,css,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>

<section>
  <h2 id="inline-block">Inline-Block</h2>

  <p>If an element is <code>display:inline-block</code>:</p>

  <ul>
    <li>it behaves similarly to <em>inline</em> elements in that it will stay inline (no new line)</li>
    <li>however, you can give it a height and a width</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/ds331u52/embedded/html,css,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>

<section>
  <h2 id="ok-a-quick-summary">Ok, a Quick Summary</h2>

  <p>Two consecutive <strong>inline</strong> elements will display ______________ each other. &#8594;</p>

  <p class="fragment">adjacent to</p>

  <p class="fragment">Two consecutive <strong>block-level</strong> elements will display ______________ each other. &#8594;</p>

  <p class="fragment">stacked on</p>

  <p class="fragment">Two consecutive <strong>inline-block</strong> elements will display ______________ each other.  &#8594;</p>

  <p class="fragment">adjacent to</p>
</section>

<section>
  <h2 id="some-weird-ones">Some Weird Ones</h2>

  <p>There are many other possible values for the <code>display</code> property. <strong>Let&#39;s take a look at a weird one:</strong> &#8594;</p>

  <p>Table related values:</p>

  <ul>
    <li><code>table</code></li>
    <li><code>table-cell</code></li>
    <li><code>table-row</code></li>
  </ul>

</section>

<section>
  <h2 id="table--yikes">Table-* (Yikes!)</h2>

  <p>So&#8230; <code>table</code>, <code>table-cell</code> and <code>table-row</code> are all display properties that apply to (as their names imply) tables, cells and rows.</p>

  <p>However, you can make any element behave like a table; <strong>just add the appropriate display</strong> <strong>(but <em>whyyyyy</em>?)</strong> &#8594;</p>

  <iframe width="100%" height="350" src="https://jsfiddle.net/zu1f5req/2/embedded/html,css,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

  <p class="fragment">Maybe there&#39;s an element that describes your content more accurately than <code>td</code>?</p>
</section>
<section>
  <h2 id="visibility">Visibility</h2>

  <p><strong>Oh yeah&#8230; what&#39;s the difference between <code>visibility:hidden</code> vs <code>display:none</code>.</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>display:none</code> takes the element out of the document completely
      <ul>
        <li>surrounding elements are arranged as if element never existed!</li>
      </ul>
    </li>
    <li>&#8230;however, <code>visibility:hidden</code> keeps the element in the document, but does not show it
      <ul>
        <li>surrounding elements are arranged as if the element were still in place</li>
      </ul>
    </li>
  </ul>

</section>

<section>
  <h1 id="box-model">Box Model</h1>

</section>

<section>
  <h2 id="an-elements-width-and-height">An Element&#39;s Width and Height</h2>

  <p>Now that we know some elements have a width and height, while some don&#39;t&#8230; <strong>we should probably figure out what width and height actually mean</strong>.</p>

  <p><strong>Is the width and height all there is to figuring out the dimensions of an element? What else has to be taken into account?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>border</code></li>
    <li><code>margin</code></li>
    <li><code>padding</code></li>
  </ul>

  <p><br /></p>

  <p class="fragment"><strong>How are they all related? Let&#39;s see on the next few slides.</strong> &#8594;</p>
</section>

<section>
  <h2 id="box-sizing">box-sizing</h2>

  <p><strong>box-sizing</strong> is the CSS property that determines the <strong>box-model</strong> used to calculate the <code>width</code> and <code>height</code> of an element.</p>

  <p>Two values that we&#39;ll look at are:</p>

  <ul>
    <li><code>content-box</code> (the default)</li>
    <li><code>border-box</code></li>
  </ul>
</section>

<section>
  <h2 id="content-box">content-box</h2>

  <p><strong>content-box</strong> is the default value for box-sizing. This box-model:</p>

  <ul>
    <li><code>width</code> and <code>height</code> are <strong>calculated by the content only</strong></li>
    <li>it does not include <code>padding</code>, <code>border</code>, or <code>margin</code></li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/e60z8oyq/embedded/result,css,html/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>

<section>
  <h2 id="content-box-diagram">content-box Diagram</h2>

  <div class="img">

    <p><img src="../../resources/img/boxmodel.gif" alt="box-model" /></p>

  </div>

  <ul>
    <li class="fragment">the border is between the margin and padding</li>
    <li class="fragment">padding adds space between the actual content and its border</li>
  </ul>
</section>

<section>
  <h2 id="content-box-issue">content-box Issue</h2>

  <ul>
    <li>clearly, in the default box model, border, padding (and margin) are not included in width calculations</li>
    <li><strong>why is this an issue?</strong> &#8594;</li>
    <li class="fragment"><strong>the following are both 150px wide (!?)</strong> &#8594;</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="350" src="https://jsfiddle.net/25cmdru0/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0" class="fragment"></iframe>
</section>

<section>
  <h2 id="border-box">border-box</h2>

  <p>If the value of the <code>border-box</code> property is set to <strong>border-box</strong>,</p>

  <ul>
    <li><code>width</code> and <code>height</code> include <code>padding</code> and <code>border</code></li>
    <li>it, however, does not include <code>margin</code></li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="350" src="https://jsfiddle.net/up46uvhg/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="not-quite-fully-supported">Not Quite Fully Supported</h2>

  <p><code>box-sizing: border-box</code> is a bit new:</p>

  <ul>
    <li>you&#39;ll need to use browser/vendor prefixes to get this working in all browsers</li>
    <li>using prefixes is a way for browsers to support new and/or not-yet-finalized features</li>
    <li>(some prefixes include: <code>-moz-</code> for firefox and <code>-webkit-</code>  for Chrome and Safari</li>
  </ul>

  <p><br /></p>

  <pre><code data-trim="" contenteditable="">
* {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}
</code></pre>
</section>

<section>
  <h2 id="positioning">Positioning</h2>

  <p>The <strong>position</strong> property specifies what rules to use for positioning an element in the document:</p>

  <p><strong>What are some possible values? (we know two of them at least)</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>static</code></li>
    <li><code>relative</code></li>
    <li><code>absolute</code></li>
    <li><code>fixed</code></li>
    <li><code>sticky</code></li>
  </ul>

</section>

<section>
  <h2 id="static--not-positioned">Static / Not Positioned</h2>

  <p><strong>The default positioning of an element is <code>static</code>, or <em>not positioned</em>.</strong>:</p>

  <ul>
    <li>it is laid out in its current position in the flow (no special positioning)</li>
    <li><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, and <code>z-index</code> (depth) properties do not apply to an element that is  <strong>not positioned</strong></li>
  </ul>
</section>
<section>
  <h2 id="relative">Relative</h2>

  <p>An element with <code>position:relative</code> can be positioned relative to where it would normally be in the document:</p>

  <ul>
    <li>behaves the same as static&#8230; that is, <strong>unless</strong>&#8230;</li>
    <li>you supply <code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>, or <code>z-index</code> properties, the element will be moved accordingly</li>
    <li>other elements flow as if the positioned element were in its normal place!</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/njncjbf9/3/embedded/html,css,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="a-note-about-top-bottom-left-and-right">A Note About top, bottom, left and right</h2>

  <p>For relatively positioned elements:</p>

  <ul>
    <li><strong>top</strong>  specifies how far an element is moved below its normal position</li>
    <li><strong>bottom</strong> specifies how far an element is moved above its normal position</li>
    <li><strong>left</strong> specifies the offset that the element is moved left from its normal position</li>
    <li><strong>right</strong> specifies the offset that the element is moved right from its normal position</li>
  </ul>

  <p><br />
By default, these are all set to <code>auto</code>. They can be set to a length or percentage of the containing element.</p>
</section>

<section>
  <h2 id="depth">Depth</h2>

  <p>There&#39;s also a property called <strong>z-index</strong>. <strong>What does z-index do?</strong> &#8594;</p>

  <ul class="fragment">
    <li>specifies the <em>depth of an element</em></li>
    <li>when elements overlap, z-index determines which element covers the other element</li>
    <li>an element with a larger z-index covers an element with a lower z-index</li>
  </ul>
</section>
<section>
  <h2 id="fixed">Fixed</h2>

  <p>An element with <code>position:fixed</code>:</p>

  <ul>
    <li>is positioned outside of the normal flow (no space is left where the element would normally be)</li>
    <li>it&#39;s positioned relative to the screen&#39;s viewport</li>
    <li>it stays in the same place even when it&#39;s scrolled</li>
    <li>the top, right, bottom, and left properties are used</li>
    <li><strong>width will shrink to fit content unless width explicitly specified</strong></li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/3qfjwp77/2/embedded/html,css,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>
<section>
  <h2 id="absolute">Absolute</h2>

  <p>An element with <code>position:absolute</code>:</p>

  <ul>
    <li>similar to fixed except relative to <em>nearest positioned ancestor</em> (or body if no positioned ancestor)</li>
    <li>also positioned outside of the normal flow (no space is left where the element would normally be)</li>
    <li>the top, right, bottom, and left properties are used</li>
    <li>width of element will shrink to fit content unless width specified</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/cLsjgpsv/2/embedded/html,css,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="how-about-a-practical-example">How About a Practical Example</h2>

  <p><strong>Let&#39;s talk through what&#39;s involved in creating this layout.</strong> &#8594;</p>

  <ul>
    <li>maybe check out the actual page itself&#8230; then the html</li>
    <li>with an eye towards the header, nav and sidebar</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="400" src="https://jsfiddle.net/gcggzpuj/1/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="about-the-header">About the Header</h2>

  <p><strong>How did we make the header stay in place, cover every element and stretch across?</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
header {
	position: fixed;
	top: 0;
	left: 0;
	height: 50px;
	background-color: white;
	width: 100%;
	border:3px solid #090;
	z-index: 1;
}
</code></pre>

  <ul class="fragment">
    <li>note the z-index to make sure it&#39;s above the other elements.</li>
    <li>also the width is set to 100% (since the default width of a fixed element shrinks to wrap content)</li>
  </ul>
</section>
<section>
  <h2 id="and-that-nav">And That Nav?</h2>

  <p><strong>How do you think the nav is positioned so that it&#39;s on the top right of the header?</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
nav {
	position: absolute;
	right: 0px;
	top: 0px;
}
</code></pre>

  <p class="fragment">It&#39;s relative to its ancestor, the header&#8230; so we can use absolute.</p>
</section>
<section>
  <h2 id="how-about-the-sidebar">How About the Sidebar?</h2>

  <p><strong>Finally&#8230; how is the sidebar right aligned using the position property?</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
.sidebar {
	position: absolute;
	right: 0px;
	width: 150px;
	border: 3px solid #800;
}
</code></pre>

  <p class="fragment"><strong>What will happen if we make position absolute?</strong> &#8594;</p>

  <p class="fragment">It&#39;ll go under the header and above the div with class=&quot;hero&quot;.</p>
</section>

<section>
  <h1 id="sizing">Sizing</h1>

</section>

<section>
  <h2 id="sizing-1">Sizing</h2>

  <p>You might have noticed that there are multiple units of measurement that we could use for properties such as <code>width</code> or <code>margin</code>.</p>

  <p><strong>What are the possible units?</strong> &#8594;</p>

  <p class="fragment">There are <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/length">many</a>! (Here are a few that we&#39;ll go over).</p>

  <ul class="fragment">
    <li>relative
      <ul>
        <li><code>em</code></li>
        <li><code>rem</code></li>
      </ul>
    </li>
    <li>absolute
      <ul>
        <li><code>px</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="em">em</h2>

  <p>An <strong>em</strong> is a dynamic sizing unit relative to font-size:</p>

  <ul>
    <li>an <code>em</code> is equal to the <strong>size of the font that applies to the parent of the element</strong></li>
    <li>for example, <code>2em</code> is twice the size of the parent&#39;s font-size</li>
    <li>(usually, the default browser styles for font-size end up being about 16px)</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="350" src="https://jsfiddle.net/tjbw4jjj/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>
<section>
  <h2 id="rem">rem</h2>

  <p><strong>rem</strong> represents the font-size of the root (<code>&lt;html&gt;</code>element).</p>

  <ul>
    <li><code>2rem</code> is twice the size of the root element&#39;s font-size</li>
    <li>behaves similarly to ems, but doesn&#39;t stack for nested elements</li>
  </ul>

  <p><br /></p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/wqvnb39n/2/embedded/result,html,css/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>
<section>
  <h2 id="relative-units">Relative Units</h2>

  <p>Both <code>rem</code> and <code>em</code> are relative measurements.</p>

  <p><strong>Why might using relative measurements be useful?</strong> &#8594;</p>

  <ul class="fragment">
    <li>easy to change sizes throughout</li>
    <li>just change the root element / parent element, and everything else changes in proportion</li>
    <li>particularly useful for media queries / responsive design</li>
  </ul>

  <p><br /></p>

  <p class="fragment"><strong>Let&#39;s try upping the font size &#8230; when we have them initially set to pixels.</strong> &#8594;</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/eddmheor/2/embedded/result,css,html/" allowfullscreen="allowfullscreen" frameborder="0" class="fragment"></iframe>
</section>
<section>
  <h2 id="when-to-use-pxremem">When to Use px/rem/em</h2>

  <p>It may be confusing determining which one to use. It depends on what you&#39;re trying to accomplish.</p>

  <ul>
    <li>generally, use relative sizes so that changing is easy</li>
    <li>use pixels when you want elements that stay a consistent size (usually things like setting max/min width, margins, borders or padding, rather than text)</li>
  </ul>

  <p><br />
Some articles&#8230;</p>

  <ul>
    <li><a href="https://j.eremy.net/confused-about-rem-and-em/">em for everything, pixels on borders</a></li>
    <li><a href="http://css-tricks.com/rems-ems/">perhaps set pixel sizes at the root element, rem for <em>components</em>, and em for text</a></li>
  </ul>
</section>

<section>
  <h1 id="selectors">Selectors</h1>

</section>

<section>
  <h2 id="selectors-1">Selectors</h2>

  <p><strong>What&#39;s a selector again?</strong> &#8594;</p>

  <p class="fragment">A selector is the part of a CSS rule that determines what element or elements the style declarations apply to:</p>

  <p class="fragment">In the following code, <code>p</code> is the selector:</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
p {
	margin: 10px;
}
</code></pre>

</section>

<section>
  <h2 id="possible-selectors">Possible Selectors</h2>

  <p><strong>This one may be a bit difficult to answer&#8230; but what are the possible values for selectors?</strong> &#8594;</p>

  <p class="fragment">Some that you might be familiar with are:</p>

  <ul class="fragment">
    <li>by tag name&#8230; simply reference the name of the tag, and the style will be applied to all of those tags</li>
    <li>by <code>class</code> name</li>
    <li>by <code>id</code></li>
  </ul>
</section>

<section>
  <h2 id="class-and-id">Class and ID</h2>

  <p><code>class</code> and <code>id</code> are attributes that you can place in your elements. <strong>What&#39;s the difference between the two again?</strong> &#8594;</p>

  <ul>
    <li>multiple elements in a document can have the same value for <code>class</code></li>
    <li>but values for ids should be unique within a document - only one element can have an id with a specific value</li>
    <li>an element may have both a class and id attribute.</li>
  </ul>
</section>

<section>
  <h2 id="using-class-and-id-selectors">Using Class and ID Selectors</h2>

  <ul>
    <li>to select elements with a specific <strong>class</strong>, prefix the class name with a period</li>
    <li>to target an element with a specific <strong>id</strong>, prefix the id name with a hash sign (pound or number symbol)</li>
  </ul>

  <p><br />
This has a selector, <code>.highlight</code> that gives an element a yellow background, and a couple of ids that specify borders.</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/u9j2a58s/3/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="element-name-with-classid">Element Name with Class/ID</h2>

  <p>You can use both a tag name and class or id as your selector for increased specificity:</p>

  <ul>
    <li>for an id: tagname#idvalue</li>
    <li>for a class: tagname.classvalue</li>
  </ul>

  <p><br />
<strong>In the previous example, how could be modify the markup so that <code>div</code>s that are highlighted have a green background, while paragraphs that are highlighted stay with a yellow background?</strong> &#8594;</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/yx1m40vf/1/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0" class="fragment"></iframe>
</section>

<section>
  <h2 id="more-attributes">More Attributes</h2>

  <p>You&#39;re not limited to <code>class</code> and <code>id</code> for attributes:</p>

  <ul>
    <li>you can actually specify any attribute and attribute value that you want!</li>
    <li>use brackets, and within the brackets, either an <code>attribute </code> or <code>attribute_name='value'</code></li>
    <li>examples:
      <ul>
        <li><code>[type='button']</code> - selects only elements with a type attribute that&#39;s equal to &quot;button&quot;</li>
        <li><code>[data-pinned]</code> - selects elements that just have an attribute called data-pinned (no associated value is necessary)</li>
        <li><code>input[type='button']</code> - you can also prefix to specify tag with attribute!</li>
      </ul>
    </li>
  </ul>

</section>

<section>
  <h2 id="using-arbitrary-attributes">Using Arbitrary Attributes</h2>

  <p>A couple of examples using attributes other than class or id:</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/vLh2bjsj/1/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="multiple-selectors">Multiple Selectors</h2>

  <p>In some of the previous examples, you have noticed that there were several selectors on one line, separated by commas.</p>

  <p><strong>Selector grouping</strong> allows multiple selectors to be defined for a single rule:</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/xLu3q2da/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="relationships">Relationships</h2>

  <p>Relationships between elements can also be expressed with selectors! (<a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_started/Selectors">from the CSS selectors article on MDN</a>):</p>

  <ul>
    <li><code>A E</code> &#8230;  <span class="fragment">Any E element that is a descendant of an A element (that is: a child, or a child of a child, etc.)</span></li>
    <li><code>A &gt; E</code> &#8230; <span class="fragment">Any E element that is a (direct) child of an A element</span></li>
    <li><code>E:first-child</code> &#8230; <span class="fragment">Any E element that is the first child of its parent</span></li>
    <li><code>B + E</code> &#8230; <span class="fragment">Any E element that is the next sibling of a B element (that is: the next child of the same parent)</span></li>
  </ul>
</section>

<section>
  <h2 id="some-examples">Some Examples</h2>

  <p>This demonstrates the selection of elements based on their relationships:</p>

  <iframe width="100%" height="400" src="https://jsfiddle.net/v41xqhwc/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="pseudo-classes">Pseudo-classes</h2>

  <p><strong>pseudo-classes</strong> are keywords that you add to a selector to specify the state of the element.</p>

  <p><strong>For example, what are some states that you think an anchor element (a link) could have?</strong> &#8594;</p>

  <ul class="fragment">
    <li>hovered over</li>
    <li>non-visited</li>
    <li>visited</li>
  </ul>

  <p class="fragment"><br />
<strong>There are pseudo-classes for each of these states!</strong> &#8594;</p>
</section>

<section>
  <h2 id="pseudo-classes-on-links">Pseudo Classes on Links</h2>

  <ul>
    <li><code>:hover</code> - mouse hovers over (any element, not just links)</li>
    <li><code>:link</code> - non visited link</li>
    <li><code>:visited</code> - visited link</li>
  </ul>

  <iframe width="100%" height="300" src="https://jsfiddle.net/gmot5jnL/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>
</section>

<section>
  <h2 id="beforeafter">Before/After</h2>

  <p>Before and after actually lets you insert content before or after an element!</p>

  <ul>
    <li><code>::before</code></li>
    <li><code>::after</code></li>
    <li>they don&#39;t actually appear in the dom!</li>
  </ul>

  <p><br />
Some values that the content can be are</p>

  <ul>
    <li>a string</li>
    <li>an image</li>
  </ul>

</section>
<section>
  <h2 id="before-and-after-example">Before and After Example</h2>

  <p>Two examples, one with text&#8230; and the other with an image.</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/yw8et5b0/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>
<section>
  <h2 id="nth-child">nth-child</h2>

  <p><strong>:nth-child(&#8230;)</strong> matches an element that is the <em>nth</em> child of its parent. Children are numbered starting from 1. The argument for nth-child can be:</p>

  <ul>
    <li><strong>a single integer</strong> - <code>nth-child(5)</code> - selects the 5th child</li>
    <li><strong>a keyword, even or odd</strong> - <code>nth-child(even)</code> - selects every even numbered child</li>
    <li><strong>an expression in the form of an + b</strong> - <code>nth-child(2n + 3)</code> - selects every 2nd child starting from the 3rd
      <ul>
        <li>n represents the sequence of integers starting from 0, and incrementing by 1</li>
        <li>evaluating the expression gives you the number of each child selected (in the case above, 3, 5, 7, etc.)</li>
      </ul>
    </li>
  </ul>

  <p><br /></p>

</section>

<section>
  <h2 id="nth-child-examples">nth-child Examples</h2>

  <p>Try out nth-child using the <a href="https://css-tricks.com/examples/nth-child-tester/">nth-child tester from css-tricks</a>&#8230;</p>

  <p>Or, check out the fiddle:</p>

  <iframe width="100%" height="300" src="https://jsfiddle.net/bowcbxLe/embedded/css,html,result/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>
<section>
  <h2 id="on-style">On Style</h2>

  <p><strong>Stylesheets can get unwieldy pretty quickly</strong>. Some ways to keep things readable an organized are:</p>

  <ul>
    <li>use grouped /multiple selectors</li>
    <li>one property value per line, indented</li>
    <li>comments (<code>/\* \*/</code>) when appropriate</li>
    <li>group like rules together or use some other organization scheme</li>
    <li>use container elements if you need to hook into style exceptions</li>
    <li>use a framework and/or use a css precompiler!</li>
  </ul>

  <p><br /></p>

  <p>Some others in:</p>

  <ul>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Getting_Started/Readable_CSS">mdn&#39;s article on readable css</a></li>
    <li><a href="http://red-team-design.com/tips-to-organize-your-css/">and this article on organizing css tips</a></li>
  </ul>

</section>

<section>
  <h2 id="of-course-some-javascript">Of Course, Some JavaScript</h2>

  <p>As we mentioned in the previous class, you can use an element&#39;s <strong>style</strong> property to modify its <em>actual</em> style properties.</p>

  <p>An element&#39;s style property has properties as well&#8230; and these are the names of CSS properties.</p>

  <pre><code data-trim="" contenteditable="">
var myelement = document.getElementById('myelement');
myelement.style.color = '#a20';
</code></pre>

  <p>If the style property is hyphenated, use camel case.</p>

  <pre><code data-trim="" contenteditable="">
// background-color becomes backgroundColor
myelement.style.backgroundColor = '#797';
</code></pre>
</section>

<section>
  <h2 id="classlist">classList</h2>

  <p>You can also use the <strong>classList</strong> property of an element to add or remove classes. It has methods of the same name.</p>

  <p>For the following element:</p>
  <pre><code data-trim="" contenteditable="">
&lt;p class="foo bar"&gt;first one&lt;/p&gt;
</code></pre>

  <p>You can use this code to manipulate its classes.</p>

  <pre><code data-trim="" contenteditable="">
myelement.classList.add('baz');
myelement.classList.remove('foo');
</code></pre>
</section>

<section>
  <h2 id="specificity">Specificity</h2>

  <p><strong>What color will the background of the list item be, and how did you come to that conclusion?</strong> &#8594;</p>

  <iframe width="100%" height="300" src="//jsfiddle.net/5jmsm4t8/embedded/html,css,result" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

</section>

<section>
  <h2 id="specificity-calculation">Specificity Calculation</h2>

  <p>The <a href="http://www.w3.org/TR/css3-selectors/#specificity">CSS 3specs</a> provides an algorithm for determining <strong>specificity</strong> - which selector has precedence over another:</p>

  <ul>
    <li>count the number of <strong>ID selectors</strong> in the selector (= a)</li>
    <li>count the number of <strong>class selectors</strong>, attributes selectors, and pseudo-classes in the selector (= b)</li>
    <li>count the number of <strong>type selectors</strong> (this includes <em>regular</em> elements) and <strong>pseudo-elements</strong> in the selector (= c)</li>
    <li>ignore the universal selector and the negation pseudo-selector (but count selectors within it)</li>
    <li>concatenate the three numbers a-b-c (in a number system with a large base)</li>
    <li>larger specificity wins</li>
  </ul>
</section>

<section>
  <h2 id="specificity-examples">Specificity Examples</h2>

  <p>Whew&#8230; um, so how did that <em>actually</em> work? Let&#39;s check out some examples:</p>

  <ul>
    <li><a href="http://specificity.keegan.st/">this specificity calculator</a> also includes inline styles as part of its calculation</li>
    <li><a href="http://www.w3.org/TR/css3-selectors/#specificity">the CSS3 specs</a> also have some examples</li>
  </ul>

</section>
<section>
  <h2 id="generally-switch-classes-not-styles">Generally, Switch Classes, Not Styles</h2>

  <p>Try to avoid access style&#8230; and instead toggle classes</p>

  <ul>
    <li>have your styles pre-built in your css</li>
    <li>use classList to toggle classes than</li>
    <li>helps prevent mixing logic and presentation from being too intertwined
      <ul>
        <li>for example, matching colors in your css and your js</li>
        <li>allows you to change styles without modifying code</li>
      </ul>
    </li>
  </ul>
</section>
<!--
<section markdown="block">
# Topics
	* cascade
	* specificity
	* javasript
		* style
		* query selector
		* class list
	* responsive
		* break points
</section>
-->
:ET