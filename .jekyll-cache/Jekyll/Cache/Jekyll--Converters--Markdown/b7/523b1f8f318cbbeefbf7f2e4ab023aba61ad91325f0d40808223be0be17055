I"Z3<section class="intro-slide">
  <h1 id="introducing-javascript">Introducing JavaScript</h1>

  <h3 id="csci-ua0480">CSCI-UA.0480</h3>

  <p><small> 
</small></p>
</section>

<section>

  <h2 id="a-little-bit-about-javascript">A Little Bit About JavaScript</h2>

  <p><strong>What are we getting ourselves into?</strong> We&#39;ll introduce JavaScript by &#8594;</p>

  <ol>
    <li class="fragment">Defining what <strong>JavaScript</strong> is? ü§î</li>
    <li class="fragment">Taking a quick look at some interesting JavaScript features üëÄ</li>
    <li class="fragment">Going over why <em>we&#39;re</em> using JavaScript? üï∏</li>
    <li class="fragment">And, finally, we&#39;ll discuss how to run JavaScript programs üèÉ</li>
  </ol>

</section>

<section>
  <h2 id="about-javascript">About JavaScript</h2>

  <h3 id="perhaps-youve-used-it-before">Perhaps You&#39;ve Used it Before?</h3>

  <p class="fragment"><strong>It&#39;s pretty much the standard language for developing for the web</strong> (for better or worse).</p>

  <p class="fragment"><strong>JavaScript is</strong> &#8594;</p>

  <ul>
    <li class="fragment">a high-level programming language <strong>available on many platforms</strong></li>
    <li class="fragment">that <strong>supports multiple programming paradigms</strong>, such as imperative, functional and object oriented programming</li>
    <li class="fragment">it has a <strong>Java / C-like syntax</strong> - (curly braces for blocks, etc.)</li>
    <li class="fragment">it&#39;s <strong>dynamically typed</strong> (eh&#8230; maybe not a great feature? üòê)</li>
    <li class="fragment">it&#39;s <strong>weakly typed</strong> (definitely not a great feature üòü)</li>
    <li class="fragment">most implementations are <strong>interpreted</strong> rather than compiled</li>
    <li class="fragment">it has a lot of really great (and sometimes quirky üôÉ) features, but it also has some really terrible parts too üòñ</li>
  </ul>

  <aside class="notes">
Have you used JavaScript before? 
JQuery
dynamically typed? - type checking occurs during runtime, practically - don't have to declare types when creating variables
weakly typed? - types of variables can be changed, type coercion (implicit casting) occurs frequently
</aside>

</section>

<section>
  <h2 id="interesting-javascript-features">Interesting JavaScript Features</h2>

  <p><strong>We&#39;ll go over these in more detail in the next couple of classes</strong> but it&#39;s nice to get a preview here as motivation to learn the language &#8594;</p>

  <ol>
    <li class="fragment"><strong>first-class functions</strong> (functions are just objects that can be passed around as values like strings and numbers)</li>
    <li class="fragment"><strong>closures</strong> (a function has access to the variables in scope when the function was created)</li>
    <li class="fragment"><strong>versatile and dynamic objects</strong> (object literal notation is <em>pretty powerful</em>)</li>
    <li class="fragment"><strong>prototypal inheritance</strong>  (using another object to base new objects off of)</li>
  </ol>
</section>

<section>
  <h2 id="functions-as-first-class-citizens">Functions as First Class Citizens</h2>

  <p>In JavaScript, <strong>functions are just objects</strong> that can be &#8594;</p>

  <p class="fragment"><strong>Passed around</strong>:</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
// in the code below, w =&gt; w.toUpperCase() is a shorthand 
// way of creating a function (an arrow function or a 
// lambda), which is then passed to the array method, map

const  words = ['yachty', 'boaty', 'canooey'];
console.log(words.map(w =&gt; w.toUpperCase()));
</code></pre>

  <p><br /></p>

  <p class="fragment"><strong>Or even have properties and methods</strong>!</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
// another way to declare a function

function sayBroccoli(times=1) {
    console.log('broccoli'.repeat(times));
}
// WAT? this function has a method called bind!?
const sayBroccoliTwice = sayBroccoli.bind(null, 2);
</code></pre>

  <aside class="notes">
Python also has first class functions
Java 8 also has a feature that behaves like first class functions!
</aside>
</section>

<section>
  <h2 id="closures">Closures</h2>

  <p><strong>A function has access to the variables in scope when the function was created</strong>:</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
// val is available to returned function 
// even after stringAccumulator returns
function stringAccumulator(val='') {
    return function(s) {
        val += '\n' + s;
        console.log(val);
    };
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
const addColdStates = stringAccumulator('Cold states:');
addColdStates('Minnesota');
addColdStates('Maine');
addColdStates('Michigan');
</code></pre>
</section>

<section>
  <h2 id="expressive-syntax-for-creating-powerful-objects">Expressive Syntax for Creating Powerful Objects</h2>

  <p>Object literal notation is easy!</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
const obj = {nights: 0};
</code></pre>

  <p><br /></p>

  <p class="fragment">Add a method? No problem!</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
obj.incrementNights = function() {
    this.nights += 1;
}

obj.incrementNights();
console.log(obj.nights);
</code></pre>

  <aside class="notes">
Syntax is kind of like Python dictionaries, huh?
</aside>

</section>

<section>
  <h2 id="prototypal-inheritance">Prototypal Inheritance</h2>

  <p>Perhaps you want another object to have the same &quot;properties&quot; and &quot;methods&quot; as the object, <code class="highlighter-rouge">obj</code>, in the previous slide&#8230;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
// set obj to be the "prototype" of anotherObj using Object.create
const anotherObj = Object.create(obj);
</code></pre>

  <p class="fragment">Now&#8230; <code class="highlighter-rouge">anotherObj</code> has both <code class="highlighter-rouge">nights</code> and <code class="highlighter-rouge">incrementNights</code> as properties</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
anotherObject.incrementNights();
anotherObject.incrementNights();
console.log(anotherObj.nights);
</code></pre>
</section>

<section>
  <h2 id="about-those-examples">About Those Examples</h2>

  <p>So, hopefully that quick tour of language features makes JavaScript enticing to learn!</p>

  <p>However, <strong>the examples in the previous slides may have looked unusual, even if you already knew JavaScript</strong> &#8594;</p>

  <ol>
    <li class="fragment">don&#39;t worry, <strong>we&#39;ll cover everything in-depth in this class and the next few classes</strong></li>
    <li class="fragment">if you&#39;ve used JavaScript before and are confused by the lack of <code class="highlighter-rouge">var</code> usage and the weird <code class="highlighter-rouge">=&gt;</code> syntax&#8230;
      <ul>
        <li>it&#39;s because <strong>we&#39;re using recent JavaScript language features</strong></li>
        <li>specifically stuff from <strong>ES6</strong>, and maybe beyond!</li>
      </ul>
    </li>
  </ol>

</section>

<section>
  <h2 id="ecmascript-and-es6">ECMAScript and ES6</h2>

  <p><strong>ECMAScript</strong> is the name of the <strong>standard</strong> that <strong>JavaScript implementations are based off of</strong>.</p>

  <ol>
    <li class="fragment">new features are included in yearly editions of <a href="https://www.ecma-international.org/publications/standards/Ecma-262.htm">this standard</a></li>
    <li class="fragment">the 6th edition of ECMAScript was published in 2015 (called <strong>ES6</strong> or <strong>ES2015</strong>)</li>
    <li class="fragment">the specification is continually evolving, with new features being added through <a href="http://2ality.com/2015/11/tc39-process.html">a proposal process</a></li>
    <li class="fragment">the most recent version is the 8th edition in 2017 (<strong>ES8</strong> / <strong>ES2017</strong>)</li>
  </ol>

  <p class="fragment"><br /> 
<strong>We&#39;re going to be using ES6 (and possibly features from later editions) in this course</strong></p>
</section>

<section>
  <h2 id="es6-continued">ES6 Continued</h2>

  <p>We&#39;re going to use a lot of <strong>ES6</strong> (features from 2015) for this course.</p>

  <p><strong>ES6 contained a large set of features that signficantally influenced JavaScript syntax and best practices &#8230;</strong> for example:</p>

  <ul>
    <li class="fragment"><strong>arrow functions</strong> (instead of anonymous functions): <code class="highlighter-rouge">x =&gt; 2 * x</code></li>
    <li class="fragment"><strong>let and const</strong> (instead of var): &#39;let x = 1&#39;</li>
    <li class="fragment"><strong>destructuring</strong> (instead of single assignment): <code class="highlighter-rouge">const [x, y] = [1, 2]</code></li>
    <li class="fragment">&#8230;and others (like <code class="highlighter-rouge">class</code>, various <code class="highlighter-rouge">String</code> and <code class="highlighter-rouge">Array</code> methods)</li>
  </ul>

  <p class="fragment"><br />
At this point:</p>

  <ul>
    <li class="fragment">most of these features are implemented by a significant number of JavaScript engines</li>
    <li class="fragment">see <a href="http://kangax.github.io/compat-table/es6/">this table</a> to find out which features are implemented by various JavaScript engines</li>
  </ul>
</section>

<section>
  <h2 id="why-javascript--es6">Why JavaScript / ES6</h2>

  <p>So&#8230; <strong>that leads to why we&#39;re using JavaScript (and additionally, why ES6)</strong>:</p>

  <ul>
    <li class="fragment">it&#39;s <strong>ubiquitous on the web</strong></li>
    <li class="fragment">it has some <strong>interesting features</strong>, making it <em>fun</em> to program in</li>
    <li class="fragment">it can be <strong>installed easily in many environments</strong></li>
    <li class="fragment">most of these environments support the features specified in ES6</li>
    <li class="fragment">in ES6 introduced many syntactic improvements and features, many of which are in wide usage</li>
  </ul>

</section>

<section>
  <h2 id="availability">Availability</h2>

  <p><strong>JavaScript can be run in many different environments</strong>, from servers and  microcontrollers&#8230;. all the way to its most common use in client side (web browser) programming.</p>

  <ul>
    <li class="fragment">you can install server-side JavaScript on multiple platforms (Node.js has <strong>Windows</strong>, <strong>Linux</strong>, and <strong>OSX</strong> installers)</li>
    <li class="fragment">it&#39;s available on every major browser (such as <strong>Chrome</strong>, <strong>Safari</strong> or <strong>Edge</strong>)</li>
    <li class="fragment">&#8230;and there are sites like <a href="https://glitch.com/edit/">gomix</a>, <a href="https://jsfiddle.net/">jsfiddle</a>, and <a href="codepen.io">codepen</a> that allow you to run JavaScript in various capacities</li>
  </ul>

  <aside class="notes">
Let's check out these sites ^^^
</aside>
</section>

<section>
  <h2 id="running-javascript">Running JavaScript</h2>

  <p>We&#39;ll be running JavaScript on both the server and the client&#8230; so we&#39;ll rely on:</p>

  <ul>
    <li class="fragment">the <strong>Node.js</strong> commandline interpreter / <a href="http://nodejs.org/api/repl.html">REPL</a>, which is really just <a href="http://en.wikipedia.org/wiki/V8_(JavaScript_engine)">V8</a> (what&#39;s v8? &#8594;)
      <pre><code data-trim="" contenteditable="">
node myfile.js
</code></pre>
      <pre><code data-trim="" contenteditable="">
pines:~ joe$ node
&gt; console.log('REPL time!')
</code></pre>
    </li>
    <li class="fragment">and Chrome for running JavaScript in browser (which is, coincidentally, also <strong>v8</strong>)</li>
  </ul>

  <aside class="notes">
Let's try some server side and browser JavaScript
</aside>
</section>

<section>
  <h2 id="a-few-notes-on-how-youll-be-writing-programs">A few Notes on How You&#39;ll be Writing Programs</h2>

  <ul>
    <li>use any text editor you want</li>
    <li>some editors that I, as well as other students, have used in the past:
      <ul>
        <li><a href="https://code.visualstudio.com/">Visual Studio Code</a> (has great debugging tools, frequent releases)</li>
        <li><a href="https://www.jetbrains.com/webstorm/">WebStorm</a> (for a full <em>IDE</em> experience)</li>
        <li><a href="https://atom.io/">Atom</a></li>
        <li><a href="https://www.sublimetext.com/">sublimetext</a></li>
        <li><a href="https://vim.sourceforge.io/">vim</a> or <a href="https://www.gnu.org/software/emacs/">emacs</a></li>
      </ul>
    </li>
  </ul>

  <p><br />
<strong>Choose the one that you&#39;re most comfortable with</strong>!</p>

  <p class="fragment">(I use vim in class, but you should work with the editor that you&#39;re the most productive in).</p>
</section>

:ET