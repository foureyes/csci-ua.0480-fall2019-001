I"þ<section class="intro-slide">
  <h1 id="canvas">Canvas</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="lets-draw">Let&#39;s Draw</h2>

  <p>Tired of text?  We can actually <strong>draw</strong> with JavaScript using a <strong>canvas</strong>.</p>

  <ul>
    <li>a <strong>canvas</strong> is an html element that be used for programmatic rendering of graphics on a web page</li>
    <li>think of it is a blank rectangle on your page that you can draw on</li>
  </ul>
</section>

<section>
  <h2 id="setting-up-a-canvas">Setting up a Canvas</h2>

  <p>again, a <strong>canvas</strong> is an html element - it&#39;s a tag.  You can draw on it by using JavaScript.  Here&#39;s how you set it up:</p>

  <ol>
    <li>create an html page</li>
    <li>tell the page to <em>call your code</em> once the whole page is loaded</li>
    <li>add your canvas tags</li>
    <li>add your script tags</li>
    <li>create a function that will do your drawing!</li>
    <li>write some setup code so that you have access to the canvas</li>
  </ol>
</section>

<section>
  <h2 id="our-usual-template">Our Usual Template</h2>

  <p>Let&#39;s start with our usual template&#8230;.</p>

  <pre><code class="js" data-trim="" contenteditable="">
&lt;html&gt;
&lt;head&gt;
	&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script&gt;
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
</section>

<section>
  <h2 id="telling-your-page-to-draw-something">Telling Your Page to Draw Something</h2>

  <p>We&#39;ll have to let the page know that it should start drawing once the entire page is loaded.</p>

  <ul>
    <li>we do this by adding event handler that gets called once the page is loaded</li>
    <li>it&#39;ll call a function called main() that we&#39;ll define later</li>
    <li>this can go in a script tag at the end of the file</li>
  </ul>

  <pre><code class="js" data-trim="" contenteditable="">
document.addEventListener('DOMContentLoaded', main);
</code></pre>
</section>

<section>
  <h2 id="a-canvas">A Canvas</h2>

  <p>Let&#39;s add a place to draw!.  Use a pair of opening and closing tags called canvas&#8230; with attributes, id, width, and height.</p>

  <ul>
    <li><strong>id</strong> will be used later in order to reference this particular canvas</li>
    <li><strong>width</strong> and <strong>height</strong> are the dimensions of your drawing area</li>
    <li>make sure to add an <strong>id attribute</strong>!</li>
    <li>(remember what we use to retrieve that element?)</li>
  </ul>

  <pre><code class="js" data-trim="" contenteditable="">
&lt;canvas id="sketch" width="300" height="300"&gt;
&lt;/canvas&gt;
</code></pre>
</section>

<section>
  <h2 id="main-function">Main Function</h2>

  <p>Also within your script tags (or external JavaScript), define the function that you specified in your addEventListener</p>

  <pre><code class="js" data-trim="" contenteditable="">
function main() {
 // your drawing goes here
}
</code></pre>
</section>

<section>
  <h2 id="using-your-canvas-in-javascript">Using Your Canvas in JavaScript</h2>

  <p>In order to draw on your canvas, you have to:</p>

  <ol>
    <li><em>retrieve</em> the canvas element from your page using the id</li>
    <li>get the context from your canvas element (which is what we&#39;ll be using to draw)</li>
  </ol>
  <pre><code class="js" data-trim="" contenteditable="">
var sketch = document.getElementById('sketch');
var context = sketch.getContext("2d");
</code></pre>

</section>

<section>
  <h2 id="all-together-now">All Together Now&#8230;</h2>

  <p>Here&#39;s everything put together.</p>

  <pre><code class="js" data-trim="" contenteditable="">
&lt;body onload="draw()"&gt;
&lt;canvas id="sketch" width="300" height="300"&gt;
&lt;/canvas&gt;
&lt;script&gt;
function main() {
	var sketch = document.getElementById('sketch');
	var context = sketch.getContext("2d");
	// draw stuff here!
}
document.addEventListener('DOMContentLoaded', main);
&lt;/script&gt;
&lt;/body&gt;
</code></pre>
</section>

<section>
  <h2 id="drawing">Drawing</h2>

  <p>About the canvas&#8230; <strong>where would you think the origin is, and what about the positive values for x and y?</strong> &#8594;</p>

  <ul class="fragment">
    <li>the canvas origin is at 0, 0, and it&#39;s at the upper left hand corner</li>
    <li>positive y values go down, positive x values go right</li>
  </ul>

  <p class="fragment"><br />
Once you have your context, you can call <em>methods</em> on it for drawing:</p>

  <pre class="fragment"><code class="js" data-trim="" contenteditable="">
context.fillRect(30, 30, 50, 50);
</code></pre>
</section>

<section>
  <h2 id="a-rectangle">A Rectangle</h2>

  <p><strong>fillRect</strong> creates a rectangle.  It takes 4 arguments:</p>

  <ul>
    <li><strong>x</strong> position</li>
    <li><strong>y</strong> position</li>
    <li><strong>width</strong> of rectangle</li>
    <li><strong>height</strong> of rectangle</li>
  </ul>

  <pre><code class="js" data-trim="" contenteditable="">
context.fillRect(x, y, width, height);
</code></pre>

</section>

<section>
  <h2 id="a-circle">A Circle</h2>

  <p>A circle is a bit more complicated. It uses the context&#39;s <a href="https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D.arc">arc</a> method. Additionally, it uses begin and close path to draw a line.</p>

  <p><strong>Here&#39;s a template:</strong> &#8594;</p>

  <pre><code class="js" data-trim="" contenteditable="">
context.beginPath();
context.arc(x, y, radius, start angle, end angle, clockwise);
context.closePath();
context.fill();
</code></pre>

</section>

<section>
  <h2 id="circle-example">Circle Example</h2>

  <p><strong>Now with some actual arguments.</strong> &#8594;</p>

  <p>Note that the end angle is 2 * pi (the number of radians for a full circle):</p>

  <pre><code class="js" data-trim="" contenteditable="">
context.beginPath();
context.arc(30, 10, 10, 0, 2 * Math.PI, true);
context.closePath();
context.fill();
</code></pre>
</section>

<section>
  <h2 id="colors">Colors</h2>

  <p>You can color your shapes by setting <strong>fillStyle</strong>:</p>

  <pre><code class="js" data-trim="" contenteditable="">
context.fillStyle = "#00ff00"
</code></pre>

  <ul>
    <li>this sets the fill color for all shapes drawn subsequently</li>
    <li>notice that it&#39;s not a function call</li>
    <li>rather&#8230; you set that property equal to a value</li>
    <li>the value is a <em>string</em> representation of a hexadecimal color code
      <ul>
        <li>&quot;#ff0000&quot; - red</li>
        <li>&quot;#00ff00&quot; - green</li>
        <li>&quot;#0000ff&quot; - blue</li>
        <li>&quot;#000000&quot; - black</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="more-about-drawing">More About Drawing</h2>

  <p>Each shape you create draws on top of all of your previous drawwings.  In this case, the green circle is drawn over the black square:</p>

  <pre><code class="js" data-trim="" contenteditable="">
context.fillRect(40, 30, 100, 100);

context.fillStyle = "#00ff00"
context.beginPath();
context.arc(50, 40, 40, 0, 2 * Math.PI, true);
context.closePath();
context.fill();
</code></pre>

</section>

<section>
  <h2 id="an-example-program">An Example Program:</h2>

  <pre><code class="js" data-trim="" contenteditable="">
&lt;canvas id="sketch" width="300" height="300"&gt;
&lt;/canvas&gt;
</code></pre>
  <pre><code class="js" data-trim="" contenteditable="">
&lt;script&gt;
function main() {
	var sketch = document.getElementById('sketch');
	var context = sketch.getContext("2d");

	context.fillRect(40, 30, 100, 100);

	context.fillStyle = "#00ff00"
	context.beginPath();
	context.arc(50, 40, 40, 0, 2 * Math.PI, true);
	context.closePath();
	context.fill();
}
document.addEventListener('DOMContentLoaded', main);
&lt;/script&gt;
</code></pre>
</section>
:ET