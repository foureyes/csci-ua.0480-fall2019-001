I"4!<section class="intro-slide">
  <h1 id="dom-review-finding-and-changing">DOM Review, Finding and Changing</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="accessing-the-dom">Accessing the DOM</h2>

  <p><strong>What object gives us access to the DOM?</strong> &#8594;</p>

  <p class="fragment"><code>document</code></p>

  <p class="fragment"><strong>What properties in the document object represent the following elements in the DOM: html, body, head?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>document.documentElement</code></li>
    <li>the other two are super easy:
      <ul>
        <li><code>document.body</code></li>
        <li><code>document.head</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="getting-to-an-elements-relatives">Getting to an Element&#39;s Relatives</h2>

  <p><strong>What properties let us access the very first element nested, the very last element nested, and all the elements nested under the current element.</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>firstChid</code> and <code>lastChild</code></li>
    <li><code>childNodes</code></li>
  </ul>

  <p class="fragment"><br />
<strong>What about the element containing this element, and what about elements adjacent to the current element.</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>parentNode</code></li>
    <li><code>previousSibiling</code> and <code>nextSibling</code></li>
  </ul>

  <p class="fragment"><br />
<strong>Oh yeah&#8230; and what object do I call these on?</strong> &#8594;</p>

  <p class="fragment">Anything that inherits from Node (which is pretty much <em>everything</em>, right?)</p>
</section>

<section>
  <h2 id="finding-elements">Finding Elements</h2>

  <p><strong>What are some ways of finding elements in the DOM without having to traverse related DOM elements?</strong> &#8594;</p>

  <ul class="fragment">
    <li><strong><code>document.getElementById</code></strong> - returns Node with specified id attribute</li>
    <li><strong><code>someNode.getElementsByClassName</code></strong> - returns an HTMLCollection, an Array-like object containing nodes (HMTLElements) with the specified class attribute; searches only within element called on</li>
    <li><strong><code>someNode.getElementsByTagName</code></strong> - returns an HTMLCollection containing HTMLElements with the specified tag name; searches within element that it was was called on</li>
  </ul>
</section>

<section>
  <h2 id="objects">Objects</h2>

  <p>The DOM is composed of many different objects that inherit from / implement other common objects.</p>

  <ul>
    <li>almost everything descends from Node (which itself inherits from EventTarget)</li>
    <li>all elements are HTMLElements</li>
  </ul>

  <p><a href="http://web.stanford.edu/class/cs98si/slides/the-document-object-model.html">A slightly out-of-date, but mostly accurate, class diagram (ignore Attr)</a></p>
</section>

<section>
  <h2 id="modifying-the-dom">Modifying the DOM</h2>

  <p><strong>Whare are some methods for adding/removing nodes? Do they return anything?</strong> &#8594;</p>

  <ul class="fragment">
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild"><code>.removeChild(childNodeToRemove)</code></a> - removes a child node from the DOM and returns it
      <ul>
        <li>returns removed node</li>
        <li>node still exists in memory, but is no longer in DOM tree</li>
      </ul>
    </li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild"><code>.appendChild(nodeToAppend)</code></a> - puts node at end of list of this node&#39;s child nodes
      <ul>
        <li>returns appended node</li>
      </ul>
    </li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.insertBefore"><code>.insertBefore(nodeToInsert, beforeThisNode)</code></a> - inserts node before the node given as child of current node
      <ul>
        <li>returns the inserted node</li>
      </ul>
    </li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.replaceChild"><code>.replaceChild(nodeToInsert, nodeToReplace)</code></a> - replaces a child of the current node with the nodeToInsert
      <ul>
        <li>returns the replaced node</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="reading-or-creating-nodes-and-their-content">Reading or Creating Nodes and their content</h2>

  <p><strong>How do we read or change text contained within a node? How do we create new nodes?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>node.nodeValue</code></li>
    <li><code>node.textContent</code> (just the text within a node a child nodes), <code>innerHTML</code> (includes mark-up), and <code>innerText</code> (stylesheet aware)</li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/document.createTextNode"><code>document.createTextNode(text)</code></a></li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/document.createElement"><code>document.createElement(elementName)</code></a></li>
  </ul>
</section>

<section>
  <h2 id="be-careful-when-removingreplacing-elements">Be Careful When Removing/Replacing Elements</h2>

  <p>When going over an HTMLCollection of elements, you have to <strong>be careful when you remove, replace or modify elements. Why?</strong> &#8594;</p>

  <ul>
    <li>the data structures we&#39;re working with are <em>live</em></li>
    <li><strong>they change as the document changes in real time</strong></li>
    <li>we can do the following to work around this:
      <ul>
        <li>iterate over collection in reverse order</li>
        <li>use a while loop in conjunction with <code>firstChild</code></li>
        <li>take a <em>snapshot</em></li>
      </ul>
    </li>
  </ul>

</section>
<section>
  <h2 id="some-quick-exercises">Some Quick Exercises</h2>

  <p><strong>Let&#39;s practice.</strong> &#8594;</p>

  <ol>
    <li>find the header on the NYU home page - <a href="http://www.nyu.edu/">http://www.nyu.edu/</a> (the element that contains the navigation, logo and search box)</li>
    <li>remove it with JavaScript</li>
    <li>(refresh the page) find the header again, but instead of removing it, add an heading element (h1) with text that says &quot;Hello&quot; to its list of child elements</li>
  </ol>

  <p><br /></p>
  <pre class="fragment"><code data-trim="" contenteditable="">
// find the header (it has an id... easy!)
document.getElementById('headerContainer');

// 'cheap' way to remove the header
var header = document.getElementById('headerContainer');
header.parentNode.removeChild(header);

// adding an h1... note that appendChild returns the 
// element added
var header = document.getElementById('headerContainer');
header.appendChild(document.createElement('h1')).textContent = 'Hello';
</code></pre>
</section>

<section>
  <h2 id="eventtarget">EventTarget</h2>

  <p>As mentioned previously, almost everything inherits from Node&#8230; which in turn inherits from EventTarget.</p>

  <p>EventTarget objects are DOMobjects that can receive events.</p>

  <p><strong>How do we set up an element that responds to events? What are some events that we know?</strong> &#8594;</p>

  <ul class="fragment">
    <li><strong><code>element.addEventListener('eventName', callback)a</code></strong></li>
    <li><strong><code>addEventListener</code></strong> allows multiple event handler to be added to the same event on the same element</li>
    <li>we looked at two events:
      <ul>
        <li><strong>click</strong> - triggered on mouse click (press and release) on a single element (<strong>this</strong> represents the element clicked on in the callback function)</li>
        <li><strong>DOMContentLoaded</strong> - document has been completed loaded and parsed (without waiting for CSS, images, etc.)</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="one-last-exercise">One Last Exercise</h2>

  <p>Back to the nyu homepage.</p>

  <p><strong>Add an h1 with the text hello as the last element in the header anytime the header is clicked.</strong></p>

  <pre class="fragment"><code data-trim="" contenteditable="">

var header = document.getElementById('headerContainer');
header.addEventListener('click', add_h1_to_header);

function add_h1_to_header(event) {
	this.appendChild(document.createElement('h1')).textContent = 'Hello';
}
</code></pre>
</section>
:ET