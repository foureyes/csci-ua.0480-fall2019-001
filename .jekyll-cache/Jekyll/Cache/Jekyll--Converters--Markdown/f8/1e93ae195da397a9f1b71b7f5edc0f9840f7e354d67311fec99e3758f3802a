I"M<section class="intro-slide">
  <h1 id="routers">Routers</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="whats-a-router">What&#39;s a Router?</h2>

  <p>A <strong>router</strong> is an <em>isolated instance</em> of route handlers and middleware. It&#39;s an object that&#39;s essentially a <strong>mini-application</strong>. This means that:</p>

  <ol>
    <li>you can define routes (or  <em>route handlers</em> - the HTTP verb methods, path and callback)</li>
    <li>you can also use middleware in a router (which means that you can <em>mount</em> a router at a specific path and effectively have a path prefix for all of the paths that your router handles)</li>
  </ol>

  <p><br />
<strong>Let&#39;s see an actual example</strong> &#8230;</p>

</section>

<section>
  <h2 id="creating-a-router">Creating a Router</h2>

  <p>The top level express object has a <code>Router()</code> function (<a href="http://expressjs.com/4x/api.html#router">see the docs</a>)&#8230; that <strong>creates a new router object</strong>. (Note that it&#39;s not a constructor, so don&#39;t invoke it with <code>new</code>).</p>

  <pre><code data-trim="" contenteditable="">
const express = require('express')
const router = express.Router();
</code></pre>
</section>

<section>
  <h2 id="adding-route-handlers-to-a-router">Adding Route Handlers to a Router</h2>

  <p>Just like the <code>app</code> object we would create to represent an Express application, our <code>router</code> has a bunch of methods named after HTTP verbs&#8230; so we can add some route handlers:</p>

  <pre><code data-trim="" contenteditable="">
// note that we're calling get on the router object that we created before
router.get('/bar/baz', function(req, res) {
  res.send('qux');
})
</code></pre>

</section>

<section>
  <h2 id="using-your-routers">Using Your Routers</h2>

  <p>If your router is in a different file, you will need to expose the router object (make it <em>public</em>) by adding it to your <code>module.exports</code> (so&#8230; if your router code is in <code>routes/myrouter.js</code>):</p>

  <pre><code data-trim="" contenteditable="">
module.exports = router;
</code></pre>

  <p>Then, just require it in <code>app.js</code>:</p>

  <pre><code data-trim="" contenteditable="">
// the router object you defined in myrouter.js
// is now referenced by myRouter
const myRouter = require('./routes/myrouter');
</code></pre>
</section>

<section>
  <h2 id="using-your-routers-continued">Using Your Routers Continued</h2>

  <p>Finally, to actually <em>activate</em> all of the route handlers, you&#39;ll have to <strong>use</strong> your router object like any other middleware. If you mount it at a specific path, all URLs in your router will be prefixed by that path.</p>

  <pre><code data-trim="" contenteditable="">
app.use('/foo', myRouter);
</code></pre>

  <p>In our code above, our router was mounted on <code>'/foo'</code>&#8230; so the full path to the single route handler that we declared would be:</p>

  <pre><code data-trim="" contenteditable="">
/foo/bar/baz
</code></pre>

</section>
:ET