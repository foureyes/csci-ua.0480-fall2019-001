I"Lµ<div class="panel panel-default">
	<div class="panel-heading">Homework #5</div>
	<div class="panel-body">

    <h1 id="book-buzz-a-book-review-site-storing-data-url-parameters-sessions---due-friday-45-at-11pm">Book Buzz, a Book Review Site (Storing Data, URL Parameters, Sessions) - <strong>Due Friday, 4/5 at 11pm</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="goals">Goals</h3>

    <p>This assignment will cover database storage, sessions and URL parameters. You will:</p>

    <ul>
      <li>use mongoose to read and write data to and from mongodb from an express application</li>
      <li>use the commandline mongodb client to check and debug your work</li>
      <li>use pre-built session middleware to read and write data to and from an in-memory session store on a per session basis</li>
    </ul>

    <h3 id="description">Description</h3>

    <p><img src="../resources/img/hw05-book-buzz/all.gif" /></p>

    <p>You&#39;ll be creating a site where users can add books and submit reviews of books. By the end of this project, you should be familiar with:</p>

    <ul>
      <li>some basic read and write operations with mongodb&#8230;</li>
      <li>integrating mongodb with an Express web application using Mongoose</li>
      <li>writing middleware</li>
      <li>working with sessions</li>
    </ul>

    <p>You&#39;ll create a single express application with the following directory layout (when you&#39;re done with all of the directions, the folder hierarchy should match the look the same as the one listed below): üìÅ</p>

    <p><code class="highlighter-rouge">/</code> (project root)</p>

    <ul>
      <li><code class="highlighter-rouge">package.json</code></li>
      <li><code class="highlighter-rouge">node_modules</code></li>
      <li><code class="highlighter-rouge">.gitignore</code></li>
      <li><code class="highlighter-rouge">.eslintrc.js</code></li>
      <li><code class="highlighter-rouge">/src</code>
        <ul>
          <li><code class="highlighter-rouge">app.js</code></li>
          <li><code class="highlighter-rouge">public</code>
            <ul>
              <li><code class="highlighter-rouge">img</code></li>
              <li><code class="highlighter-rouge">css</code>
                <ul>
                  <li>your css file</li>
                </ul>
              </li>
            </ul>
          </li>
          <li><code class="highlighter-rouge">views</code>
            <ul>
              <li><code class="highlighter-rouge">layout.hbs</code></li>
              <li>any other views</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <p>Your application will support the following routes (:slug specifies that the part of the path is variable)):</p>

    <ul>
      <li><code class="highlighter-rouge">GET /</code> - redirect to <code class="highlighter-rouge">/books</code></li>
      <li><code class="highlighter-rouge">GET /books</code> - show all books and a filter form</li>
      <li><code class="highlighter-rouge">GET /books-new</code> - show the create book form</li>
      <li><code class="highlighter-rouge">POST /books-new</code> - process a new book</li>
      <li><code class="highlighter-rouge">GET /books/:slug</code> - show information about a single book and display the add review form</li>
      <li><code class="highlighter-rouge">POST /books/:slug/comments</code> -</li>
    </ul>

    <p>Finally, it should:</p>

    <ul>
      <li>be served on <strong>port 3000</strong></li>
      <li>be run from within the <code class="highlighter-rouge">src</code> directory of the project (<code class="highlighter-rouge">cd src</code>, then <code class="highlighter-rouge">nodemon app.js</code>)</li>
      <li>use generated absolute paths where necessary (for example use <code class="highlighter-rouge">__dirname</code> and <code class="highlighter-rouge">public</code> when creating the public path for express static)</li>
    </ul>

    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub.</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
    </ul>

    <h3 id="points-make-at-least-4-commits">(4 points) Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 4 separate commits - (for example, one option may be to make one commit per part in the homework).</li>
    </ul>

    <h2 id="part-1---setup-for-book-review-app-storing-data-in-a-database">Part 1 - Setup for Book Review App (Storing Data in a Database)</h2>

    <h3 id="installing-mongodb-and-preparing-data">Installing MongoDB and Preparing Data</h3>

    <ul>
      <li>to install MongoDB, use a package manager like apt on Linux or homebrew on MacOS (<code class="highlighter-rouge">brew install mongodb</code>)&#8230;  or follow the <a href="http://docs.mongodb.org/manual/installation/">install instructions for your operating system on MongoDB&#39;s site</a></li>
      <li>by default, MongoDB does not require a username/password to connect üòÆ
        <ul>
          <li>if you&#39;d like to add authentication <a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/">you can follow this guide</a> (it&#39;s a little bit of work to make it so that your app works with authentication on your environment, but without authentication on the grader&#39;s environment)</li>
          <li>if you add authentication, make sure to:
            <ul>
              <li>(ideal) use environment variables (<code class="highlighter-rouge">process.env</code>) to set the username and password (but default to no credentials if environment variable(s) are not set)</li>
              <li>(also ideal) read the username and password from a configuration file, but don&#39;t put the configration file under version control (and perhaps read a different file based on an environment variable in <code class="highlighter-rouge">process.env</code>)</li>
              <li>(not great, but easy) commit and push the version with no credentials, and keep the version with credentials locally &#8230; remembering to never commit and push that particular file</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>in order for you to connect to your database to work with data, your database server must be running
        <ul>
          <li>for some installations, MongoDB will start when your computer starts</li>
          <li>for other installations, you&#39;ll have to start it manually</li>
          <li>you can test if your database is running by:
            <ul>
              <li>attempting to connect to the test database ‚ö°</li>
              <li>in a terminal window, type in <code>mongo</code> (in any directory) to start the commandline client</li>
              <li>you should be given a message with the version number of the Mongo shell</li>
            </ul>
          </li>
          <li>if it&#39;s not running, you have to start the database server manually:
            <ul>
              <li>in a terminal window, type in <code>mongod</code>; this starts the server</li>
              <li>if it does not start because it&#39;s looking for a directory called <code>/data/db</code>
                <ul>
                  <li>this means that <code>mongod</code> is looking for a place to store you data</li>
                  <li>this typically happens on OSX installations, sooo&#8230;</li>
                  <li><a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/#run-mongodb">check the docs</a>&#8230; and then try:</li>
                  <li>create the directory: <code>sudo mkdir -p /data/db</code></li>
                  <li>change the owner to your user (replace yourusername with your <em>actual</em> username for you system): <code>sudo chown -R yourusername:staff /data/</code></li>
                </ul>
              </li>
              <li>ensure that it is up and running by connecting to it using a commandline client&#8230; so in a different terminal tab/window, type in <code>mongo</code>:</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>once you&#39;re connected with a commandline client (mongo), start inserting documents into a database called <code>hw05</code> and a collection called <code>books</code>:
        <ul>
          <li>books will have a title, its author, its 10 or 13 digit ISBN, and a list of its reviews:</li>
          <li>so to insert, just do this in the commandline client:
            <pre><code data-trim="" contenteditable="">db.books.insert({
      title: "C++ Primer",
      author: "Stanley B. Lippman",
      review: "9780321714114"
  });
</code></pre>
          </li>
          <li>(inserting will automatically create the database and collection for you if they don&#39;t already exist)</li>
          <li>insert the following books:
            <pre><code data-trim="" contenteditable="">
      {title: "C++ Primer", author: "Stanley B. Lippman", isbn: "9780321714114"}
      {title: "Eloquent JavaScript", author: "Marijn Haverbeke", isbn: "1593279507"}
</code></pre>
          </li>
        </ul>
      </li>
      <li>use <code>db.books.find()</code> to show all of the books that you&#39;ve inserted
        <ul>
          <li>make sure there&#39;s <em>something</em> there&#8230;</li>
          <li>so that you know your web app actually has books to read!</li>
        </ul>
      </li>
      <li>use <code>ctrl + d</code> to exit the commandline client</li>
      <li>(make sure you keep your database server running, though üèÉ)</li>
    </ul>

    <h3 id="directory-structure-and-dependencies">Directory Structure and Dependencies</h3>

    <p>Start your usual express app by:</p>

    <ul>
      <li>create a <code class="highlighter-rouge">.gitignore</code> to make sure your <code class="highlighter-rouge">node_modules</code> folder doesn&#39;t get into your repository</li>
      <li>copying over an eslint configuration, <code class="highlighter-rouge">.eslintrc.json</code>, from a previous assignment (if it doesn&#39;t already exist in the repository)</li>
      <li>creating a <code class="highlighter-rouge">package.json</code> file with <code class="highlighter-rouge">npm init</code></li>
      <li>installing the appropriate modules and saving them to <code class="highlighter-rouge">package.json</code> using <code>--save</code> (<code class="highlighter-rouge">express</code>, <code class="highlighter-rouge">hbs</code>)  in the root directory of your project</li>
      <li>additionally, installing&#8230;
        <ul>
          <li><strong>mongoose</strong>: <code>npm install --save mongoose</code></li>
          <li><strong>mongoose-url-slugs</strong>: <code>npm install --save mongoose-url-slugs</code> (we&#39;ll use this to create unique, human readable identifiers for our books)</li>
        </ul>
      </li>
      <li>creating a <code class="highlighter-rouge">src</code> directory&#8230; and within that directory
        <ul>
          <li>creating an <code class="highlighter-rouge">app.js</code> file for your express app</li>
          <li>activate express-static and create a <code class="highlighter-rouge">public</code> folder (along with some folders for css, etc.)</li>
          <li>configure hbs as the templating engine and create a <code class="highlighter-rouge">views</code> folder along with <code class="highlighter-rouge">layout.hbs</code></li>
          <li>activate express.urlencoded (body parser) to parse http request bodies</li>
          <li>setting up and creating the appropriate folders for templating and serving static files</li>
        </ul>
      </li>
      <li>configure your server <strong>so that it uses port 3000</strong></li>
    </ul>

    <h3 id="connect-to-the-database">Connect to the Database</h3>

    <p>Create a file called <code>db.js</code> within <code class="highlighter-rouge">src</code>. <code>db.js</code> will contain:</p>

    <ul>
      <li>the code to connect to our database</li>
      <li>&#8230;and our Schema and model (which we&#39;ll use to access data in our database)</li>
    </ul>

    <p>In <code>db.js</code>, add the require for the <code>mongoose</code> module:</p>

    <pre><code data-trim="" contenteditable="">const mongoose = require('mongoose') </code></pre>

    <p>Leave a placeholder for your schema&#8230;</p>

    <pre><code data-trim="" contenteditable="">// my schema goes here!</code></pre>

    <p>And, finally, add the code that connects to the database. We&#39;ll connect to the local instance of MongoDB, and we&#39;ll use a database called <code>hw05</code> (this will be created for you once you start inserting documents&#8230; which you should have done already above!).</p>

    <pre><code data-trim="" contenteditable="">mongoose.connect('mongodb://localhost/hw05');
</code></pre>

    <p><strong>If you get deprecation warnings, <a href="../slides/14/mongoose.html#/8">check out these slides</a></strong></p>

    <p>If you configured a user for MongoDB, then follow the instructions below:</p>

    <h3 id="optionally-add-authentication">Optionally Add Authentication</h3>

    <p>When working with databases and databases users / authentication, you&#39;ll want to</p>

    <ol>
      <li>require username and password in certain environments (for example, your laptop or a production environment)</li>
      <li>allow non-authenticated connections in other environments (for example, the grader&#39;s laptop)</li>
    </ol>

    <p>‚ö†Ô∏èAny authentication configuration should <strong>not be added to your repository</strong> (make sure your configuration files are in <code class="highlighter-rouge">.gitignore</code>)</p>

    <p>This requires performing the following steps:</p>

    <ol>
      <li><a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/">enable authentication for mongodb</a></li>
      <li>conditionally include a file that contains credentials</li>
    </ol>

    <p>The connection string placed into <code class="highlighter-rouge">mongoose.connect</code> will either be the same as shown earlier, or with authentication:</p>

    <pre><code data-trim="" contenteditable="">mongodb://USERNAME:PASSWORD@localhost/hw05
</code></pre>

    <p>Where:</p>

    <ul>
      <li><code class="highlighter-rouge">USERNAME</code> - is the username you used for logging it to the server</li>
      <li><code class="highlighter-rouge">PASSWORD</code> - is the password for <strong>mongodb</strong> that you created from Part 3.</li>
    </ul>

    <p>You should not put these credentials directly into your <code class="highlighter-rouge">db.js</code> file, and they should not be in a file in version control (you may inadvertently disclose these credentials if your repository becomes public). One way to deal with this issue is to put your credentials in an external file that is conditionally read:</p>

    <ol>
      <li>add a conditional to your database configuration code that&#8230;</li>
      <li>checks if an environment variable named <code class="highlighter-rouge">NODE_ENV</code> is set to <code class="highlighter-rouge">DEV</code>
        <ul>
          <li><a href="https://www.digitalocean.com/community/tutorials/how-to-read-and-set-environmental-and-shell-variables-on-a-linux-vps">read the excellent digital ocean summary regarding environment variables</a></li>
          <li>use [process.env.NAME_OF_VARIABLE] to access environment variables through node</li>
        </ul>
      </li>
      <li>if the above is true, then read a file synchronously (blocking) by using <a href="https://nodejs.org/api/fs.html#fs_fs_readfilesync_file_options">fs.readFileSync</a></li>
      <li>the file that is read in will be a <code class="highlighter-rouge">json</code> file that&#39;s not in version control&#8230; that contains the database connection string for your application when deployed on the server</li>
    </ol>

    <p>(Note that this is a simple way of managing configuration, consider using a configuration management library, like <a href="https://github.com/mozilla/node-convict">node-convict</a> for your professional projects)</p>

    <p><strong>To add an external configuration file, follow these steps</strong> &#8594;</p>

    <ol>
      <li>add <code class="highlighter-rouge">config.json</code> to your <code class="highlighter-rouge">.gitignore</code> so that your credentials don&#39;t inadvertently get committed</li>
      <li>in <code class="highlighter-rouge">db.js</code> add the following code before <code class="highlighter-rouge">mongoose.connect</code>:
        <pre><code data-trim="" contenteditable="">// is the environment variable, NODE_ENV, set to DEV? 
let dbconf;
if (process.env.NODE_ENV === 'DEV') {
 // if we're in DEV mode, then read the configration from a file
 // use blocking file io to do this...
 const fs = require('fs');
 const path = require('path');
 const fn = path.join(__dirname, 'config.json');
 const data = fs.readFileSync(fn);

 // our configuration file will be in json, so parse it and set the
 // conenction string appropriately!
 const conf = JSON.parse(data);
 dbconf = conf.dbconf;
} else {
 // if we're not in DEV mode (the graders are testing your work), then use
 dbconf = 'mongodb://localhost/hw05';
}
</code></pre>
      </li>
      <li>when you use <code class="highlighter-rouge">mongoose.connect</code>, pass in the variable, <code class="highlighter-rouge">dbconf</code>, as the argument instead of a hardcoded string
        <ul>
          <li><code class="highlighter-rouge">mongoose.connect(dbconf);</code></li>
        </ul>
      </li>
      <li>you can test that everything works by:
        <ul>
          <li>try running your application <strong>locally</strong> (on your own computer) without any environment variables (just use <code class="highlighter-rouge">node app.js</code> or <code class="highlighter-rouge">./bin/www</code>)
            <ul>
              <li>and note that your connection <em>should</em> fail due to bad credentials (if you&#39;ve configured mongodb with authenticaiton)</li>
            </ul>
          </li>
          <li>then&#8230; create a <code class="highlighter-rouge">config.json</code> with a single json object in it:
            <ul>
              <li>the key int the object should be <code class="highlighter-rouge">"dbconf"</code> (remember that json keys are double quoted)</li>
              <li>the value should be <code class="highlighter-rouge">"mongodb://username:password@localhost/hw05"</code></li>
              <li>`{&quot;dbconf&quot;:&quot;mongodb://username:password@localhost/hw05&quot;}</li>
            </ul>
          </li>
          <li>then, run your application again, this time forcing your app to use the config file
            <ul>
              <li><code class="highlighter-rouge">NODE_ENV=DEV node app.js</code> or <code class="highlighter-rouge">NODE_ENV=DEV ./bin/www</code></li>
            </ul>
          </li>
          <li><strong>DO NOT COMMIT</strong> <code class="highlighter-rouge">config.json</code> (in fact, it should be in your <code class="highlighter-rouge">.gitignore</code> as the previous instructions specify)</li>
          <li>(you&#39;ll create a <code class="highlighter-rouge">config.json</code> on the server)</li>
        </ul>
      </li>
    </ol>

    <p>Note, another method for using authentication is to pass in an object with options as the second argument (again, these options should be brought in from a config file)::</p>

    <pre><code data-trim="" contenteditable="">
mongoose.connect(
	"mongodb://localhost/hw05",
	{
		auth: {
			authdb:"admin",
			user: "username",
			password: "password"
		}
	}
)
</code></pre>

    <h3 id="schema">Schema</h3>

    <p>For larger projects, there is usually one file per schema, all located in a separate folder called models. For now, however, define the following Schema within <code>db.js</code>. Check out the slides on:</p>

    <ul>
      <li><a href="../slides/14/mongo.html">the MongoDB Demo</a></li>
      <li><a href="../slides/14/mongoose.html">and/or the Mongoose API</a></li>
      <li>(or alternatively <a href="http://mongoosejs.com/docs/guide.html">check out the docs!</a>)</li>
    </ul>

    <p>Since we&#39;re storing review of books, we&#39;ll create a couple of schemas: one that represents books and another that represents reviews. Reviews will be <a href="https://mongoosejs.com/docs/subdocs.html">embedded</a> within books. See <a href="../slides/12/mongoose.htmll#/10">the slides for an example</a>. Here&#39;s what the documents should contain (we&#39;re taking some shortcuts when designing the schemas to cut down on the complexity of the app):</p>

    <p>Book</p>

    <ul>
      <li>title (a <strong>required</strong> <code>String</code>): the title of the book</li>
      <li>author  (a  <strong>required</strong> <code>String</code>): the author of the book (note that we&#39;re assuming only one author per book, and the way we&#39;re storing data will cause redundancy and anomalies when reading, updating and deleting&#8230; both not great; better to have author as &quot;related&quot; document)</li>
      <li>isbn (a <strong>required</strong> <code>String</code> that is between 10 and 13 digits long): the isbn number of the book (note that we&#39;re storing two possible isbns in the same field&#8230; also not good; better to have two fields)</li>
      <li>reviews (an <code class="highlighter-rouge">Array</code> of <code class="highlighter-rouge">Review</code> documents; can be blank): the reviews associated with this book</li>
      <li>slug (a <code class="highlighter-rouge">String</code>): ‚ö†Ô∏è you do not have to explicitly define this in your schema, it will be added by a plugin (see below)</li>
    </ul>

    <p>Review</p>

    <ul>
      <li>rating (a <strong>required</strong> <code>Number</code> between 1 and 5 inclusive)</li>
      <li>name (a <em>optional</em> <code>String</code>)</li>
      <li>text (a <strong>required</strong> <code>String</code>)</li>
    </ul>

    <p>Create a schema and database connection using the slides and information above.</p>

    <ul>
      <li>create two schemas (remember that you don&#39;t have to add <code class="highlighter-rouge">slug</code> yet&#8230; that&#39;ll be handled in a bit!)</li>
      <li>use your schema to define your model&#8230; the model is used as a constructor to create new documents&#8230; or as an object with methods that allows the read or update of existing documents. See an <a href="../slides/12/mongoose.html#/10">example in the slides on Mongoose</a></li>
      <li>‚ö†Ô∏è add a plugin to automatically create a slug property in your <code class="highlighter-rouge">Book</code> object using the book&#39;s title and author
        <ul>
          <li>for example, a book by Frank Herbert called Dune would have the following slug: <code class="highlighter-rouge">dune-frank-herbert</code></li>
          <li>this is the last part in the <a href="../slides/12/mongoose.html#/10">example Schema from the slides</a></li>
          <li>note that it is using the module that we installed earlier, <a href="https://www.npmjs.com/package/mongoose-url-slugs">mongoose-url-slugs</a></li>
          <li>this module automatically generates slugs for us, and we don&#39;t have to explicitly add <code class="highlighter-rouge">slug</code> to our schema (it&#39;ll <em>just</em> appear)</li>
        </ul>
      </li>
      <li>you must place the following code after you register <code class="highlighter-rouge">mongoose-url-slugs</code> as a plugin so that mongoose is aware that your model exists (it <em>registers</em> our model so that you can retrieve it later): &lt;pre&gt;<code data-trim="" contenteditable="">mongoose.model("Books", BookSchema)</code>&lt;/pre&gt;</li>
      <li>after this, you can connect to your database by calling <code class="highlighter-rouge">mongoose.connect</code> with your database connection string (host is <code class="highlighter-rouge">localhost</code>, database name is <code class="highlighter-rouge">hw05</code>.</li>
    </ul>

    <h2 id="part-2---displaying-all-books-adding-styles-and-adding-navigation">Part 2 - Displaying All Books, Adding Styles, and Adding Navigation</h2>

    <h3 id="overview-1">Overview</h3>

    <p>We&#39;ll be using mongoose to read in all of the books reviews from the database. Then, we&#39;ll be able to display all of the books from our database.</p>

    <h3 id="details">Details</h3>

    <p>There&#39;s a bunch of setup that we need in order to integrate our databases access code with our express app:</p>

    <ul>
      <li>in <code>app.js</code>, require the <code>db.js</code> file that you created so that the code that you wrote for the Schema and for connecting to the databases is executed</li>
      <li>at the top of <code>app.js</code>, after you&#39;ve created your application object: <code>require('./db');</code></li>
      <li>after that, retrieve the model that you registered with mongoose:
        <pre><code data-trim="" contenteditable="">const mongoose = require('mongoose');
const Book = mongoose.model('Book');
</code></pre>
      </li>
    </ul>

    <p>You can now use <code>Book.find</code> to retrieve all of the books in your database!</p>

    <ul>
      <li>create route handlers that accepts requests for <code class="highlighter-rouge">/</code> and <code class="highlighter-rouge">/books</code></li>
      <li><code class="highlighter-rouge">/</code> should just redirect to <code class="highlighter-rouge">/books</code></li>
      <li>in the <code class="highlighter-rouge">/books</code> route handler, the callback should use <code>Book.find</code> to retrieve all books!</li>
      <li><code>find</code> takes a <strong>query object</strong> (just a regular object) that specifies the criteria for what we&#39;re searching for using name/value pairs&#8230; for example <code>{title: "Advanced Programming in the UNIX Environment"}</code> would be all book reviews for title named <code>"Advanced Programming in the UNIX Environment"</code>.</li>
      <li>‚ö†Ô∏è if you leave the value empty (regardless of whether or not <code class="highlighter-rouge">title</code> or <code class="highlighter-rouge">author</code> is chosen), it&#39;ll just give back <strong>all books</strong> (clearing the filter)</li>
      <li>the second argument for find is yet another callback&#8230; this time, it&#39;s the function that&#39;s executed when mongoose finishes finding stuff for you</li>
      <li>find works like this:
        <pre><code data-trim="" contenteditable="">SomeModel.find({search: criteria}, function(err, varToStoreResult, count) {
		console.log(varToStoreResult); // &lt;---- variable contains found documents!
});
</code></pre>
      </li>
      <li>once you&#39;ve retrieved stuff from the database, you&#39;ll probably want to render your template&#8230; so in your callback, call <code>res.render</code>, rendering whatever template you&#39;d like to display your table</li>
      <li>you&#39;ll have to pass in your find results so that you can iterate over them in your template</li>
      <li>in your template, display the <code class="highlighter-rouge">title</code>, <code class="highlighter-rouge">author</code>, and <code class="highlighter-rouge">isbn</code> of each book
        <ul>
          <li>the animated gif example shown at the end of these instructions show that title is a link</li>
          <li>you don&#39;t have to add the link quite yet; we&#39;ll be doing that later in another part</li>
        </ul>
      </li>
      <li>try opening your page in your browser: <code class="highlighter-rouge">http://localhost:3000/books</code></li>
      <li>finally, <strong>add styles to your page and add some simple navigation that will appear on this page as well as any other page that you create</strong>
        <ul>
          <li>to add styles, place a css file in <code class="highlighter-rouge">public/css</code></li>
          <li>use a <code class="highlighter-rouge">link</code> tag in <code class="highlighter-rouge">layout.hbs</code> to include it</li>
          <li>style at your discretion (design will not be taken into account for grading, only the technical aspect of including a stylesheet will be graded)</li>
          <li>additionally, add the following navigation links (these should appear on every page):
            <ul>
              <li><code class="highlighter-rouge">Home</code> - retrieve books by using query parameter (<code class="highlighter-rouge">/</code>)</li>
              <li><code class="highlighter-rouge">Add a Book</code> - create a new book (<code class="highlighter-rouge">/books-new</code>)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>once you&#39;ve completed all of the steps above, you should have a page that looks like the image under the Example heading below
        <ul>
          <li>again, your sites styling, and even copy (that is the text content) does not have to match exactly; it&#39;s your decision how to style and what to name your site</li>
          <li>the following elements are shown in the image below, but do not have to be implemented yet
            <ul>
              <li>the filter form will be added in the next section</li>
              <li>the number of session visits will be added later in the instructions</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <h3 id="example---showing-all-books">Example - Showing All Books</h3>

    <p><img src="../resources/img/hw05-book-buzz/read.gif" /></p>

    <hr />

    <h2 id="part-3---filtering">Part 3 - Filtering</h2>

    <h3 id="overview-2">Overview</h3>

    <p>In this part of the assignment, you&#39;ll add a form to your page that allows you to filter books by their <strong>title</strong> and <strong>author</strong> via GET and query string parameters.</p>

    <h3 id="details-1">Details</h3>

    <p>You already know how to do most of this, but here&#39;s a rough sketch of some of the relevant tasks:</p>

    <ul>
      <li>in the same page as your table of books, create a form that uses GET
        <ul>
          <li>it should go to <code class="highlighter-rouge">/books</code> when submitted</li>
          <li>note that we <strong>don&#39;t</strong> need <code class="highlighter-rouge">req.body</code> for this since the request should be a GET</li>
          <li>also&#8230; why are we using GET instead of POST? because we&#39;re merely reading data&#8230; (pretty common convention for search / filter)</li>
        </ul>
      </li>
      <li>modify your request handler to try to get the value of query string parameters (<code>req.query.nameOfFormElement</code>)
        <ul>
          <li>for example, submitting your form may result in adding a ?foo=bar to the url</li>
          <li>to access that name/value pair in the query string on the server side, <code>req.query.foo</code></li>
          <li>‚ö†Ô∏è you must use <code class="highlighter-rouge">filter</code> (either the <code class="highlighter-rouge">title</code> or <code class="highlighter-rouge">author</code>) and <code class="highlighter-rouge">value</code> (the value to filter by) as the query string names</li>
        </ul>
      </li>
      <li>use the value passed in from the form (via GET and the query string) to filter the books by <strong>title</strong> or <strong>author</strong></li>
      <li>pass in an object with the appropriate keys and values based on form input, if the form input is empty, return all books from the collection
        <ul>
          <li>the keys should match the property names defined in your schema</li>
          <li>multiple key / value pairs within the query object behave as if they were combined with <code class="highlighter-rouge">and</code>&#8230;</li>
          <li><code class="highlighter-rouge">{foo: 'bar', baz: 'qux'}</code> would match all documents that have <code class="highlighter-rouge">foo == 'bar' AND baz == 'qux'</code></li>
          <li><a href="http://mongoosejs.com/docs/api.html#find_find">see the mongoose docs</a> and <a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/">mongodb docs</a> for more info on <code class="highlighter-rouge">find</code></li>
        </ul>
      </li>
      <li>see the example below for a filter form in action!</li>
    </ul>

    <h3 id="example---filtering-books">Example - Filtering Books</h3>

    <p><img src="../resources/img/hw05-book-buzz/filter.gif" /></p>

    <hr />

    <h2 id="part-4---creating-a-book">Part 4 - Creating a Book</h2>

    <h3 id="overview-3">Overview</h3>

    <p>In this part of the assignment, you&#39;ll create another page that contains a form to add new books. The form will POST data&#8230; and then redirect back to <code>/books</code>.</p>

    <h3 id="details-2">Details</h3>

    <p>Again, you&#39;ve already done something similar in a previous lab / assignment (using an in-memory store), but here&#39;s a rough sketch of some of the relevant tasks:</p>

    <ul>
      <li>make sure that the following steps from earlier in the instructions have been completed:
        <ul>
          <li>check that a link to <code class="highlighter-rouge">/books-new</code> has been created in all of your pages</li>
          <li>&#8230;and that you are able to parse http POST request bodies so that <code class="highlighter-rouge">req.body</code> is available</li>
        </ul>
      </li>
      <li>create the appropriate route handlers that accepts requests for <code>/books-new</code></li>
      <li>you&#39;ll create two route handlers for <code class="highlighter-rouge">/books-new</code>: one for showing the form and one for processing the form
        <ul>
          <li>GET will handle showing the form
            <ul>
              <li>create another template file</li>
              <li>add a form to your template</li>
              <li>‚ö†Ô∏è you must use the following <code class="highlighter-rouge">name</code> attributes for your form inputs (this will make automated testing possible for the graders):
                <ul>
                  <li><code class="highlighter-rouge">name="title"</code></li>
                  <li><code class="highlighter-rouge">name="author"</code></li>
                  <li><code class="highlighter-rouge">name="isbn"</code></li>
                </ul>
              </li>
            </ul>
          </li>
          <li>POST will handle the form submission
            <ul>
              <li>your request handler that deals with POSTs will create a new book in the database&#8230; <a href="../slides/14/mongo.html">check out the slides</a></li>
              <li>when it&#39;s done, it should redirect back to the page that shows all of the books</li>
              <li>‚ö†Ô∏è if one of the required fields are missing, the <code class="highlighter-rouge">err</code> object in <code class="highlighter-rouge">save</code> will be populated with data
                <ul>
                  <li>if an error exists (<code class="highlighter-rouge">if(err)</code>)&#8230;</li>
                  <li>re-render your create book form template rather than redirecting</li>
                  <li>pass along an error message that says there was in issue saving the book</li>
                  <li>(see the animated gif example below)</li>
                </ul>
              </li>
            </ul>
          </li>
        </ul>
      </li>
      <li>‚ö†Ô∏è when working with the data from <code class="highlighter-rouge">req.body</code>, you&#39;ll have to sanitize your input to prevent database query injection attacks
        <ul>
          <li>use <a href="https://www.npmjs.com/package/mongo-sanitize">mongo-sanitize</a></li>
          <li><code class="highlighter-rouge">npm install --save mongo-sanitize</code></li>
          <li>require it</li>
          <li>call <code class="highlighter-rouge">sanitize</code> on any string that your using as part of query with mongoose (finding, creating, etc.)</li>
        </ul>
      </li>
    </ul>

    <h3 id="example---adding-a-book">Example - Adding a Book</h3>

    <p>Note that this shows adding a book with an error&#8230; and adding a book successfully.</p>

    <p><img src="../resources/img/hw05-book-buzz/add.gif" /></p>

    <hr />

    <h2 id="part-5---showing-a-books-details">Part 5 - Showing a Book&#39;s Details</h2>

    <h3 id="overview-4">Overview</h3>

    <p>In this part of the assignment, you&#39;ll create another page that shows a book&#39;s details along with a form to add reviews / comments about that book.</p>

    <h3 id="details-3">Details</h3>

    <p>To show a book&#39;s details, we&#39;ll extract a part of the url path to use as a unique identifier for a book. We&#39;ll use this identifier to search for the book in the the database. The <code class="highlighter-rouge">slug</code> of a book will be part of the url path, so the route handler for <code class="highlighter-rouge">GET</code> will respond to <code class="highlighter-rouge">/books/:slug</code>. If a client requests <code class="highlighter-rouge">http://localhost:3000/books/dune-frank-herbert</code>, then <code class="highlighter-rouge">dune-frank-herbert</code> will be automatically available in the property <code class="highlighter-rouge">req.params.slug</code>. See the <a href="../slides/14/params.html#/">slides on URL Parameters</a></p>

    <ul>
      <li>first, modify your template for <code class="highlighter-rouge">books</code> (the one that shows all books) so that the book titles are links
        <ul>
          <li>construct the links in the template by wrapping the title in anchor (<code class="highlighter-rouge">a</code>) tags</li>
          <li>the <code class="highlighter-rouge">href</code> attribute of your <code class="highlighter-rouge">a</code> tag should link to <code class="highlighter-rouge">/books/the-slug-property-from-your-book</code></li>
          <li>(essentially {{book.slug}})</li>
        </ul>
      </li>
      <li>create an appropriate route handler that accepts a request for <code>GET /books/:slug</code>
        <ul>
          <li>it will extract the <code class="highlighter-rouge">slug</code> by using <code class="highlighter-rouge">req.params.slug</code></li>
          <li>use <code class="highlighter-rouge">find</code> on <code class="highlighter-rouge">Book</code> to search for that specific book</li>
        </ul>
      </li>
      <li>create a new template that will show a book&#39;s details and a comment form
        <ul>
          <li>the details shown will just be the book&#39;s title and author: <code class="highlighter-rouge">Reviews for $TITLE and $AUTHOR</code></li>
          <li>underneath that, show a form to add a review
            <ul>
              <li>‚ö†Ô∏è the form should <code class="highlighter-rouge">POST</code> to the current url plus <code class="highlighter-rouge">comments</code> (for example, if you&#39;re on <code class="highlighter-rouge">/books/dune-frank-herbert</code>, then the form should <code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">/books/dune-frank-herbert</code>)</li>
              <li>the form should allow you to specify a rating, your review and your name</li>
              <li>‚ö†Ô∏è the names of these form input elements should be <code class="highlighter-rouge">rating</code>, <code class="highlighter-rouge">text</code> and <code class="highlighter-rouge">name</code> (so, something like <code class="highlighter-rouge">name="rating"</code>)</li>
              <li>processing the form <code class="highlighter-rouge">POST</code> data will be handled in the next part</li>
            </ul>
          </li>
          <li>and, lastly, show all of the reviews for that book
            <ul>
              <li>this includes the <code class="highlighter-rouge">rating</code>, <code class="highlighter-rouge">name</code> and <code class="highlighter-rouge">text</code> fields</li>
              <li>‚ö†Ô∏è note that the <code class="highlighter-rouge">rating</code> must not simply be a number, but instead some repeated character (for example a rating of 3 could be ‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è or <code class="highlighter-rouge">***</code>)</li>
              <li>‚ö†Ô∏è if a book has no reviews, display a message that says there are no reviews</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <p>If a book can&#39;t be found, send back a page with a status of 404&#8230; along with a message saying that the page wasn&#39;t found:</p>

    <h3 id="example---showing-a-books-details-and-a-review-form">Example - Showing a Book&#39;s Details and a Review Form</h3>

    <p><img src="../resources/img/hw05-book-buzz/comments.gif" /></p>

    <h3 id="example---book-not-found">Example - Book not Found</h3>

    <p><img src="../resources/img/hw05-book-buzz/404.gif" /></p>

    <hr />

    <h2 id="part-6---adding-reviews">Part 6 - Adding Reviews</h2>

    <h3 id="overview-5">Overview</h3>

    <p>This part deals with adding a review for a specific book. Create a route handler that will accept POST data&#8230; and then redirect back to the book&#39;s details page</p>

    <h3 id="details-4">Details</h3>

    <ul>
      <li>create a route handler for a <code class="highlighter-rouge">POST</code> to <code class="highlighter-rouge">/books/:slug/coments</code></li>
      <li>use <code class="highlighter-rouge">findOneAndUpdate</code> to find the book by slug
        <ul>
          <li>this will allow us to find the book and add a new review to it</li>
          <li><a href="../slides/12/mongoose.html#/16">check out the slides on findOneAndUpdate</a></li>
          <li>pass a sanitized version of <code class="highlighter-rouge">req.params.slug</code> as a <em>query</em> object (first argument)</li>
          <li>&#8230;and use the data submitted from the form (again sanitized) as the <em>update</em> object (second argument)</li>
        </ul>
      </li>
      <li>when it&#39;s done, it should redirect back to the page that shows the book&#39;s details and comments page</li>
    </ul>

    <h3 id="example---adding-a-review">Example - Adding a Review</h3>

    <p><img src="../resources/img/hw05-book-buzz/comments-add.gif" /></p>

    <hr />

    <h2 id="part-7---number-of-pages-visited-by-session">Part 7 - Number of Pages Visited (by session)</h2>

    <h3 id="overview-6">Overview</h3>

    <p>Now that we have basic adding and filtering done, it&#39;s time to add some session based features.  Check out the <a href="../slides/10/sessions.html#/17">the slides on <code class="highlighter-rouge">express-session</code> middleware</a> before starting (they&#39;re near the end of the slides).</p>

    <p>Once your familiar with <code class="highlighter-rouge">express-session</code>, find a way to keep a count of the total number of pages that a user has seen. We can identify users by their session (which <code class="highlighter-rouge">express-session</code> will generate for us). Consequently, different sessions (for example, visiting the site on two different browsers) will increment different, independent, count totals.</p>

    <ul>
      <li>keep track of the number of times a user has visited any page on the site</li>
      <li>on all pages, display the number of pages a user has visited <code class="highlighter-rouge">Your session's total page visits: [some number]</code>
        <ul>
          <li>again, this should be shown on all pages</li>
          <li>one way to do this is to use <code class="highlighter-rouge">res.locals</code> (<a href="http://expressjs.com/en/api.html#res.locals">see the express documentation on res.locals</a>)
            <ul>
              <li>adding a property to <code class="highlighter-rouge">res.locals</code> makes that value available to <strong>all</strong> templates (with the property name as the variable name)</li>
              <li>in the example code in the documentation, middleware is used to create a property on res.locals for <strong>every request</strong>
                <pre><code data-trim="" contenteditable="">app.use(function(req, res, next){
      res.locals.user = req.user;
      res.locals.authenticated = ! req.user.anonymous;
      next();
  });
</code></pre>
              </li>
              <li>this property will be available in every template rendered (including <code class="highlighter-rouge">layout.hbs</code>)</li>
              <li>using the example above, regardless of what template you&#39;re in (again, including <code class="highlighter-rouge">layout.hbs</code>), you can use <code class="highlighter-rouge">user</code> and <code class="highlighter-rouge">authenticated</code> as template variables! üëç</li>
            </ul>
          </li>
          <li>you&#39;ll have to find some way of incrementing a counter variable that&#39;s session dependent (that is, different client sessions will have different visit counts) for every page visited, regardless of page / path</li>
          <li>once you&#39;ve implemented this, try refreshing the page or flipping back-and-forth between viewing all books and adding a book</li>
          <li>you should see the counter increment similar to the animation shown in the example section below</li>
          <li>it&#39;s ok to count <code class="highlighter-rouge">POST</code> requests as page visits</li>
        </ul>
      </li>
    </ul>

    <h3 id="example---keeping-track-of-number-of-pages-visited-during-session">Example - Keeping Track of Number of Pages Visited During Session</h3>

    <p><img src="../resources/img/hw05-book-buzz/visits.gif" /></p>

    <hr />

    <h2 id="about-the-reference-solution">About the Reference Solution</h2>

    <p>You&#39;re free to style your application at your discretion. With that said, the reference solution does use some outside resources:</p>

    <ul>
      <li>background image from <a href="https://www.xmple.com/wallpaper/black-beehive-honeycomb-yellow-hexagon-2736x1824-c2-ffd700-000000-l2-8-96-a-0-f-5-image/">xmple.com</a></li>
      <li>fonts (Merriweather and Lobster) from <a href="https://fonts.google.com/">Google Fonts</a></li>
    </ul>

  </div>

</div>

:ET