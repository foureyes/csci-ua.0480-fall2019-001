I"é.<section class="intro-slide">
  <h1 id="extracting-parameters-from-url-paths">Extracting Parameters from URL Paths</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h1 id="were-going-to-be-talking-about-urls">We&#39;re going to be talking about URLs&#8230;</h1>

</section>

<section>
  <h2 id="urls-are-important">URLs are Important!</h2>

  <p>URLs determine how your content / site is organized. They should be designed with clarity and longevity (we want URLs that don&#39;t disappear or change) in mind! <strong>What makes a good URL?</strong> &#8594;</p>

  <ul class="fragment">
    <li>it makes it obvious what content or resource you&#39;re retrieving!
      <ul>
        <li>a list of blog posts may go under <strong><code>/posts</code></strong> or <strong><code>/post</code></strong></li>
        <li>a single blog post my go in <strong><code>/post/[date]/[name-of-post]</code></strong></li>
        <li>it helps identify a specific <em>resource</em>: <strong><code>order/762190</code></strong></li>
      </ul>
    </li>
    <li>a URL should be human readable when possible:
      <ul>
        <li><strong><code>post/how-to-make-good-urls</code></strong></li>
        <li>this is an example of a <strong>slug</strong>, a unique, short name with special characters (such as spaces) replaced by hyphens</li>
      </ul>
    </li>
    <li>sometimes you may want to include an action in your url
      <ul>
        <li>form pages or URLs that you post to may belong under: <strong><code>post/create</code></strong></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="some-technical-considerations-and-conventions">Some Technical Considerations and Conventions</h2>

  <p>In general, <strong>good URLs are meaningful</strong> (their relevance to your content <strong>helps</strong> site usability and even search engine optimization)!</p>

  <p>Some additional <strong>best practices that should be followed when creating URLs</strong> include: &#8594;</p>

  <ul class="fragment">
    <li>never expose technical details (for example, extensions that reveal the technology stack that you use, such as .asp or .php)</li>
    <li>avoid meaningless information (although we used it in a previous homework, /home as a prefix to other URLs is superfluous, such as /home/about&#8230; when about can just come off of root)</li>
    <li>avoid needlessly long URLs</li>
    <li>be consistent with word separators (hyphen seems to be an accepted convention)</li>
    <li>never use whitespace or untypable characters</li>
    <li>use lowercase for your URLs</li>
  </ul>
</section>

<section>
  <h1 id="ok-great-we-have-a-meaningful-url-how-do-we-deal-with-pesky-clients-that-ask-for-that-url">Ok, great. We have a meaningful URL&#8230; how do we deal with pesky clients that ask for that URL?</h1>

</section>

<section>
  <h2 id="routing">Routing</h2>

  <p>One of the advantages of using a web framework is that most frameworks come with <strong>routing</strong>.</p>

  <p><strong>Routing</strong> is the mechanism by which requests (as specified by a <strong>URL</strong> and an HTTP <strong>method</strong>) are routed to the code that <em>handles</em> the request.</p>

  <p><strong>How does routing usually work for URLs in our application? How about routing for static files?</strong> &#8594;</p>

  <ul>
    <li class="fragment">a url is requested&#8230;</li>
    <li class="fragment">and we map those urls to callback functions in our <code>app</code> or <code>router</code> objects (<code>app.get</code>, <code>app.post</code> or <code>router.get</code> and <code>router.post</code>)</li>
    <li class="fragment">or the path that&#39;s specified is used by the static files middleware to retrieve the contents of the file matching that path, starting from  some folder on the file system</li>
    <li class="fragment">(of course, other middleware may provide responses as well)</li>
  </ul>
</section>

<section>
  <h2 id="routers-gonna-route">Routers Gonna Route</h2>

  <p>Which brings us to&#8230; <strong>what&#39;s a router again (an <em>actual</em> router object)?</strong> &#8594;</p>

  <p class="fragment">A router is an <em>isolated instance</em> of route handlers and middleware. It&#39;s an object that&#39;s essentially a <strong>mini-application</strong> &#8594;</p>

  <ul class="fragment">
    <li>you can define routes (or  <em>route handlers</em> - the HTTP verb methods, path and callback)</li>
    <li>you can also use middleware in a router</li>
  </ul>

  <p class="fragment"><br />
A few other notes:</p>

  <ul class="fragment">
    <li>routers are just middleware &#8230; so to load a Router, just pass it into app.use</li>
    <li><strong>you can&#39;t do other things that the application object can do, like listen.</strong></li>
  </ul>

</section>

<section>
  <h2 id="defining-paths">Defining Paths</h2>

  <p>In our previous examples of route handlers, we&#39;ve matched paths <strong>exactly</strong> (well, with the exception of trailing slashes and casing):</p>

  <p><code>/about</code></p>

  <p>Sometimes, an exact match isn&#39;t what we want, though. <strong>In some cases we may want a single route handler for multiple, similar, paths</strong> (for example <code>posts/some-post-title</code> may always map to a route handler that retrieves a post with <code>some-post-title)</code>.</p>

</section>

<section>
  <h2 id="paths-and-regular-expressions">Paths and Regular Expressions</h2>

  <p>Route handlers can use regular expressions to <em>capture</em> incoming requests that are all going to similar paths. We can specify patterns to match URLs.</p>

  <p>A <strong>regular expression</strong> is a series of characters that define a pattern. These patterns can be made up of:</p>

  <ul>
    <li>simple characters - characters that you want to match directly</li>
    <li>special characters - characters that specify some a pattern rather than a direct match</li>
  </ul>

</section>

<section>
  <h2 id="regular-expressions">Regular Expressions</h2>

  <p><strong>What are some examples of regular expression special characters?</strong> &#8594;</p>

  <ul class="fragment">
    <li><strong>.</strong> - any character</li>
    <li><strong>\w</strong> - any <em>word</em> character</li>
    <li><strong>\d</strong> - any digit character</li>
    <li>[xyz] - one of any of these characters</li>
    <li>[^xyz] - any character that&#39;s not in this set of characters</li>
    <li><strong>^</strong> - beginning of line</li>
    <li><strong>$</strong> - end of line</li>
    <li>{n} - n of the preceding</li>
    <li>{n,m} - at least n and at most m of the preceding</li>
    <li><strong>?</strong> - 0 or 1 of the preceding</li>
    <li><strong>*</strong> - 0 or more of the preceding</li>
    <li><strong>+</strong> - 1 or more of the preceding</li>
  </ul>
</section>

<section>
  <h2 id="regular-expressions-in-javascript">Regular Expressions in JavaScript</h2>

  <p>In JavaScript, <strong>regular expressions are bounded by forward slashes</strong> (they&#39;re not strings, so no quotation marks).</p>

  <p>Here are a few examples of regular expressions using a <code>String</code>&#39;s <code>match</code> method (searches for regular expression in string):</p>

  <pre><code data-trim="" contenteditable="">
'hello'.match(/ell/) // exactly ell
'swell'.match(/.ell/) // any character and ell
'hello'.match(/^.ell/) // starts with any character and ell
'swell'.match(/^.ell/) // starts with any character and ell
</code></pre>

  <pre><code data-trim="" contenteditable="">
// these all demonstrate how to specify number of matches
'hello'.match(/el*/) // e, then 0 or more l's
'he'.match(/el*/) // e, then 0 or more l's
'hello'.match(/el+/) // e, then 1 or more l's
'he'.match(/el+/) // e, then 1 or more l's
'helllllo'.match(/el+/) //  e, then 1 or more l's
'hello'.match(/el{1,2}/) // e, then at least one l, at most 2 l's
'helllllo'.match(/el{1,2}/) // e, then at least one l, at most 2 l's
</code></pre>
</section>
<section>
  <h2 id="some-more-examples">Some More Examples!</h2>

  <ul>
    <li><code>/\d\d\d/</code> - 3 digits</li>
    <li><code>/h.\*$/</code> - h followed by 0 or more of any character up to the end of the line</li>
    <li><code>^\w\d?\d?$</code> - one letter at the beginning of a line followed by exactly 0, 1 or 2 digits</li>
  </ul>
</section>

<section>
  <h2 id="lets-see-this-work">Let&#39;s See This Work</h2>

  <p>In one of route handlers, let&#39;s try to use a regular expression that matches the following URLs:</p>

  <pre><code data-trim="" contenteditable="">
/class01
/class02
...
etc.
</code></pre>

  <pre><code data-trim="" contenteditable="">
// notice that the first argument, the path, is a regular expression
router.get(/class\d\d/, function(req, res) {
	res.send('All the classes!');
});
</code></pre>
</section>

<section>
  <h2 id="regular-expressions-continued">Regular Expressions Continued</h2>

  <p><strong>What path would you specify in your router to make all of these URLs match?</strong> &#8594;</p>

  <ul>
    <li>/jam</li>
    <li>/jem</li>
    <li>/jaaaaam</li>
    <li>/jingoism</li>
  </ul>

  <p><br />
But doesn&#39;t match</p>

  <ul>
    <li>/jm</li>
    <li>/ajam</li>
  </ul>

  <p><br /></p>
  <pre class="fragment"><code data-trim="" contenteditable="">
router.get(/^\/j.+m$/, function(req, res) {
	res.send('Matched');
});
</code></pre>
</section>

<section>
  <h2 id="that-was-neat-and-all-but">That Was Neat and All, But&#8230;</h2>

  <p>What if the path you&#39;re responding to has some meaningful information trapped in the URL? For example, maybe we want take the class number out of our <code>class\d\d</code> URL?</p>

  <p>Or perhaps you&#39;ve seen a URL like this:</p>

  <pre><code data-trim="" contenteditable="">
posts/2015-10-27/paths-are-great
</code></pre>

  <p><strong>What are some bits of this URL that may be important to our applications?</strong> &#8594;</p>

  <ul class="fragment">
    <li>the date</li>
    <li>the <em>slug</em></li>
  </ul>
</section>

<section>
  <h2 id="extracting-values-from-paths">Extracting Values From Paths</h2>

  <p>We can capture the values in a path by:</p>

  <ul>
    <li>specifying a path - as a string - with a part that&#39;s <strong>prefixed by a colon</strong> for every value we want to capture</li>
    <li>using <code>req.params</code> to access that variable</li>
  </ul>

  <p><br /></p>

  <pre><code data-trim="" contenteditable="">
'/some/other/parts/:var1/:var2'
</code></pre>

  <p><code>var1</code> and <code>var2</code> can be accessed through:</p>

  <pre><code data-trim="" contenteditable="">
req.params.var1
req.params.var2
</code></pre>
</section>

<section>
  <h2 id="a-full-example-of-extracting-parameters-from-a-url">A Full Example of Extracting Parameters from a URL</h2>

  <pre><code data-trim="" contenteditable="">
router.get('/some/other/parts/:var1/:var2', function(req, res) {
	res.send(req.params.var1 + ', ' + req.params.var2);
});
</code></pre>

  <p>In your browser:</p>

  <pre><code data-trim="" contenteditable="">
http://localhost:3000/some/other/parts/hello/world
</code></pre>
</section>

<section>
  <h2 id="capturing-bits-of-a-regular-expression">Capturing Bits of a Regular Expression</h2>

  <p><strong>We can also group parts of a regular expression so that they&#39;re captured in params as well!</strong>.</p>

  <ul>
    <li>surround the part you&#39;d like to capture with parentheses: <code>/class(\d\d)/</code> (captures the 2 digits after class)</li>
    <li>reference that part by indexing into <code>req.params</code>, with 0 being the first group, 1 the next, etc. &#8230; <code>req.params[0]</code></li>
  </ul>

  <p><br />
Using our previous <code>/class\d\d/</code>class example&#8230; to grab just the digits, we could:</p>

  <pre><code data-trim="" contenteditable="">
router.get(/class(\d\d)/, function(req, res) {
  res.send(req.params[0]);
});
</code></pre>
</section>
:ET