I"…B<div class="panel panel-default">
	<div class="panel-heading">socket.io Lab</div>
	<div class="panel-body">

    <h1 id="express-lab---busy-birder-10-points-for-in-class-projectquiz-grade">Express Lab - Busy Birder (10 points for In-Class Project/Quiz Grade)</h1>

    <h2 id="submission-process">Submission Process</h2>

    <ul>
      <li>work in groups of 2 or 3</li>
      <li><strong>submit using <a href="../#class11">the form for your section on the schedule</a></strong></li>
      <li><strong>each person on the team should submit their own individual form</strong></li>
    </ul>

    <h2 id="scoring">Scoring</h2>

    <ul>
      <li><strong>+7 points</strong> for showing up and submitting form</li>
      <li><strong>+2 points</strong> form submitted with a <em>reasonable</em> amount of <em>valid looking</em> code</li>
      <li><strong>+1 point</strong> code deployed on glitch.com (kind of optional, since you basically get 90% for just submitting a form with some code!)</li>
    </ul>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>serving static files</li>
      <li>handling forms</li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Create a bird watching site called <em>The Busy Birder</em>. You&#39;ll be creating 3 pages (2 of them allow form submission):</p>

    <ul>
      <li><strong>home</strong> - <code>/</code>: the first page on the site; links to the list and settings pages</li>
      <li><strong>list</strong> - <code>/birds</code>: lists <strong>all</strong> of the birds seen so far, as well as the number of times they&#39;ve been seen. also allows submission of bird sighting (by anyone!)</li>
      <li><strong>settings</strong> - <code>/settings</code>: controls the minimum number of birds seen on the list page&#8230; think of it as a <em>filter</em> for the list page</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw4-the-busy-birder.gif" alt="the busy birder" /></p>
    </div>

    <h2 id="part-1---setup">Part 1 - Setup</h2>

    <ul>
      <li>create a <code>package.json</code></li>
      <li><strong>install</strong> the following <strong>dependencies</strong> (make sure you use the <code>--save</code> option), and <strong>no others</strong>:
        <ul>
          <li><code>express</code></li>
          <li><code>hbs</code></li>
        </ul>
      </li>
    </ul>

    <h2 id="part-2---homepage-and-static-files">Part 2 - Homepage and Static Files</h2>

    <h3 id="enabling-static-files">Enabling Static Files</h3>

    <p>First, lets make sure we can serve up static content, like css and images.</p>

    <ul>
      <li>create the following directory structure in your project&#39;s root directory
        <ul>
          <li><code>public</code></li>
          <li><code>public/css</code></li>
          <li><code>public/img</code></li>
        </ul>
      </li>
      <li>add a blank css file in <code>public/css/base.css</code></li>
      <li>add an in image of a bird in<code>public/img/bird.png</code> (doesn&#39;t have to be <code class="highlighter-rouge">.png</code>, name this file / use whatever image format you like)</li>
      <li>create a basic express application called <code>app.js</code>; you don&#39;t have to define any routes yet&#8230;
        <ul>
          <li>check out the <a href="../slides/08/express.html#/26">slides on setting up an Express app</a></li>
        </ul>
      </li>
      <li>add the appropriate middleware to enable static file serving:
        <ul>
          <li>check out the <a href="../slides/08/express.html#/30">slides on serving static files with Express</a></li>
        </ul>
      </li>
      <li>test that both the css files and image work
        <ul>
          <li>for example, try to curl <code>http://localhost:3000/img/bird.png</code> (of course, change this url to match the <em>actual</em> name of the image you chose)</li>
          <li>or go that url in your browser</li>
        </ul>
      </li>
    </ul>

    <h3 id="creating-a-home-page">Creating a Home Page</h3>

    <p>Now that static files are set, create a homepage.</p>

    <ul>
      <li>
        <p>the homepage should field <code>GET</code> requests on the path, <code>/</code></p>
      </li>
      <li>set up handlebars - <a href="../slides/09/templating.html#/4">these slides</a>
        <ul>
          <li>get the config setup using <code class="highlighter-rouge">app.set</code> in <code class="highlighter-rouge">app.js</code></li>
          <li>create the appropriate views/templates and layout
            <ul>
              <li>create a <code>views</code> folder</li>
              <li>within that folder, create <code class="highlighter-rouge">layout.hbs</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>in your <code>views/layout.hbs</code>, drop in the surrounding html that will go on every page
        <ul>
          <li>pull in your <code>base.css</code> stylesheet (use a <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link">link tag</a>)</li>
          <li>include an <code>h1</code> on every page&#8230; the header on every page should say <strong>The Busy Birder</strong></li>
          <li>don&#39;t forget <code>body</code>, surrounded by triple curly braces!</li>
        </ul>
      </li>
      <li>in your template for your homepage (call this whatever you want&#8230; just make sure you can pull it up later), add the following:
        <ul>
          <li>an <code>h3</code> header with some welcome text</li>
          <li>an image of a bird</li>
          <li>a link to a <em>settings</em> page (settings)</li>
          <li>a link to <em>list of birds</em> page (birds)</li>
        </ul>
      </li>
      <li>create the appropriate route so that a <code>GET</code> request pulls up the page</li>
      <li>add some css to change background color, font color and font family</li>
    </ul>

    <p>Here&#39;s an example of what the page could look like (you don&#39;t have to use the same exact styles, but add enough styles so that you can see that it&#39;s being pulled up correctly):</p>

    <div class="img">
      <p><img src="../resources/img/hw4-home.png" alt="homepage" /></p>
    </div>

    <h2 id="part-3---list-of-bird-sightings">Part 3 - List of Bird Sightings</h2>

    <h3 id="overview----the-bird-list-page-and-bird-submission-form">Overview -  The Bird List Page and Bird Submission Form</h3>

    <p>The bird list page will list names of birds along with the number of times they&#39;ve been seen. By default, this list will start with some content:</p>

    <ul>
      <li>3 x Bald Eagle</li>
      <li>7 x Yellow Billed Duck</li>
      <li>4 x Great Cormorant</li>
    </ul>

    <p>This page will also allow you to submit the name of a bird that you saw. This will either:</p>

    <ul>
      <li>increment the quantity of birds seen if there&#39;s a bird with the same name already on the list</li>
      <li>add a new name to the list, with a quantity of one</li>
    </ul>

    <h3 id="middleware-and-logging">Middleware and Logging</h3>

    <p>First, get some logging together so that you can troubleshoot. Log out the request that you receive, including the request&#39;s body.</p>

    <ul>
      <li>use the body parsing middleware <code>express.urlencoded</code>; this will allow you to access the content of the request&#39;s body (you&#39;ll use this in the next part)
        <ul>
          <li>see the slides on <a href="../slides/10/forms.html#/6">forms to get body parsing middleware set up</a></li>
        </ul>
      </li>
      <li>set up some logging using your own middleware function; it should include
        <ul>
          <li>the request method and path</li>
          <li>followed by the contents of the request body</li>
          <li>if you need a major hint, this slides <a href="../slides/09/middleware.html#/12">shows middleware that logs out the method and path</a> (you just need to add the body of the request, provided by the <code class="highlighter-rouge">express.urlencoded</code> middleware above), <code class="highlighter-rouge">req.body</code>)</li>
        </ul>
      </li>
      <li>maintain a list of birds (can be a global variable)</li>
    </ul>

    <h3 id="bird-list">Bird List</h3>

    <p>Now for some actual content. This page will display the names of birds and the number of times they&#39;ve been seen.</p>

    <p><strong>Bootstrap the list with some data.</strong></p>

    <ul>
      <li>store all of the birdwatching data in a global Array of objects&#8230;</li>
      <li>each object has two properties:
        <ul>
          <li>a bird&#39;s name</li>
          <li>the number of times they&#39;ve been seen</li>
        </ul>
      </li>
      <li>it should start off with:
        <ul>
          <li>3 x Bald Eagle</li>
          <li>7 x Yellow Billed Duck</li>
          <li>4 x Great Cormorant</li>
        </ul>
      </li>
      <li>(This isn&#39;t really good practice, but we&#39;ll have to store the data <em>somewhere</em> for now!)</li>
    </ul>

    <p><strong>Create the actual page&#8230;</strong></p>

    <ul>
      <li>the list page should field <code>GET</code> requests on the path, <code>/birds</code></li>
      <li>set up the template and routes appropriately; remember to render the template with the correct context object
        <ul>
          <li>here&#39;s an example of <a href="../slides/08/express.html#/24">setting up a route</a></li>
          <li>and here&#39;s how to <a href="../slides/09/templating.html#/5">render a template</a></li>
        </ul>
      </li>
      <li>in the template, you can iterate through the list of birds using the <code>#each</code> helper
        <ul>
          <li>see the slides for how to <a href="../slides/09/templating.html#/12">use iteration with handlebars</a></li>
        </ul>
      </li>
      <li>put each quantity/name pair in a list item (<code>li</code>)</li>
      <li>additionally, make the quantity a different color than the name</li>
      <li>add a link to a <em>settings</em> page (settings)</li>
      <li>finally, and an <code>h3</code> header with text indicating that this is the <em>bird sightings</em> page</li>
    </ul>

    <p><strong>Test your page.</strong></p>

    <ul>
      <li>it should look a little like the image below</li>
      <li>(ignore the form for now&#8230; you&#39;ll set that up next)</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw4-list.png" alt="list" /></p>
    </div>

    <h3 id="bird-form">Bird Form</h3>

    <p><strong>Once it&#39;s working, create a form&#8230;</strong></p>

    <ul>
      <li>add a form beneath the list of birds
        <ul>
          <li>it should have a text <code>input</code>(name it appropriately&#8230; you&#39;ll see that name in the request body!)</li>
          <li>&#8230;as well as a submit <code>input</code></li>
        </ul>
      </li>
      <li>the form&#39;s method should be <code>POST</code></li>
      <li>the action should be empty string <code>""</code> or <code>birds</code> (it&#39;s <code>POST</code>ing to itself)</li>
      <li>modify <strong>app.js</strong>&#8230; add a route so that it accepts <code>POST</code> requests on <code>/birds</code>
        <ul>
          <li>see the slides on <a href="../slides/10/forms.html#/8">POST forms</a> for some quick background info</li>
          <li>in your callback function for this route&#8230;</li>
          <li>use the bird name that was passed in from the form (it should be in the request&#39;s body)&#8230;</li>
          <li>to search the current list of birds for an entry with the same name as what is the request&#39;s body</li>
          <li>if it exists, add one to it</li>
          <li>if it doesn&#39;t, create an object for it, with quantity one, and add it to the list</li>
          <li>&#8230;after that, redirect back to <code>/birds</code> with a <code>GET</code> request</li>
        </ul>
      </li>
      <li>the log should look something like this:</li>
    </ul>

    <p><code>GET</code> the list page.</p>

    <pre><code data-trim="" contenteditable="">GET /birds
=====
req.body: {}
</code></pre>

    <p><code>POST</code> the form (notice the body).</p>

    <pre><code data-trim="" contenteditable="">POST /birds
=====
req.body: { name: 'Ostrich', add: 'Add Another Bird' }
</code></pre>

    <p><code>GET</code> the list page again.</p>

    <pre><code data-trim="" contenteditable="">GET /birds
=====
req.body: {}
</code></pre>

    <h2 id="part-4---settings-page-filtering">Part 4 - Settings Page, Filtering</h2>

    <p>This last part will allow the user to choose a minimum value for sightings. This will temporarily add a filter to the list of birds shown on the  <code class="highlighter-rouge">/birds</code> page. For example, if the threshold is set to 4, only birds that have been sighted 4 times or more will show up on the list.</p>

    <h3 id="query-string">Query String</h3>

    <p><strong>Modify your <code class="highlighter-rouge">/birds</code> route so that it only displays birds that have been sighted for a minimum number of times.</strong> Do this by using the built-in <code class="highlighter-rouge">req.query</code> object that holds the values from a parsed query string (in the url).</p>

    <ul>
      <li>in the function that handles <code class="highlighter-rouge">/birds</code>, filter your global list of birds based on the a value of a property in <code class="highlighter-rouge">req.query</code>
        <ul>
          <li>name this any way you want</li>
          <li>note that the query string in the url should match the property name in <code class="highlighter-rouge">req.query</code></li>
          <li>for example, if the url were <code class="highlighter-rouge">/birds?foo=4</code>, then use <code class="highlighter-rouge">req.query.foo</code></li>
        </ul>
      </li>
      <li>pass the filtered list to your template rather than the whole list this to your for <code>/birds</code></li>
    </ul>

    <h3 id="now-with-a-form-settings-page">Now with a Form, <code class="highlighter-rouge">/settings</code> page</h3>

    <ul>
      <li>the settings page should field <code>GET</code> requests on the path, <code>/settings</code></li>
      <li>add a link to a <em>list</em> page (birds)</li>
      <li>add an <code>h3</code> header with text indicating that this is the <em>settings</em> page</li>
      <li>add a form to your settings page
        <ul>
          <li>it should have a text <code>input</code>(name it appropriately&#8230; you&#39;ll see that name in the request body!)</li>
          <li>&#8230;as well as a submit <code>input</code></li>
        </ul>
      </li>
      <li>the form&#39;s <code class="highlighter-rouge">method</code> should be <code>GET</code></li>
      <li>the <code class="highlighter-rouge">action</code> should be <code>"/birds"</code>  (it&#39;s <code>GET</code>ting to <code class="highlighter-rouge">/birds</code> with the appropriate query string)</li>
      <li>the page should look like:</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw4-settings.png" alt="settings" /></p>
    </div>

    <h2 id="part-5---deployment">Part 5 - Deployment</h2>

    <h3 id="deploying-to-glitchcom">Deploying to glitch.com</h3>

    <ol>
      <li><a href="https://glitch.com/edit/#!/remix/hello-express">go to glitch.com&#39;s express boilerplate app</a></li>
      <li>modify the existing <code class="highlighter-rouge">package.json</code> so that it has express and hbs within its dependencies</li>
      <li>add/modify necessary files!
        <ul>
          <li>for example&#8230;</li>
          <li>modify <code class="highlighter-rouge">server.js</code>/<code class="highlighter-rouge">app.js</code> to add your routes</li>
          <li>add files to <code class="highlighter-rouge">public/</code> (just start typing in file name with directory prefixed)</li>
          <li>add files to <code class="highlighter-rouge">views/</code> (just start typing in file name with directory prefixed)</li>
          <li>to add images, click on <code class="highlighter-rouge">new file</code> and <code class="highlighter-rouge">upload</code>&#8230; the file will be available under assets; copy the url after clicking on the image</li>
          <li>etc.</li>
        </ul>
      </li>
      <li><strong>change the port so that it looks in the env for the port number!</strong> (or keep the code as is from the boilerplate)
        <ul>
          <li><code class="highlighter-rouge">server.listen(process.env.PORT);</code></li>
        </ul>
      </li>
      <li>click on the look ðŸ‘€ link&#8230;
        <ul>
          <li>instantly deployed app!</li>
          <li>(click on logs link to see server output)</li>
        </ul>
      </li>
    </ol>

    <div class="hideInner">

    </div>
  </div>
</div>
:ET