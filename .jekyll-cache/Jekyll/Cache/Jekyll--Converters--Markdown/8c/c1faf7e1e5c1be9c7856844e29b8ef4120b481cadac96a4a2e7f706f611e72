I"pd<section class="intro-slide">
  <h1 id="variables-and-some-built-in-functions">Variables and Some Built-In Functions</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

</section>

<section>
  <h2 id="some-definitions">Some Definitions</h2>

  <p>We learned how to produce values from using operators on other values. <strong>We created expressions!</strong>.</p>

  <ul>
    <li><strong>expression</strong> - a fragment of code that produces a value
      <ul>
        <li>not a statement by itself</li>
        <li>every literal value is an expression - <code>27</code>, <code>"YES!"</code></li>
      </ul>
    </li>
    <li><strong>statement</strong> - a full instruction/action for the computer
      <ul>
        <li>in JavaScript <strong>most statements end in a semicolon</strong> (<strong>;</strong>)</li>
        <li>the simplest statement is an expression with a semicolon at the end - <code>27;</code>, <code>"YES!";</code></li>
      </ul>
    </li>
    <li><strong>program</strong> - <span class="fragment"> a sequence of statements that specify to a computer actions to perform</span></li>
    <li><strong>function</strong> - <span class="fragment"> a named sequence of code that can be called by name</span></li>
    <li><strong>built-in function</strong> <span class="fragment"> - a function available in the <em>global</em> namespace that is part of the core language</span></li>
  </ul>

</section>

<section>
  <h2 id="expressions-and-statements-examples">Expressions and Statements Examples</h2>

  <pre><code data-trim="" contenteditable="">
// Expression (no semicolon), evaluates to 6
1 + 5

// Statement, contains an expression
1 + 5;

// Statement, contains multiple expressions
parseInt("4" + "2");

// Even these are statements:
1;
"hi";
</code></pre>

  <ul>
    <li>Note that loops and if statements are also examples of (of course) <strong>statements</strong>, but they don&#39;t end in a semicolon.</li>
    <li><strong>Any statements that end with a block (curly braces) are not terminated with a semicolon</strong>.</li>
  </ul>

</section>

<section>
  <h2 id="a-quick-note-on-functions">A Quick Note on Functions</h2>

  <p><strong>If you declare a function using this (function declaration) syntax:</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
// function declaration, a single statement
function f() {
    // do stuff
}
</code></pre>

  <p class="fragment">&#8230; you have a single <strong>statement</strong> (note, no semicolon at the end).</p>

  <p class="fragment">However, any statement that:</p>

  <ul class="fragment">
    <li>involves functions</li>
    <li>but doesn&#39;t start with the actual keyword, <code class="highlighter-rouge">function</code></li>
    <li>will have a function expression (that is, an expression that evaluates to a function) in it:</li>
  </ul>

  <p><br /></p>

  <pre class="fragment"><code data-trim="" contenteditable="">
const foo = function bar(bax) {}; // &lt;-- function expression
const qux = function(corge) {}; // &lt;-- function expression
</code></pre>
</section>

<section data-background="#440000">
  <h2 id="soooo-most-statements-end-with-a-semicolon">Soooo&#8230; most statements end with a semicolon.</h2>

</section>

<section>
  <h2 id="automatic-semicolon-insertion">Automatic Semicolon Insertion</h2>

  <p><strong>JavaScript has a feature that automatically inserts semicolons at the end of statements (Automatic Semicolon Insertion / ASI)</strong> &#8594;</p>

  <ul>
    <li class="fragment"><strong>semicolons</strong> are actually <strong>optional</strong> and are placed at the end of statements for you! &#128077;</li>
    <li class="fragment">but there are some corner cases where <a href="http://speakingjs.com/es5/ch07.html#automatic_semicolon_insertion">ASI doesn&#39;t work as expected</a> &#128078; (below, ASI inserts a <code class="highlighter-rouge">;</code> immediately after <code class="highlighter-rouge">return</code>!)
      <pre><code data-trim="" contenteditable="">
return
{
  name: 'John'
}
</code></pre>
    </li>
    <li class="fragment">as with other <em>classic</em> divisive issues such as tabs vs spaces, there are two very opinionated camps on this:
      <ol>
        <li class="fragment"><strong>always explicitly include semicolons</strong> in your code because of the instances where ASI doesn&#39;t work</li>
        <li class="fragment"><strong>never use semicolons</strong>; ASI corner cases are rare and finite</li>
      </ol>
    </li>
    <li class="fragment">just pick one and be consistent (I try to use #1)</li>
  </ul>

</section>
<section>
  <h2 id="functions">Functions</h2>

  <p><strong>What&#39;s a function?</strong> &#8594;</p>

  <ul>
    <li>a <strong>function</strong> is a named sequence of statements that perform some useful action.</li>
    <li>it can take inputs, and it can return values, but it doesn&#39;t have to do either</li>
    <li>to <strong>call</strong> (or execute) a function, just call it by name, with parentheses after (with an optional list of commas separated inputs within the parentheses)</li>
    <li>the values passed to a function are called <strong>arguments</strong></li>
    <li>for example: isNaN(12) is a function call</li>
  </ul>
</section>

<section>
  <h2 id="to-call-a-function-use-its-name-followed-by-parentheses">To call a function, use its name followed by parentheses.</h2>
</section>

<section>
  <h2 id="built-in-functions">Built-In Functions</h2>

  <p>JavaScript comes with a bunch of built in functions (and objects) that are available globally. Here are a couple:</p>

  <ul>
    <li><strong>parseInt(string, radix)</strong> - <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">returns an integer</a> based on the string and radix
      <ul>
        <li>always specify radix</li>
        <li><code>parseInt("100", 2)</code> &#8594;</li>
        <li><code>parseInt("100", 10)</code> &#8594;</li>
      </ul>
    </li>
    <li><strong>console.log(obj1 [,obj2 &#8230;, objN])</strong> - <a href="https://developer.mozilla.org/en-US/docs/Web/API/console.log">outputs a message</a> (the string representation of obj) to the console (more on objects and methods later)
      <ul>
        <li><code>console.log("hi")</code></li>
        <li><code>console.log("hi", "hello")</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="variables">Variables</h2>

  <p><strong>variables</strong> are symbolic names for values.</p>

  <ul>
    <li>you can use a variable&#39;s name wherever you want to use that value.</li>
    <li>to create a variable, start with one of the following keywords:
      <ul>
        <li><strong>const</strong> or <strong>let</strong> (ES6) &#8230; or <strong>var</strong></li>
        <li>followed by a variable name</li>
        <li>optionally, assign a value to the variable by using <code class="highlighter-rouge">=</code> and a value or expression</li>
        <li>of course, you can add a semicolon (or not)</li>
      </ul>
    </li>
  </ul>

  <p><br /></p>
  <pre class="fragment"><code data-trim="" contenteditable="">
const s = 'hello';
let i = 21 * 2;
console.log(s);
console.log(++i);
</code></pre>
</section>

<section>
  <h2 id="whats-in-a-name">What&#39;s in a Name?</h2>

  <p>We can create <strong>identifiers</strong>, or variable names, based on these rules:</p>

  <ul>
    <li>start with a <strong>letter</strong>, <strong>underscore (_)</strong>, or <strong>dollar ($)</strong></li>
    <li>following characters can be any of above, and/or <strong>digits (0-9)</strong></li>
    <li>variable names are <strong>case sensitive</strong></li>
    <li><strong>cannot</strong> be a <strong>reserved word</strong></li>
  </ul>

  <p><br /> Speaking of reserved words&#8230;.</p>
</section>
<section>
  <h2 id="dont-use-reserved-words-as-variable-names">Don&#39;t Use Reserved Words as Variable Names</h2>

  <pre><code data-trim="" contenteditable="">
abstract
boolean break byte
case catch char class const continue
debugger default delete do double
else enum export extends
false final finally float for function
goto
if implements import in instanceof int interface
</code></pre>
  <pre><code data-trim="" contenteditable="">
let long
native new null
package private protected public
return
short static super switch synchronized
this throw throws transient true try typeof
var volatile void
while with
</code></pre>
</section>

<section>
  <h2 id="block-scope-w-const-or-let-es6">Block Scope w/ const or let (ES6)</h2>

  <p>Wait, so it looks like there are three ways to declare variables. <strong>What&#39;s the difference</strong>? <strong>Let&#39;s look at <code class="highlighter-rouge">const</code> and <code class="highlighter-rouge">let</code> first</strong> &#8594;</p>

  <ul>
    <li class="fragment">the <strong>scope</strong> of variables declared with <strong><code class="highlighter-rouge">const</code> and <code class="highlighter-rouge">let</code></strong> is the <strong>block that they&#39;re contained in</strong></li>
    <li class="fragment">a <strong>block</strong> is simply the area <strong>between opening and closing curly braces</strong></li>
  </ul>

  <p><br /></p>
  <pre class="fragment"><code data-trim="" contenteditable="">
{
   const s = 'in'; // just need two curly braces to make a block!
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
for(let i = 0; i &lt; 10; i++) {
   const s = 'also in'; // for loop body is a block!
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
function f() {
   const s = 'in too'; // function body is a block!
}
</code></pre>

</section>

<section>
  <h2 id="block-scope-continued">Block Scope Continued</h2>

  <p><strong>Accessing a variable when it&#39;s out of scope produces a run-time error (specifically a <code class="highlighter-rouge">ReferenceError</code>)!</strong></p>

  <pre><code data-trim="" contenteditable="">
console.log('out there');
{
   const s = 'in here'; 
}
console.log(s);
</code></pre>

  <p>(heeeey&#8230; sort of just like Java)</p>

  <p>Variables in an outer scope are visible from an inner scope:</p>

  <pre><code data-trim="" contenteditable="">
{
    const first = 'out there';
    {
        const full = `${first} in here`;
        console.log(full);
    }
}
</code></pre>
</section>

<section>
  <h2 id="temporal-dead-zone">Temporal Dead Zone</h2>

  <p><strong>This may seem obvious, but accessing a variable declared by <code class="highlighter-rouge">let</code> or <code class="highlighter-rouge">const</code> before it&#39;s declared will give a syntax error.</strong> &#8594;</p>

  <ul>
    <li class="fragment">for example:
      <pre><code data-trim="" contenteditable="">
console.log(s);
let s = 'after!';
// ReferenceError! s was used before it was declared
</code></pre>
    </li>
    <li class="fragment">the &quot;area&quot;/time between the start of a scope and when a variable is actually declared is called the <strong>Temporal Dead Zone</strong> (really, <a href="http://exploringjs.com/es6/ch_variables.html">it&#39;s true</a>)</li>
    <li class="fragment">why does this matter? <strong><code class="highlighter-rouge">var</code> does not behave this way!?</strong> (we&#39;ll see this in the slides on hoisting)</li>
  </ul>

</section>

<section>
  <h2 id="const-vs-let">const vs let</h2>

  <p><strong>OK&#8230; so what&#39;s the difference between <code class="highlighter-rouge">const</code> and <code class="highlighter-rouge">let</code> then?</strong> &#8594;</p>

  <ul>
    <li class="fragment">a variable declared with <strong><code class="highlighter-rouge">const</code></strong> <strong>can&#39;t be assigned a different value after it had been declared</strong></li>
    <li class="fragment"><code class="highlighter-rouge">const</code> reassignment will result in a run-time error (<code class="highlighter-rouge">TypeError</code>)
      <pre><code data-trim="" contenteditable="">
const dontChangeMe = "I told you so";
dontChangeMe = "why not?";
</code></pre>
    </li>
    <li class="fragment">note, however, that this  <strong>does not</strong> mean the variable is immutable</li>
    <li class="fragment">in fact, if a <code class="highlighter-rouge">const</code> declared variable <strong>is mutable</strong>, it can still be changed without error
      <pre><code data-trim="" contenteditable="">
const arr = [1, 2, 3];
arr[0] = 'wat? this is ok!?';
console.log(arr);
</code></pre>
    </li>
    <li class="fragment">on the other hand, <code class="highlighter-rouge">let</code> declared variables can be reassigned
      <pre><code data-trim="" contenteditable="">
let i = 0;
i = i + 2;
console.log(i);
</code></pre>
    </li>
  </ul>
</section>

<section>
  <h2 id="const-vs-let-continued">const vs let Continued</h2>

  <p><strong>Again, a value cannot be assigned to a <code class="highlighter-rouge">const</code> declared variable after it&#39;s been declared. This implies that&#8230;</strong> &#8594;</p>

  <ul>
    <li class="fragment">from mdn: &quot;An initializer for a constant is <strong>required</strong>; that is, you must specify its value in the same statement in which it&#39;s declared&quot;</li>
    <li class="fragment">or, simply put, <strong>you must assign a value immediately when declaring a variable with <code class="highlighter-rouge">const</code></strong></li>
    <li class="fragment">otherwise, you&#39;ll get a syntax error:
      <pre><code data-trim="" contenteditable="">
const foo;
foo = 'bar'
// SyntaxError: Missing initializer in const declaration
</code></pre>
    </li>
  </ul>

</section>

<section>
  <h2 id="default-initial-value">Default Initial Value</h2>

  <p><strong>When you declare a variable without assigning a value to it, it will be initialized to <code class="highlighter-rouge">undefined</code></strong> (this is really only valid for <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">var</code>, of course). &#8594;</p>

  <p>For example, the output of this&#8230;</p>

  <pre><code data-trim="" contenteditable="">
let a;
console.log(a);
</code></pre>

  <p class="fragment">is</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
undefined
</code></pre>

</section>

<section>
  <h2 id="redeclaring-variables-with-let-and-const">Redeclaring Variables with let and const</h2>

  <p><strong>If a variable has already been declared (with <code class="highlighter-rouge">let</code>, <code class="highlighter-rouge">const</code>, or <code class="highlighter-rouge">var</code>)</strong>&#8230; &#8594;</p>

  <ul>
    <li class="fragment">redeclaring a variable with the same identifier (name) with <strong><code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">const</code></strong> will result in a <code class="highlighter-rouge">SyntaxError</code></li>
    <li class="fragment">for example:
      <pre><code data-trim="" contenteditable="">
let i = 0;
let i = 1;
</code></pre>
    </li>
  </ul>

</section>

<section>
  <h2 id="a-note-about-loops">A Note About Loops</h2>

  <p><strong><code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">const</code> behavior in loops</strong>: &#8594;</p>

  <ul>
    <li class="fragment">if the loop variable is incremented/decremented, it must be declared as &#39;let&#39;:
      <pre><code data-trim="" contenteditable="">
for(let i = 0; i &lt; 10; i++) { console.log(i); }    
</code></pre>
    </li>
    <li class="fragment">repeatedly creating a variable with <code class="highlighter-rouge">let</code> or <code class="highlighter-rouge">const</code> in a loop body does not count as redeclaration (works fine; it&#39;s another scope!)
      <pre><code data-trim="" contenteditable="">
for(let i = 0; i &lt; 10; i++) { 
  const j = i * 2;
  console.log(j);
}    
</code></pre>
    </li>
  </ul>

</section>
<section>
  <h2 id="let--const-examples-1">let / const Examples #1</h2>

  <p><strong>What&#39;s the output of this code? No output and error are possible</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
if(true) {
    let name = 'Joe';
} else {
    let name = 'Not Joe';
}
console.log(name);
</code></pre>
  <pre class="fragment"><code data-trim="" contenteditable="">
ReferenceError: name is not defined
// name is not in scope (name is declared within the if statement)
</code></pre>
</section>

<section>
  <h2 id="let--const-examples-2">let / const Examples #2</h2>

  <p><strong>What&#39;s the output of this code? No output and error are possible</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
let name;
if(true) {
    name = 'Joe';
    {
        let full = name + ' Versoza';
        console.log(full);
    }
} else {
    name = 'Not Joe';
}
console.log(full);
</code></pre>
  <pre class="fragment"><code data-trim="" contenteditable="">
Joe Versoza
ReferenceError: full is not defined
// name is in scope, so full is Joe Versoza
// but full is not in scope in last line
</code></pre>
</section>

<section>
  <h2 id="let--const-examples-3">let / const Examples #3</h2>

  <p><strong>What&#39;s the output of this code? No output and error are possible</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
for(const i = 0; i &lt; 4; i++) {
    console.log(i);
}
</code></pre>
  <pre class="fragment"><code data-trim="" contenteditable="">
TypeError
// assignment to constant (i is incremented)
</code></pre>
</section>
<section>
  <h2 id="var">var</h2>

  <p><strong><code class="highlighter-rouge">var</code> creates a variable in function level scope, regardless of where it appears in the function</strong></p>

  <p><strong>What&#39;s the output of the following code?</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
function foo() {
    if(true) {
        var bar = 'baz';
    }     
    console.log(bar);
}
foo();
</code></pre>
  <pre class="fragment"><code data-trim="" contenteditable="">
baz
</code></pre>

  <ul>
    <li class="fragment">even though <code class="highlighter-rouge">bar</code> is in a block, its scope is the entire function!</li>
    <li class="fragment"><code class="highlighter-rouge">var</code> was the only keyword for declaring variables in ES5</li>
    <li class="fragment">behavior may seem unexpected if coming from a language with block scope</li>
  </ul>
</section>

<section>
  <h2 id="redeclaring-variables-with-var">Redeclaring Variables with var</h2>

  <p><strong>If a variable has already been declared <code class="highlighter-rouge">var</code></strong>&#8230; &#8594;</p>

  <ul>
    <li class="fragment">redeclaring a variable with <code class="highlighter-rouge">var</code> again is ok!</li>
    <li class="fragment">for example:
      <pre><code data-trim="" contenteditable="">
// no syntax error
var a = 'bar';
var a = 'baz';
</code></pre>
    </li>
    <li class="fragment">redeclaring with <code class="highlighter-rouge">var</code> but not assigning a value will have no effect on the original value:
      <pre><code data-trim="" contenteditable="">
// no syntax error
var a = 'bar';
var a;
// a is still 'bar'
</code></pre>
    </li>
  </ul>

</section>

<section data-background="#440000">

  <h2 id="always-use-const-let-or-var-when-declaring-variable-names">Always use <code class="highlighter-rouge">const</code>, <code class="highlighter-rouge">let</code> or <code class="highlighter-rouge">var</code> when declaring variable names!</h2>

  <p>Otherwise, you get global variables! This is particularly important when dealing with variable declarations in functions.</p>
</section>

<section>
  <h2 id="lets-see-this-in-action">Let&#39;s See This in Action</h2>

  <p><strong>How is a variable declared in JavaScript?</strong> &#8594;</p>

  <p>(create a variable called officeHoursRoom and set it equal to the number 423)</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
const officeHoursRoom = 423;
</code></pre>

  <ul class="fragment">
    <li>notice the keyword <code>const</code>?</li>
    <li>also notice that no type needs to be specified!</li>
  </ul>

  <!--_ -->
</section>

<section>
  <h2 id="not-declaring-a-variable">(Not) Declaring a Variable</h2>

  <p><strong>What happens if you don&#39;t use <code class="highlighter-rouge">const</code>, <code class="highlighter-rouge">let</code> or <code class="highlighter-rouge">var</code>?</strong> &#8594;</p>

  <ul>
    <li class="fragment">&#8230; you might end up modifying a variable in an outer scope!</li>
    <li class="fragment">or inadvertently creating a global variable <strong>ಠ_ಠ</strong>
      <pre><code data-trim="" contenteditable="">
function foo() {
  wat = 'uh oh!';
}
foo();
console.log(wat);
</code></pre>
    </li>
  </ul>

  <p><br /></p>

  <p><strong>What happens if you don&#39;t declare a variable <em>at all</em>?</strong> &#8594;</p>

  <ul>
    <li class="fragment">if you use a variable/identifier without ever declaring it (with or without <code class="highlighter-rouge">const</code>, <code class="highlighter-rouge">let</code>, or <code class="highlighter-rouge">var</code>)</li>
    <li class="fragment">you get a runtime error: <code class="highlighter-rouge">ReferenceError: variable is not defined</code></li>
  </ul>

</section>

<section>
  <h2 id="and-speaking-of-a-look-of-disapproval">And Speaking of a Look of Disapproval</h2>

  <h3 id="variable-names">(Variable Names)</h3>

  <p><strong>What are the rules for a valid identifier (variable name) again?</strong> &#8594;</p>

  <ul>
    <li class="fragment">start with a <strong>letter</strong>, <strong>underscore</strong> ( <code class="highlighter-rouge">_</code> ), or <strong>dollar</strong> ( <code>$</code> )</li>
    <li class="fragment">following characters can be any of above, and/or <strong>digits (0-9)</strong></li>
    <li class="fragment">can&#39;t use reserved words / keywords</li>
  </ul>
</section>

<section>
  <h2 id="dont-do-this-but">Don&#39;t Do This, But&#8230;</h2>

  <p>BTW, <strong>Unicode characters are allowed in variable names!!!</strong> &#8594;</p>

  <!--_ -->
  <pre class="fragment"><code data-trim="" contenteditable="">
const ಠ_ಠ = "disapproval";
console.log(ಠ_ಠ);
// totally works (O_o !?)
</code></pre>

  <p class="fragment">Thanks <a href="http://stackoverflow.com/questions/1661197/valid-characters-for-javascript-variable-names/9337047#9337047">Stackoverflow</a>! Also, here&#39;s more <a href="http://knowyourmeme.com/memes/%E0%B2%A0_%E0%B2%A0-look-of-disapproval">about that look</a>.</p>

  <p class="fragment">Oh, and <a href="https://mothereff.in/js-variables">this is a site that let&#39;s you check if a variable name is valid or not.</a></p>

  <!--_ -->
</section>

<section>
  <h2 id="another-note-on-variables">Another Note on Variables</h2>

  <p>Because JavaScript is dynamically typed&#8230; <strong>variable reassignment (for <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">var</code>, even of different types, is ok</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
let x = 25;
x = "foo";
</code></pre>

  <p class="fragment">Lastly, a quick aside&#8230;</p>

  <ul>
    <li class="fragment"><a href="http://en.wikipedia.org/wiki/Metasyntactic_variable">foo, bar, and baz are metasyntactic variables</a></li>
    <li class="fragment">apparently there are different metasyntactic variables for different natural languages!</li>
  </ul>
</section>

<section>
  <h2 id="ok-soooo-when-to-use-what">Ok&#8230; Soooo, When to Use What</h2>

  <p><strong><code class="highlighter-rouge">const</code> vs <code class="highlighter-rouge">let</code> vs <code class="highlighter-rouge">var</code>&#8230; There are a few ways to approach this (what do you think):</strong> &#8594;</p>

  <ol>
    <li class="fragment"><strong>use the appropriate keyword to express your intent</strong> &#8230; for example, if you know that you want a variable available throughout the function - use <code class="highlighter-rouge">var</code>, block level scoping - use <code class="highlighter-rouge">const</code> or <code class="highlighter-rouge">let</code></li>
    <li class="fragment"><strong>never use <code class="highlighter-rouge">var</code></strong>
      <ol>
        <li class="fragment">default to using <code class="highlighter-rouge">const</code>, and only use <code class="highlighter-rouge">let</code> when you know you need reassignment (like incrementing a loop variable)</li>
        <li class="fragment">default to using <code class="highlighter-rouge">let</code> and use <code class="highlighter-rouge">const</code> to signify a constant</li>
      </ol>
    </li>
  </ol>

  <p class="fragment"><br />
My preference is default to using <code class="highlighter-rouge">const</code> (#2, #1), mainly because it seems to be way the community is moving (preventing reassignment may reduce side effects / bugs).</p>

</section>
<section>
  <h2 id="definition-time">Definition Time</h2>

  <h3 id="what-time-is-it">(What time is it?)</h3>

  <p>From Speaking JavaScript:</p>

  <ul>
    <li>the <strong>environment</strong> is the collection of variables and their values that exist at a given time</li>
    <li>when a program starts up, <strong>this environment is not empty</strong></li>
    <li>it always <strong>contains variables that are part of the language standard</strong></li>
    <li>for example:
      <ul>
        <li>the <code>console</code> object is an available variable from the start of your program!</li>
        <li>same with <em>built-in</em> functions!</li>
      </ul>
    </li>
  </ul>
</section>
:ET