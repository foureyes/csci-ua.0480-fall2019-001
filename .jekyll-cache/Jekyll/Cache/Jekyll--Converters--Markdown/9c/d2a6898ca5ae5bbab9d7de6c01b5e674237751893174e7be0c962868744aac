I"¬<section class="intro-slide">
  <h1 id="forms">Forms</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>
<section>
  <h2 id="sending-data">Sending Data</h2>

  <p><strong>For now, we have two options (methods) of sending data to the server. What are they, and how do they send their data?</strong> &#8594;</p>

  <ul class="fragment">
    <li><strong>GET</strong> - data is in the query string</li>
    <li><strong>POST</strong> - data is in the request body</li>
  </ul>

  <p class="fragment"><br />
Note that <strong>POST</strong> is not any more secure than <strong>GET</strong> &#8230;.</p>

  <ul>
    <li class="fragment">since someone eavesdropping on your request can still see all parts of it (including the body, as long as it&#39;s not over HTTPS)</li>
    <li class="fragment">(though&#8230; <strong>can you think of a way that spills info in your GET request, that won&#39;t happen in POSTs?</strong> &#8594;)</li>
    <li class="fragment">your browser&#39;s history, or bookmarking!</li>
  </ul>
</section>

<section>
  <h2 id="sending-data-1">Sending Data</h2>

  <p><strong>So far&#8230; we know two ways of making our browser send data to the server:</strong> &#8594;</p>

  <ul class="fragment">
    <li>entering it in the URL bar</li>
    <li><strong>or submitting in through a form</strong></li>
  </ul>

  <p class="fragment"><br />
<strong>Let&#39;s see how form submission works.</strong> &#8594;</p>
</section>

<section>
  <h2 id="creating-a-form-that-sends-data">Creating a Form That Sends Data</h2>

  <p>To create a form that sends data, you&#39;ll need to:</p>

  <ul>
    <li>create the actual form in your mark-up
      <ul>
        <li>form fields (like input, type=text)</li>
        <li>something to tell the browser to send the form (like a submit button)</li>
      </ul>
    </li>
    <li>routes in your app to handle:
      <ul>
        <li>GETing the original form at some path</li>
        <li>POSTing (or __GET__ing) the form to a path</li>
        <li>optionally, <strong>GET</strong> after submission</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="creating-the-html-form">Creating the HTML Form</h2>

  <p>An HTML <code>form</code> element has the following attributes:</p>

  <ul>
    <li><strong>method</strong> - the method of the request&#8230; <strong>GET</strong> or <strong>POST</strong>
      <ul>
        <li>generally use <strong>POST</strong> for creating new (or even modifying) resources/pages/content (add, modify or delete data, for example)</li>
        <li>generally use <strong>GET</strong> for retrieving resources/pages/content (search or filter, for example)</li>
      </ul>
    </li>
    <li><strong>action</strong> - the URL that your browser will send data to</li>
  </ul>

  <p><br />
Your form&#39;s fields have the following attributes:</p>

  <ul>
    <li><strong>name</strong> - the name of the specific value you&#39;re sending over</li>
    <li><strong>value</strong> - (optionally) set the default value of this field</li>
  </ul>
</section>

<section>
  <h2 id="in-your-application">In Your Application</h2>

  <p>To handle data in the request body, you&#39;ll need to:</p>

  <ul>
    <li>make sure you&#39;ve used npm to install <code>body-parser</code></li>
    <li>require body-parser</li>
    <li><strong>add the appropriate routes&#8230; what will they be?</strong> &#8594;
      <ul>
        <li class="fragment">(at minimum, you&#39;ll need an <code>app.get</code>)</li>
        <li class="fragment">the route handling the <strong>POST</strong> can use request.body.property-name</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="using-the-body-parser-middleware">Using the Body Parser Middleware</h2>

  <p>Again, the body of a POST is likely to be encoded and compressed, so to parse out the data and add it to the <code>request</code> object, use the body-parser middleware:</p>

  <pre><code data-trim="" contenteditable="">
var bodyParser = require('body-parser');

// only handle urlencoded data...
// extended: false specifies that incoming values will be treated as strings
// or arrays
app.use(bodyParser.urlencoded({ extended: false }));
</code></pre>

</section>

<section>
  <h2 id="a-very-simple-example">A Very Simple Example</h2>

  <p>Here&#39;s an example that takes a name entered by the user&#8230; and displays it on the page directly. <strong>In your app.js&#8230;</strong> &#8594;</p>

  <p>(some setup)</p>

  <pre><code data-trim="" contenteditable="">
var express = require('express');
var app = express();
var bodyParser = require('body-parser');
var handlebars = require('express-handlebars').create({'defaultLayout':'main'});

app.engine('handlebars', handlebars.engine);
app.set('view engine', 'handlebars');
</code></pre>
  <pre><code data-trim="" contenteditable="">
app.use(bodyParser.urlencoded({ extended: false }));

app.use(function(req, res, next) {
	console.log(req.method, req.path);
	next();
});
</code></pre>

</section>
<section>
  <h2 id="example-continued">Example Continued</h2>

  <p>We&#39;ll create a global variable to <em>store</em> our data. Definitely not conventional; we&#39;ll use real data stores later.</p>

  <pre><code data-trim="" contenteditable="">
// oops, a global... ok for now...
myName = '';
</code></pre>
  <pre><code data-trim="" contenteditable="">
app.get('/', function(req, res) {
	res.render('simple-form', {'myName':myName});
});
</code></pre>
  <pre><code data-trim="" contenteditable="">
app.post('/', function(req, res) {
	console.log(req.body);
	// change the global
	myName = req.body.myName;
	res.redirect('/');
});
</code></pre>
  <pre><code data-trim="" contenteditable="">
app.listen(3000);
</code></pre>

</section>

<section>
  <h2 id="and-our-view">And our View</h2>

  <p>In simple-form.handlebars</p>

  <pre><code data-trim="" contenteditable="">

<strong>Current value of "myName":</strong> {{myName}}
<form method="POST" action="/">
Enter your name: <input type="text" name="myName" />
<input type="submit" />
</form>
</code></pre>
</section>

<section>
  <h2 id="some-other-exercises">Some Other Exercises</h2>

  <p>Let&#39;s try to implement the following&#8230; &#8594;</p>

  <ul>
    <li>a mad libs form&#8230;
      <ul>
        <li>display lyrics to your favorite song</li>
        <li>replace 4 words by words submitted through a form</li>
      </ul>
    </li>
    <li>a number guessing game&#8230;
      <ul>
        <li>your app keeps a secret number</li>
        <li>your form will submit a number&#8230;
          <ul>
            <li>if it matches the secret number redirect to a win page</li>
            <li>if it doesn&#39;t match, get the form again for another chance to guess</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</section>

:ET