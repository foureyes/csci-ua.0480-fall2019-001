I" <section class="intro-slide">
  <h1 id="require">Require</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="globals-built-in-functionality-modules">Globals, Built-In Functionality, Modules</h2>

  <h3 id="as-we-saw-node-has-several-built-in-objects-and-variables-for-example-console">As we saw, node has several built-in objects and variables, (for example, <code>console</code>).</h3>

  <p><strong>How do we show all of these built-in objects and variables?</strong> &#8594;</p>

  <p class="fragment">Check the <code>global</code> object. <strong>Let&#39;s see what&#39;s there.</strong> &#8594;</p>

  <p class="fragment">In addition to what&#39;s available in the global scope, you can access even more functionality (both built-in and external) <strong>via modules</strong>.</p>
</section>

<section>
  <h2 id="weve-already-seen-a-few-modules">We&#39;ve Already Seen a Few Modules</h2>

  <p><strong>Where have we seen them before? What were the modules we used? What do they do?</strong> &#8594;</p>

  <ul class="fragment">
    <li>we used <code>readline-sync</code> in our blackjack homework
      <ul>
        <li>provides a way to ask the user for input</li>
        <li><em>synchronously</em></li>
      </ul>
    </li>
    <li>the <code>request</code> module is in our current homework about basketball stats
      <ul>
        <li>a simple interface for making web requests</li>
      </ul>
    </li>
  </ul>
</section>
<section>
  <h2 id="modules-continued">Modules Continued</h2>

  <p>Modules allow the inclusion of other JavaScript files into your application. From the Node docs:</p>

  <blockquote>
    <p>Files and modules are in one-to-one correspondence</p>
  </blockquote>

  <p>In other words, <strong>modules are just JavaScript files</strong>. The <a href="http://nodejs.org/api/modules.html#modules_modules">Node docs</a> are pretty comprehensive about how modules work.</p>
</section>

<section>
  <h2 id="core-modules">Core Modules</h2>

  <p>Some modules are <strong>compiled directly into the node binary</strong>. They&#39;re available without having to create or download a module. <strong>A couple of useful core modules include:</strong> &#8594;</p>

  <ul>
    <li><a href="http://nodejs.org/api/http.html">HTTP</a> - for creating both HTTP clients and servers</li>
    <li><a href="http://nodejs.org/api/fs.html">File System</a> - for manipulating files and directories</li>
  </ul>

  <p><br /></p>
</section>

<section>
  <h2 id="require-1">Require</h2>

  <p><strong>Using a module</strong>:</p>

  <ul>
    <li>the <code>require</code> function loads a file
      <ul>
        <li>it takes a single argument, the name of the file to load (the .js extension can optionally be omitted when loading)</li>
        <li>it gives back an object</li>
      </ul>
    </li>
    <li>&#8230;the object that it returns has all of the exported properties of the module / file loaded</li>
    <li><strong>let&#39;s try it out with a core module</strong> &#8594;</li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
// bring in the http module
var http = require('http');
</code></pre>
</section>

<section>
  <h2 id="downloaded-modules">Downloaded Modules</h2>

  <p>Of course, we&#39;re not stuck with just using the core modules. We could download pre-built modules as well. <strong>How did we install some Node modules and how did we use them?</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
npm install module-name
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
var prompt = require('readline-sync').prompt;
var request = require('request');
</code></pre>

</section>

<section>
  <h2 id="creating-your-own-module">Creating your own module:</h2>

  <ul>
    <li>there&#39;s an available <strong><code>exports</code></strong> object in Node</li>
    <li>creating properties on that object makes those properties <em>public</em> to whatever is <em>importing</em> the file</li>
    <li>variables that aren&#39;t exported are <em>private</em> to the module</li>
    <li><strong>lets take a look (notice that the <code>exports</code> object is not available in the shell)</strong> &#8594;</li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
// showing what's in exports
console.log(exports);
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
// adding a property to exports
exports.foo = 'bar, baz';
</code></pre>

</section>

<section>
  <h2 id="all-together">All Together</h2>

  <p><strong>Here&#39;s an example of creating and using a module</strong>: &#8594;</p>

  <p>A module called <strong>creatures.js</strong>:</p>

  <pre><code data-trim="" contenteditable="">
exports.makeCreatureList = function (r) {
	return ['narwhale', 'unicorn'];
};
</code></pre>

  <p><strong>And&#8230; using that module</strong>: &#8594;</p>

  <pre><code data-trim="" contenteditable="">
var creaturesModule = require('./creatures.js');
creaturesModule.makeCreatureList().forEach(function(name) {
	console.log(name);
});
</code></pre>
</section>

<section>
  <h2 id="module-location">Module Location</h2>

  <p><strong>Where do you think the <code>require</code> function looks for a module? (we can probably guess 3 places correctly!)</strong> &#8594;</p>

  <p class="fragment">Some hints:</p>

  <ul class="fragment">
    <li>installing modules for homework</li>
    <li>consider the examples in the previous slides</li>
  </ul>

  <ol class="fragment">
    <li>if it&#39;s a <strong>core module</strong>, just bring the module in (it&#39;s compiled into the node binary)</li>
    <li>if it&#39;s a <strong>file</strong> (starts with /, ../, ./, etc.),
      <ul>
        <li>try to find that file relative to the location of the file that has the call to require</li>
        <li>or as an absolute path</li>
      </ul>
    </li>
    <li>or load it from the <strong>node_modules</strong> folder (which is where modules are downloaded when you install from npm)</li>
  </ol>

  <p class="fragment"><br />
Or&#8230; just <a href="http://nodejs.org/api/modules.html#modules_all_together">check out the crazy docs</a>.</p>
</section>

<section>
  <h2 id="notes-about-downloading-and-installing-modules">Notes About Downloading and Installing Modules</h2>

  <ul>
    <li>modules are downloaded and installed in the <strong>node_modules</strong> directory located in in the directory that you ran npm</li>
    <li>if it&#39;s not found there, it will look at the parent&#39;s directory&#39;s <strong>node_modules</strong> folder</li>
    <li>it will continue to look one directory up until the node_modules (if it exists) directory at the root of the filesystem is reached</li>
    <li><strong>be careful with regards to where things are installed / moving projects around</strong></li>
  </ul>
</section>

<section data-background="#440000">
  <h1 id="you-should-place-your-dependencies-locally-in-nodemodules-folders">You should place your dependencies locally in <code>node_modules</code> folders</h1>

</section>

<section>
  <h2 id="why-modules">Why Modules?</h2>

  <p><strong>Why do modules exist? Why is certain functionality broken out into modules? Why would we create our own modules?</strong></p>

  <ul>
    <li class="fragment">modules provide <strong>solutions to commonly encountered programming tasks</strong></li>
    <li class="fragment">they promote <strong>code reuse</strong></li>
    <li class="fragment"><strong>namespacing</strong> and preventing naming collisions</li>
    <li class="fragment">organizing code / <strong>keeping related functionality together</strong></li>
  </ul>
</section>

<section>
  <h2 id="nodes-module-system">Node&#39;s Module System</h2>

  <p>JavaScript, the language, doesn&#39;t actually have a module system!</p>

  <p>Node&#39;s module system is built off of a spec/API called CommonJS.</p>

  <p><strong>You won&#39;t be able to use this same module system in browser implementations of JavaScript without first including other JavaScript files/libraries (and there are a few to choose from) manually on your page.</strong></p>
</section>
:ET