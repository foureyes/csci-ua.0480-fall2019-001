I"˛k<div class="panel panel-default">
	<div class="panel-heading">Homework #5</div>
	<div class="panel-body">

    <h1 id="anonymous-course-reviews-sessions-and-storing-data---thursday-march-22nd-by-11pm">Anonymous Course Reviews (Sessions and Storing Data) - <strong>Thursday, March 22nd, by 11PM</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="goals">Goals</h3>

    <p>This assignment will cover storing and retrieving data in a database and in an in-memory session store. You will:</p>

    <ul>
      <li>use the commandline mongodb client to create a database, collection and several documents</li>
      <li>use mongoose to read and write data to and from mongodb from an express application</li>
      <li>use pre-built session middleware to read and write data to and from an in-memory session store on a per session basis</li>
    </ul>

    <h3 id="description">Description</h3>

    <p>You&#39;ll be creating a site where users can anonymously post reviews for courses. By the end of this project&#8230; you should be familiar with:</p>

    <ul>
      <li>writing middleware</li>
      <li>some basic read and write operations with mongodb&#8230;</li>
      <li>integrating mongodb with an Express web application using Mongoose (See the <a href="#examples">example interaction at the end of this page</a>).</li>
    </ul>

    <p>You&#39;ll create a single express application with the following directory layout (when you&#39;re done with all of the directions, the folder hierarchy should match the look the same as the one listed below): üìÅ</p>

    <p><code class="highlighter-rouge">/</code> (project root)</p>

    <ul>
      <li><code class="highlighter-rouge">package.json</code></li>
      <li><code class="highlighter-rouge">node_modules</code></li>
      <li><code class="highlighter-rouge">.gitignore</code></li>
      <li><code class="highlighter-rouge">.eslintrc.js</code></li>
      <li><code class="highlighter-rouge">/src</code>
        <ul>
          <li><code class="highlighter-rouge">app.js</code></li>
          <li><code class="highlighter-rouge">public</code></li>
          <li><code class="highlighter-rouge">img</code></li>
          <li><code class="highlighter-rouge">css</code>
            <ul>
              <li>your css file</li>
            </ul>
          </li>
          <li><code class="highlighter-rouge">views</code>
            <ul>
              <li><code class="highlighter-rouge">layout.hbs</code></li>
              <li>any other views</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <p>Your application will support the following routes:</p>

    <ul>
      <li><code class="highlighter-rouge">GET /</code> - show all course reviews</li>
      <li><code class="highlighter-rouge">GET /reviews/add</code> - show the add review form</li>
      <li><code class="highlighter-rouge">POST /reviews/add</code> - process a new review</li>
      <li><code class="highlighter-rouge">GET /reviews/mine</code> - show the reviews added during the user&#39;s session</li>
    </ul>

    <p>Finally, it should:</p>

    <ul>
      <li>be served on <strong>port 3000</strong></li>
      <li>be run from the <code class="highlighter-rouge">/src</code> directory</li>
      <li>use generated absolute paths where necessary (for example use <code class="highlighter-rouge">__dirname__</code> and <code class="highlighter-rouge">public</code> when creating the public path for express static)</li>
    </ul>

    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub.</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
    </ul>

    <h3 id="points-make-at-least-4-commits">(4 points) Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 4 separate commits - (for example, one option may be to make one commit per part in the homework).</li>
    </ul>

    <h2 id="part-1---setup-for-course-reviews-app-storing-data-in-a-database">Part 1 - Setup for Course Reviews App (Storing Data in a Database)</h2>

    <h3 id="installing-mongodb-and-preparing-data">Installing MongoDB and Preparing Data</h3>

    <ul>
      <li>to install MongoDB, use a package manager like apt on Linux or homebrew on MacOS (<code class="highlighter-rouge">brew install mongodb</code>)&#8230;  or follow the <a href="http://docs.mongodb.org/manual/installation/">install instructions for your operating system on MongoDB&#39;s site</a></li>
      <li>by default, MongoDB does not require a username/password to connect üòÆ
        <ul>
          <li>if you&#39;d like to add authentication <a href="https://docs.mongodb.com/manual/tutorial/enable-authentication/">you can follow this guide</a> (optional, but recommended)</li>
          <li>if you add authentication, make sure to:
            <ul>
              <li>(ideal) use environment variables / <code class="highlighter-rouge">process.env</code> to set the username and password (but default to no credentials if environment variable(s) are not set)</li>
              <li>(also ideal) read the username and password from a configuration file, but don&#39;t put the configration file under version control</li>
              <li>(not great, but easy) commit and push the version with no credentials, and keep the version with credentials locally &#8230; remembering to never commit and push that particular file</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>in order for you to connect to your database to work with data, your database server must be running
        <ul>
          <li>for some installations, MongoDB will start when your computer starts</li>
          <li>for other installations, you&#39;ll have to start it manually</li>
          <li>you can test if your database is running by:
            <ul>
              <li>attempting to connect to the test database ‚ö°</li>
              <li>in a terminal window, type in <code>mongo</code> (in any directory) to start the commandline client</li>
              <li>you should be given a message with the version number of the Mongo shell</li>
            </ul>
          </li>
          <li>if it&#39;s not running, you have to start the database server manually:
            <ul>
              <li>in a terminal window, type in <code>mongod</code>; this starts the server</li>
              <li>if it does not start because it&#39;s looking for a directory called <code>/data/db</code>
                <ul>
                  <li>this means that <code>mongod</code> is looking for a place to store you data</li>
                  <li>this typically happens on OSX installations, sooo&#8230;</li>
                  <li><a href="https://docs.mongodb.org/manual/tutorial/install-mongodb-on-os-x/#run-mongodb">check the docs</a>&#8230; and then try:</li>
                  <li>create the directory: <code>sudo mkdir -p /data/db</code></li>
                  <li>change the owner to your user (replace yourusername with your <em>actual</em> username for you system): <code>sudo chown -R yourusername:staff /data/</code></li>
                </ul>
              </li>
              <li>ensure that it is up and running by connecting to it using a commandline client&#8230; so in a different terminal tab/window, type in <code>mongo</code>:</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>once you&#39;re connected with a commandline client (mongo), start inserting documents into a database called <code>hw05</code> and a collection called <code>reviews</code>:
        <ul>
          <li>reviews will have a course number, course name, semester (fall/spring/summer), year, professor&#39;s name, and a review field</li>
          <li>so to insert, just do this in the commandline client:
            <pre><code data-trim="" contenteditable="">db.reviews.insert({ courseNumber: "CSCI-UA.0101", courseName: "Intro to CS", semester: "Fall", year: 2015, professor: "McTeacherson", review: "Now I can sort like pro!" });
</code></pre>
          </li>
          <li>(inserting will automatically create the database and collection for you if they don&#39;t already exist)</li>
          <li>insert the following reviews:
            <pre><code data-trim="" contenteditable="">CSCI-UA.0480, AIT, Spring, 2018, Versoza, The answer is always undefined
CSCI-UA.0002, Intro To Computer Programming, Fall, 2018, Foobarbaz, OMG you have to take this course
</code></pre>
          </li>
        </ul>
      </li>
      <li>use <code>db.reviews.find()</code> to show all of the reviews that you&#39;ve inserted
        <ul>
          <li>make sure there&#39;s <em>something</em> there&#8230;</li>
          <li>so that you know your web app actually has reviews to read!</li>
        </ul>
      </li>
      <li>use <code>ctrl + d</code> to exit the commandline client</li>
      <li>(make sure you keep your database server running, though üèÉ)</li>
    </ul>

    <h3 id="directory-structure-and-dependencies">Directory Structure and Dependencies</h3>

    <p>Start your usual express app by:</p>

    <ul>
      <li>copying over an eslint configuration, <code class="highlighter-rouge">.eslintrc.json</code>, from a previous assignment</li>
      <li>creating a <code class="highlighter-rouge">package.json</code> file with <code class="highlighter-rouge">npm init</code></li>
      <li>installing the appropriate modules and saving them to <code class="highlighter-rouge">package.json</code> using <code>--save</code> (this should have already been done from the previous parts)  in the root directory of your project</li>
      <li>additionally, installing <strong>mongoose</strong>: <code>npm install --save mongoose</code></li>
      <li>creating a <code class="highlighter-rouge">src</code> directory&#8230; and within that directory
        <ul>
          <li>creating an <code class="highlighter-rouge">app.js</code> file for your express app</li>
          <li>activate express-static and create a <code class="highlighter-rouge">public</code> folder (along with some folders for css, etc.)</li>
          <li>configure hbs as the templating engine and create a <code class="highlighter-rouge">views</code> folder along with <code class="highlighter-rouge">layout.hbs</code></li>
          <li>activate express.urlencoded (body parser) to parse http request bodies</li>
          <li>setting up and creating the appropriate folders for templating and serving static files</li>
        </ul>
      </li>
      <li>configure your server <strong>so that it uses port 3000</strong></li>
    </ul>

    <h3 id="connect-to-the-database">Connect to the Database</h3>

    <p>Create a file called <code>db.js</code> within <code class="highlighter-rouge">src</code>. <code>db.js</code> will contain:</p>

    <ul>
      <li>the code to connect to our database</li>
      <li>&#8230;and our Schema and model (which we&#39;ll use to access data in our database)</li>
    </ul>

    <p>In <code>db.js</code>, add the require for the <code>mongoose</code> module:</p>

    <pre><code data-trim="" contenteditable="">const mongoose = require('mongoose') </code></pre>

    <p>Leave a placeholder for your schema&#8230;</p>

    <pre><code data-trim="" contenteditable="">// my schema goes here!</code></pre>

    <p>And, finally, add the code that connects to the database. We&#39;ll connect to the local instance of MongoDB, and we&#39;ll use a database called <code>hw05</code> (this will be created for you once you start inserting documents&#8230; which you should have done already above!).</p>

    <pre><code data-trim="" contenteditable="">mongoose.connect('mongodb://localhost/hw05');
</code></pre>

    <p>Or&#8230; with authentication</p>

    <pre><code data-trim="" contenteditable="">mongoose.connect('mongodb://username:password@localhost/hw05');
</code></pre>

    <h3 id="schema">Schema</h3>

    <p>For larger projects, there is usually one file per schema, all located in a separate folder called models. For now, however, define the following Schema within <code>db.js</code>. Check out the slides on:</p>

    <ul>
      <li><a href="../slides/14/mongo.html">the MongoDB Demo</a></li>
      <li><a href="../slides/14/mongoose.html">and/or the Mongoose API</a></li>
      <li>(or alternatively <a href="http://mongoosejs.com/docs/guide.html">check out the docs!</a>)</li>
    </ul>

    <p>Since we&#39;re storing reviews, we&#39;d like each document to have:</p>

    <ul>
      <li>a course number (a <code>String</code>)</li>
      <li>a course name (a <code>String</code>)</li>
      <li>the semester for the course (a <code>String</code>)</li>
      <li>a year (a <code>Number</code>)</li>
      <li>the professor&#39;s name (a <code>String</code>)</li>
      <li>the review to be posted (a <code>String</code>)</li>
    </ul>

    <p>Create a schema based on the above slides, and insert your code under your <code>// my schema goes here!</code> comment.</p>

    <p>Then, use your schema to define your model&#8230; the model is used as a constructor to create new documents&#8230; or as an object with methods that allows the read or update of existing documents.</p>

    <p>You can place the following code after your schema and before the connection (assuming that you&#39;re schema looks something like this) so that mongoose is aware that your model exists (it <em>registers</em> our model so that you can retrieve it later):</p>

    <pre><code data-trim="" contenteditable="">mongoose.model('Review', Review);
</code></pre>

    <h2 id="part-2---displaying-all-reviews-adding-styles-and-adding-navigation">Part 2 - Displaying All Reviews, Adding Styles, and Adding Navigation</h2>

    <h3 id="overview-1">Overview</h3>

    <p>We&#39;ll be using mongoose to read in all of the reviews from the database. Then, we&#39;ll be able to display the reviews in a table.</p>

    <h3 id="details">Details</h3>

    <p>There&#39;s a bunch of setup that we need in order to integrate our databases access code with our express app:</p>

    <ul>
      <li>in <code>app.js</code>, require the <code>db.js</code> file that you created so that the code that you wrote for the Schema and for connecting to the databases is executed</li>
      <li>at the top of <code>app.js</code>, after you&#39;ve created your application object: <code>require('./db');</code></li>
      <li>after that, retrieve the model that you registered with mongoose:
        <pre><code data-trim="" contenteditable="">const mongoose = require('mongoose');
const Review = mongoose.model('Review');
</code></pre>
      </li>
    </ul>

    <p>You can now use <code>Review.find</code> to retrieve all of the reviews in your database!</p>

    <ul>
      <li>create a route handler that accepts requests for <code>/</code></li>
      <li>in that route handler, the callback should use <code>Review.find</code> to retrieve all reviews!</li>
      <li><code>find</code> takes a <strong>query object</strong> (just a regular object) that specifies the criteria for what we&#39;re searching for using name/value pairs&#8230; for example {year: 2016} would be all reviews for courses in 2016</li>
      <li>if you leave the query object empty, it&#39;ll just give back all reviews</li>
      <li>the second argument for find is yet another callback&#8230; this time, it&#39;s the function that&#39;s executed when mongoose finishes finding stuff for you</li>
      <li>find works like this:
        <pre><code data-trim="" contenteditable="">SomeModel.find({search: criteria}, function(err, varToStoreResult, count) {
console.log(varToStoreResult); // &lt;---- variable contains found documents!
});
</code></pre>
      </li>
      <li>so, once you&#39;ve retrieved stuff from the database, you&#39;ll probably want to render your template&#8230; so in your callback, call <code>res.render</code>, rendering whatever template you&#39;d like to display your table</li>
      <li>of course, you&#39;ll have to pass in your find results so that you can iterate over them in your template</li>
      <li>in your template, use standard <code>table</code> markup, with each row containing a review</li>
      <li>try opening your page in your browser to show a table of all reviews: <code class="highlighter-rouge">http://localhost:3000</code></li>
      <li>finally, <strong>add styles to your page and add some simple navigation that will appear on this page as well as any other page that you create</strong>
        <ul>
          <li>to add styles, place a css file in <code class="highlighter-rouge">public/css</code></li>
          <li>use a <code class="highlighter-rouge">link</code> tag in <code class="highlighter-rouge">layout.hbs</code> to include it</li>
          <li>style at your discretion (design will not be taken into account for grading, only the technical aspect of including a stylesheet will be graded)</li>
          <li>additionally, add the following navigation links (these should appear on every page):
            <ul>
              <li>all reviews (<code class="highlighter-rouge">/</code>)</li>
              <li>add a review (<code class="highlighter-rouge">/reviews/add</code>)</li>
              <li>show only &quot;my&quot; reviews (<code class="highlighter-rouge">/reviews/mine</code>)</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>once you&#39;ve completed all of the steps above, you should have a page that looks like the image under the Example heading below
        <ul>
          <li>again, your sites styling, and even copy (that is the text content) does not have to match exactly; it&#39;s your decision how to style and what to name your site</li>
          <li>the following elements are shown in the image below, but do not have to be implemented yet
            <ul>
              <li>the filter form will be added in the section</li>
              <li>the number of session visits will be added later in the instructions</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <h3 id="example---all-reviews">Example - All Reviews</h3>

    <p><img src="../resources/img/hw05-review-01-all-sm.gif" /></p>

    <hr />

    <h2 id="part-3---filtering">Part 3 - Filtering</h2>

    <h3 id="overview-2">Overview</h3>

    <p>In this part of the assignment, you&#39;ll add a form to your page that allows you to filter the table by semester, year, and professor&#39;s name via GET and query string parameters.</p>

    <h3 id="details-1">Details</h3>

    <p>You already know how to do most of this, but here&#39;s a rough sketch of some of the relevant tasks:</p>

    <ul>
      <li>in the same page as your table of reviews, create a form that uses GET
        <ul>
          <li>it should go to &#39;/&#39; when submitted</li>
          <li>note that we don&#39;t need <code class="highlighter-rouge">req.body</code> for this since the request should be a GET</li>
          <li>also&#8230; why are we using GET instead of POST? because we&#39;re merely reading data&#8230; (pretty common convention for search / filter)</li>
        </ul>
      </li>
      <li>modify your request handler to try to get the value of query string parameters (<code>req.query.nameOfFormElement</code>)
        <ul>
          <li>for example, submitting your form may result in adding a ?foo=bar to the url</li>
          <li>to access that name/value pair in the query string on the server side, <code>req.query.foo</code></li>
        </ul>
      </li>
      <li>use the value passed in from the form (via GET and the query string) to filter the reviews by director name</li>
      <li>however, instead of passing in an empty query object, <code class="highlighter-rouge">{}</code>, to find, pass in an object with the appropriate keys and values based on form input
        <ul>
          <li>the keys should match the property names defined in your schema</li>
          <li>multiple key / value pairs within the query object behave as if they were combined with <code class="highlighter-rouge">and</code>&#8230;</li>
          <li><code class="highlighter-rouge">{foo: 'bar', baz: 'qux'}</code> would match all documents that have <code class="highlighter-rouge">foo == 'bar' AND baz == 'qux'</code></li>
          <li><a href="http://mongoosejs.com/docs/api.html#find_find">see the mongoose docs</a> and <a href="https://docs.mongodb.com/manual/reference/method/db.collection.find/">mongodb docs</a> for more info on <code class="highlighter-rouge">find</code></li>
        </ul>
      </li>
      <li>see the example below for a filter form in action!</li>
    </ul>

    <h3 id="example---filtering-reviews">Example - Filtering Reviews</h3>

    <p><img src="../resources/img/hw05-review-02-filter-sm.gif" /></p>

    <hr />

    <h2 id="part-4---adding-a-review">Part 4 - Adding a Review</h2>

    <h3 id="overview-3">Overview</h3>

    <p>In this part of the assignment, you&#39;ll create another page that contains a form to add new reviews. The form will POST data&#8230; and then redirect back to <code>/</code>.</p>

    <h3 id="details-2">Details</h3>

    <p>Again, you&#39;ve already done something similar in a previous assignment (using an in-memory store), but here&#39;s a rough sketch of some of the relevant tasks:</p>

    <ul>
      <li>make sure that the following steps from earlier in the instructions have been completed:
        <ul>
          <li>check that a link to <code class="highlighter-rouge">/reviews/add</code> has been created in all of your pages</li>
          <li>&#8230;and that you are able to parse http POST request bodies so that <code class="highlighter-rouge">req.body</code> is available</li>
        </ul>
      </li>
      <li>create the appropriate route handlers that accepts requests for <code>/reviews/add</code></li>
      <li>you&#39;ll two route handlers for <code class="highlighter-rouge">/reviews/add</code>: one for showing the form and one form processing the form
        <ul>
          <li>GET will handle showing the form
            <ul>
              <li>create another template file</li>
              <li>add a form to your template</li>
            </ul>
          </li>
          <li>POST will handle the form submission
            <ul>
              <li>your request handler that deals with POSTs will create a new review in the database&#8230; <a href="../slides/14/mongo.html">check out the slides</a></li>
              <li>when it&#39;s done, it should redirect back to the page that shows all of the reviews</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <h3 id="example---adding-a-review">Example - Adding a Review</h3>

    <p><img src="../resources/img/hw05-review-03-add-sm.gif" /></p>

    <hr />

    <h2 id="part-5---pages-visited-by-session">Part 5 - Pages Visited (by session)</h2>

    <p>Now that we have basic adding and filtering done, it&#39;s time to add some session based features.  Check out the <a href="../slides/10/sessions.html#/17">the slides on <code class="highlighter-rouge">express-session</code> middleware</a> before starting (they&#39;re near the end of the slides).</p>

    <p>Once your familiar with <code class="highlighter-rouge">express-session</code>, find a way to keep a count of the total number of pages that a user has seen. We can identify users by their session (which <code class="highlighter-rouge">express-session</code> will generate for us). Consequently, different sessions (for example, visiting the site on two different browsers) will increment different, independent, count totals.</p>

    <ul>
      <li>keep track of the number of times a user has visited any page on the site</li>
      <li>on all pages, display the number of pages a user has visited <code class="highlighter-rouge">Your session's total page visits: [some number]</code>
        <ul>
          <li>again, this should be shown on all pages</li>
          <li>one way to do this is to use <code class="highlighter-rouge">res.locals</code> (<a href="http://expressjs.com/en/api.html#res.locals">see the express documentation on res.locals</a>)
            <ul>
              <li>adding a property to <code class="highlighter-rouge">res.locals</code> makes that value available to <strong>all</strong> templates (with the property name as the variable name)</li>
              <li>in the example code in the documentation, middleware is used to create a property on res.locals for <strong>every request</strong>
                <pre><code data-trim="" contenteditable="">app.use(function(req, res, next){
res.locals.user = req.user;
res.locals.authenticated = ! req.user.anonymous;
next();
});
</code></pre>
              </li>
              <li>this property will be available in every template rendered (including <code class="highlighter-rouge">layout.hbs</code>)</li>
              <li>using the example above, regardless of what template you&#39;re in (again, including <code class="highlighter-rouge">layout.hbs</code>), you can use <code class="highlighter-rouge">user</code> and <code class="highlighter-rouge">authenticated</code> as template variables! üëç</li>
            </ul>
          </li>
          <li>you&#39;ll have to find some way of incrementing a counter variable that&#39;s session dependent (that is, different client sessions will have different visit counts) for every page visited, regardless of page / path</li>
          <li>once you&#39;ve implemented this, try refreshing the page or flipping back-and-forth between viewing all reviews and adding a review</li>
          <li>you should see the counter increment similar to the animation shown in the example section below</li>
        </ul>
      </li>
    </ul>

    <h3 id="example---keeping-track-of-number-of-pages-visited-during-session">Example - Keeping Track of Number of Pages Visited During Session</h3>

    <p><img src="../resources/img/hw05-review-05-visit-sm.gif" /></p>

    <hr />

    <h2 id="part-6---movies-added-by-session">Part 6 - Movies Added (by session)</h2>

    <p>Finally, create one last page (which makes 3 total), <code class="highlighter-rouge">/reviews/mine</code>,  showing all of the reviews that have been added by the user during their session.</p>

    <ul>
      <li>you must use the <code class="highlighter-rouge">express-session</code> middleware to do this (<a href="../slides/10/sessions.html#/17">see the relevant slides</a>)</li>
      <li>there are a few ways to implement this:
        <ul>
          <li>storing review objects directly in the session (as well as in the database)</li>
          <li>or (more complicated) modify your schema / model so that you can store the session id of the session that created a review
            <ul>
              <li><code class="highlighter-rouge">req.session.id</code> will contain the id for that particular session</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>make sure you link to <code class="highlighter-rouge">/reviews/mine</code> from both of the existing pages so that the graders can see that you&#39;ve implemented this feature</li>
      <li>the example below assumes that the last class was entered during the user&#39;s session&#8230; so it shows up under the &#39;My Reviews&#39; page</li>
    </ul>

    <h3 id="example---show-the-movies-added-for-the-session">Example - Show The Movies Added for the Session</h3>

    <p><img src="../resources/img/hw05-review-04-session-sm.gif" /></p>

  </div>

</div>

:ET