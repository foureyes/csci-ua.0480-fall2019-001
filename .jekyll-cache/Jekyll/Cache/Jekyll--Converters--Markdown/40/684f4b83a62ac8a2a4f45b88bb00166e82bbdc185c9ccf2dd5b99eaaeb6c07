I"U*<style>
.warning {
    background-color: #ffaabb;
}
</style>

<div class="panel panel-default">
  <div class="panel-heading">Homework #8</div>
  <div class="panel-body">

    <h1 id="ajax---due-friday-april-20th-by-11pm">AJAX - <strong>Due Friday, April 20th by 11pm</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>XMLHttpRequest</li>
      <li>sending back json from Express</li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Convert the course review site from a previous homework to a &quot;single page app&quot;.  Use AJAX POSTs and GETs instead of regular form submissions to filter and add course reviews</p>

    <p>You will:</p>

    <ol>
      <li>Implement routes to create an API for retrieving reviews and adding new ones</li>
      <li>Use JavaScript to trigger background requests to the API from the form submit buttons</li>
    </ol>

    <p>Use the following resources as reference:</p>

    <ol>
      <li><a href="../slides/20/ajax.html">Slides on AJAX Part 1</a></li>
      <li><a href="../slides/21/ajax-express.html">Slides on AJAX Part 2</a></li>
      <li><a href="../slides/21/ajax-express.html#/47">AJAX POST (from Part 2)</a></li>
    </ol>

    <p>Check out the video below to see how the site will work. Pay attention to:</p>

    <ul>
      <li>the button presses</li>
      <li>the changes in the ui</li>
      <li>&#8230;and the network tab</li>
      <li>notice that there are no page refreshes!</li>
    </ul>

    <video controls="">
  <source src="../resources/video/hw08-course-review-ajax.webm" type="video/mp4" />
	Your browser does not support the video tag.
</video>
    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
      <li>Commits later than that date will be handled on a case-by-case basis.</li>
    </ul>

    <h3 id="make-at-least-3-commits">Make at Least 3 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 3 separate commits</li>
    </ul>

    <h3 id="code-structure">Code Structure:</h3>

    <p><strong>You should first create an express application that will be served on port 3000</strong></p>

    <p>The structure of the directory you&#39;re given looks like this:</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>package.json
src
└── coursez
    ├── app.js
    ├── db.js
    ├── public
    │   ├── index.html  // the 'single' page in your single page web app
    │   ├── js
    │   │   └── main.js // write your client side JavaScript here
    │   └── stylesheets
    │       └── style.css
    └── views
</code></pre></div>    </div>

    <p>Note that this will be implemented <strong>as a single page web app</strong>. This means that to implement these features:</p>

    <ol>
      <li><strong>create routes that send back JSON</strong> (essentially create an API)</li>
      <li>utilize the API by writing client side JavaScript that:
        <ul>
          <li>constructs an http request by retrieving the values of form elements</li>
          <li>requests data from url constructed in the background (AJAX)</li>
          <li>parses the result of the background request</li>
          <li>modifies the DOM appropriately</li>
        </ul>
      </li>
    </ol>

    <h3 id="some-of-this-project-is-already-built-for-you">Some of This Project is Already Built for You!</h3>

    <ol>
      <li>Server side code
        <ul>
          <li>database setup (a mongoose model, database connection, etc.) is provided through <code class="highlighter-rouge">db.js</code></li>
          <li>a partially implemented Express application is in <code class="highlighter-rouge">app.js</code>
            <ul>
              <li>it has basic setup for body parsing, static files, etc.</li>
              <li>it has stubs for route handlers, but the implementations are left</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Client side code
        <ul>
          <li>there are static files present in <code class="highlighter-rouge">public</code></li>
          <li>the html (<code class="highlighter-rouge">index.html</code>) and css (<code class="highlighter-rouge">style.css</code>) are already built</li>
          <li>but the client side JavaScript is not implemented (<code class="highlighter-rouge">main.js</code>), so you&#39;ll have to write all of your client side code there</li>
        </ul>
      </li>
    </ol>

    <h3 id="fetching-and-filtering">Fetching and Filtering:</h3>

    <ol>
      <li>Finish the route, <code class="highlighter-rouge">GET /api/messages</code>, which returns all of the existing reviews in the database
        <ol>
          <li>This route will support some of the same query string parameters as the course review assignment: year and semester</li>
          <li>It should return JSON list of review objects. For example, `GET /api/messages?year=2018
could return:
            <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[
  { "name":"Course 1", ... },
  { "name":"Course 2", ... }
]
</code></pre></div>            </div>
          </li>
          <li>Note that the model only contains these properties (which are less than the previous assignment):
            <ul>
              <li><code class="highlighter-rouge">name</code> - the course name</li>
              <li><code class="highlighter-rouge">semester</code> - the course semester</li>
              <li><code class="highlighter-rouge">year</code> - the year the course was offered</li>
              <li><code class="highlighter-rouge">review</code> - the text of the course review</li>
            </ul>
          </li>
          <li>To test, add some data into your database manually using the commandline mongo client using the properties supplied above</li>
          <li>enter the url <code class="highlighter-rouge">http://localhost:3000/api/messages</code> in your browser; you should get JSON back&#8230; with the JSON containing the reviews that you entered through the commandline</li>
        </ol>
      </li>
      <li>Add some JavaScript to <code class="highlighter-rouge">src/public/js/main.js</code> so that once the page loads:
        <ol>
          <li>a background request is made to the the api url above using <code class="highlighter-rouge">XMLHttpRequest</code></li>
          <li>no query string parameters should be present, so all of the reviews should be present in the response</li>
          <li>parse the response to get a collection of reviews</li>
          <li>add the reviews to the <code class="highlighter-rouge">tbody</code> element of the <code class="highlighter-rouge">table</code> as rows and table data (<code class="highlighter-rouge">tr</code> and <code class="highlighter-rouge">td</code>)</li>
          <li>use <code class="highlighter-rouge">document.createElement</code> to do this (avoid using <code class="highlighter-rouge">innerHTML</code>)</li>
          <li>at the end of this task, on initial page load, your application will make a background call to load all of the reviews in the database, so the page should have both the form and a table populated with reviews</li>
        </ol>
      </li>
      <li>Using JavaScript in <code class="highlighter-rouge">main.js</code>, modify the form so that when the button is pressed:
        <ol>
          <li>the regular form button press event isn&#39;t triggered (use <code class="highlighter-rouge">preventDefault</code>)</li>
          <li>instead, the values in the filter form field are retrieved from their elements and are used to construct the url to be requested (use the <code class="highlighter-rouge">.value</code> property of the form element)</li>
          <li>construct the url by using the base path, <code class="highlighter-rouge">/api/messages</code> and add a query string by concatenating <code class="highlighter-rouge">semester</code> and <code class="highlighter-rouge">year</code> to it</li>
          <li>make a background request to the url you construct using <code class="highlighter-rouge">XMLHttpRequest</code></li>
          <li>when the JSON is returned, it should be parsed into a list of objects representing reviews</li>
          <li>use those review objects to replace the contents of the table on the page (for example, you could remove all the children in <code class="highlighter-rouge">tbody</code> using <code class="highlighter-rouge">parentElement.removeChild(childElementToRemove)</code></li>
          <li>filtering with a blank field removes that field from the filter (so if semester were empty string, all semesters are allowed)</li>
        </ol>
      </li>
    </ol>

    <h3 id="adding-new-reviews">Adding New Reviews</h3>

    <ol>
      <li>In the route, <code class="highlighter-rouge">POST /api/message</code>,  create a new review
        <ul>
          <li>it should give back a JSON object as the response</li>
          <li>it should send back the object inserted, if successful</li>
          <li>otherwise, send back an object with a key called error&#8230; with a value containing an error message</li>
        </ul>
      </li>
      <li>The normal behavior of forms will need to be modified so that when the add button is pressed:
        <ul>
          <li>the regular form button press event isn&#39;t triggered (use <code class="highlighter-rouge">preventDefault</code>)</li>
          <li>&#8230; and instead, the values in the add form are retrieved</li>
          <li>a background request is made to the url
            <ul>
              <li>remember to set content type: <code class="highlighter-rouge">req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");</code></li>
              <li>in <code>res.send</code>, make sure to add the form data as name value pairs: <code>"name1=value1&amp;name2=value2&amp;nameN=valueN"</code></li>
            </ul>
          </li>
          <li>when a response is retrieved, repopulate the table so that the new review is added</li>
          <li><strong>if there was a filter set before adding, then clear the filter to show all reviews, including the newly added one</strong></li>
        </ul>
      </li>
    </ol>

    <p>See the movie from earlier in the instructions to check out an example of adding a review (pay close attention to the network tab showing the requests).</p>

  </div>

</div>

:ET