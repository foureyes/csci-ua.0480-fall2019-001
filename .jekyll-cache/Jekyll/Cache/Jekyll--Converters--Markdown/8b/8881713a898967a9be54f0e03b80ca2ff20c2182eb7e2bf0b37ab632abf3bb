I"X%<section class="intro-slide">
  <h1 id="variables-and-some-built-in-functions">Variables and Some Built-In Functions</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

</section>

<section>
  <h2 id="some-definitions">Some Definitions</h2>

  <p>We learned how to produce values from using operators on other values. <strong>We created expressions!</strong>.</p>

  <ul>
    <li><strong>expression</strong> - a fragment of code that produces a value
      <ul>
        <li>not a statement by itself</li>
        <li>every literal value is an expression - <code>27</code>, <code>"YES!"</code></li>
      </ul>
    </li>
    <li><strong>statement</strong> - a full instruction for the computer
      <ul>
        <li><strong>all statements end in a semicolon</strong> in JavaScript (you know <strong>;</strong>)</li>
        <li>the simplest statement is an expression with a semicolon at the end - <code>27;</code>, <code>"YES!";</code></li>
      </ul>
    </li>
    <li><strong>program</strong> - <span class="fragment"> a sequence of statements that specify to a computer actions to perform</span></li>
    <li><strong>function</strong> - <span class="fragment"> a named sequence of code that can be called by name</span></li>
    <li><strong>built-in function</strong> <span class="fragment"> - a function available in the <em>global</em> namespace that is part of the core language</span></li>
  </ul>

</section>

<section>
  <h2 id="expressions-and-statements-continued">Expressions and Statements Continued</h2>

  <pre><code data-trim="" contenteditable="">
// Expression (no semicolon)
1 + 5

// Statement
1 + 5;

// Even these are statements:
1;
"hi";
</code></pre>
</section>

<section data-background="#440000">
  <h2 id="all-statements-end-with-a-semicolon">All statements end with a semicolon.</h2>
</section>

<section>
  <h2 id="functions">Functions</h2>

  <p><strong>What&#39;s a function?</strong> &#8594;</p>

  <ul>
    <li>a <strong>function</strong> is a named sequence of statements that perform some useful action.</li>
    <li>it can take inputs, and it can return values, but it doesn&#39;t have to do either</li>
    <li>to <strong>call</strong> (or execute) a function, just call it by name, with parentheses after (with an optional list of commas separated inputs within the parentheses)</li>
    <li>the values passed to a function are called <strong>arguments</strong></li>
    <li>for example: isNaN(12) is a function call</li>
  </ul>
</section>

<section>
  <h2 id="to-call-a-function-use-its-name-followed-by-parentheses">To call a function, use its name followed by parentheses.</h2>
</section>

<section>
  <h2 id="built-in-functions">Built-In Functions</h2>

  <p>JavaScript comes with a bunch of built in functions (and objects) that are available globally. Here are a couple:</p>

  <ul>
    <li><strong>parseInt(string, radix)</strong> - <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt">returns an integer</a> based on the string and radix
      <ul>
        <li>always specify radix</li>
        <li><code>parseInt("100", 2)</code> &#8594;</li>
        <li><code>parseInt("100", 10)</code> &#8594;</li>
      </ul>
    </li>
    <li><strong>console.log(obj1 [,obj2 &#8230;, objN])</strong> - <a href="https://developer.mozilla.org/en-US/docs/Web/API/console.log">outputs a message</a> (the string representation of obj) to the console (more on objects and methods later)
      <ul>
        <li><code>console.log("hi")</code></li>
        <li><code>console.log("hi", "hello")</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="variables">Variables</h2>

  <ul>
    <li><strong>variables</strong> are symbolic names for values.
      <ul>
        <li>you can use a variable&#39;s name wherever you want to use that value.</li>
        <li>to create a variable, use the <strong>keyword</strong>, <strong>var</strong>, followed by =, then the value, and finally a semicolon</li>
        <li><code>var x = 23;</code></li>
        <li><code>console.log(x + 7); // using that variable</code></li>
      </ul>
    </li>
    <li>we can create <strong>identifiers</strong>, or variable names, based on these rules:
      <ul>
        <li>start with a <strong>letter</strong>, <strong>underscore (_)</strong>, or <strong>dollar ($)</strong></li>
        <li>following characters can be any of above, and/or <strong>digits (0-9)</strong></li>
        <li>variable names are case sensitive</li>
        <li>cannot be a reserved word</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="reserved-words">Reserved Words</h2>

  <p><strong>Don&#39;t use these as variable names</strong></p>

  <pre><code data-trim="" contenteditable="">
abstract
boolean break byte
case catch char class const continue
debugger default delete do double
else enum export extends
false final finally float for function
goto
if implements import in instanceof int interface
</code></pre>
  <pre><code data-trim="" contenteditable="">
long
native new null
package private protected public
return
short static super switch synchronized
this throw throws transient true try typeof
var volatile void
while with
</code></pre>
</section>

<section data-background="#440000">

  <h2 id="always-use-var-when-declaring-variable-names">Always use <code>var</code> when declaring variable names!</h2>

  <p>Otherwise, you get global variables! This is particularly important when dealing with variable declarations in functions.</p>
</section>

<section>
  <h2 id="lets-see-this-in-action">Let&#39;s See This in Action</h2>

  <p><strong>How is a variable declared in JavaScript?</strong> &#8594;</p>

  <p>(create a variable called officeHoursRoom and set it equal to the number 423)</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
var officeHoursRoom = 423;
</code></pre>

  <ul class="fragment">
    <li>notice the keyword <code>var</code>? <strong>Use it! All. The. Times. Really!</strong></li>
  </ul>

  <!--_ -->
</section>

<section>
  <h2 id="not-declaring-a-variable">(Not) Declaring a Variable</h2>

  <p><strong>What happens if you don&#39;t use var?</strong> &#8594;</p>

  <ul>
    <li class="fragment">&#8230; you might end up modifying a variable in an outer scope!</li>
    <li class="fragment">or inadvertently creating a global variable <strong>ಠ_ಠ</strong></li>
  </ul>

  <p><br /></p>

  <p><strong>What happens if you don&#39;t declare a variable <em>at all</em>?</strong> &#8594;</p>

  <ul>
    <li class="fragment">if you use a variable/identifier without ever declaring it (with or without var)</li>
    <li class="fragment">you get a runtime error: <code class="highlighter-rouge">ReferenceError: variable is not defined</code></li>
  </ul>

</section>

<section>
  <h2 id="and-speaking-of-a-look-of-disapproval">And Speaking of a Look of Disapproval</h2>

  <h3 id="variable-names">(Variable Names)</h3>

  <p><strong>What are the rules for a valid identifier (variable name) again?</strong> &#8594;</p>

  <ul>
    <li class="fragment">start with a <strong>letter</strong>, <strong>underscore</strong> ( <code>_</code> ), or <strong>dollar</strong> ( <code>$</code> )</li>
    <li class="fragment">following characters can be any of above, and/or <strong>digits (0-9)</strong></li>
    <li class="fragment">can&#39;t use reserved words / keywords</li>
  </ul>
</section>

<section>
  <h2 id="dont-do-this-but">Don&#39;t Do This, But&#8230;</h2>

  <p>BTW, <strong>Unicode characters are allowed in variable names!!!</strong> &#8594;</p>

  <!--_ -->
  <pre class="fragment"><code data-trim="" contenteditable="">
var ಠ_ಠ = "disapproval";
console.log(ಠ_ಠ);
// totally works (O_o !?)
</code></pre>

  <p class="fragment">Thanks <a href="http://stackoverflow.com/questions/1661197/valid-characters-for-javascript-variable-names/9337047#9337047">Stackoverflow</a>! Also, here&#39;s more <a href="http://knowyourmeme.com/memes/%E0%B2%A0_%E0%B2%A0-look-of-disapproval">about that look</a>.</p>

  <p class="fragment">Oh, and <a href="https://mothereff.in/js-variables">this is a site that let&#39;s you check if a variable name is valie or not.</a></p>

  <!--_ -->
</section>

<section>
  <h2 id="another-note-on-variables">Another Note on Variables</h2>

  <p>Because JavaScript is dynamically typed&#8230; <strong>variable reassignment, even of different types, is ok</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
var x = 25;
x = "foo";
</code></pre>

  <p class="fragment">Lastly, a quick aside&#8230;</p>

  <ul>
    <li class="fragment"><a href="http://en.wikipedia.org/wiki/Metasyntactic_variable">foo, bar, and baz are metasyntactic variables</a></li>
    <li class="fragment">apparently there are different metasyntactic variables for different natural languages!</li>
  </ul>
</section>

<section>
  <h2 id="definition-time">Definition Time</h2>

  <h3 id="what-time-is-it">(What time is it?)</h3>

  <p>From Speaking JavaScript:</p>

  <ul>
    <li>the <strong>environment</strong> is the collection of variables and their values that exist at a given time</li>
    <li>when a program starts up, <strong>this environment is not empty</strong></li>
    <li>it always <strong>contains variables that are part of the language standard</strong></li>
    <li>for example:
      <ul>
        <li>the <code>console</code> object is an available variable from the start of your program!</li>
        <li>same with <em>built-in</em> functions!</li>
      </ul>
    </li>
  </ul>
</section>

:ET