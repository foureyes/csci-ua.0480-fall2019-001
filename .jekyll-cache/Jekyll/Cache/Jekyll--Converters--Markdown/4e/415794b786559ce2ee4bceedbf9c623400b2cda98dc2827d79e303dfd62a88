I"ø4<div class="panel panel-default">
	<div class="panel-heading">Homework #7</div>
	<div class="panel-body">

    <h1 id="forest-simulator-client-side-javascript---due-1126-at-11pm">Forest Simulator (Client Side JavaScript) - <strong>Due 11/26 at 11pm</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>manipulating the DOM</li>
      <li>setting DOM element attributes</li>
      <li>handling events with addEventListener</li>
    </ul>

    <h3 id="description">Description</h3>

    <p>There&#39;s a twitter bot that just <a href="https://twitter.com/tiny_forests">tweets emoji forests</a>. As you can see, it basically just creates multiline strings using characters from some set of forest-related emoji. But it makes people happy, so what&#39;s the difference? ðŸ¤·</p>

    <p>A big part of poetry/art/fun with code is curation. You will be making an interface that creates forests similar to the one that this twitter bot generates by using pure clientside javascript where you can curate some parts of the forest, but also allow randomness to generate other parts. The interface will then compute the biodiversity of your forest in realtime using <a href="https://en.wikipedia.org/wiki/Diversity_index#Simpson_index">Simpson&#39;s index</a> so you can see how sickly your forest is as you are generating it.</p>

    <p><img src="../resources/img/hw07-forest-01-main.gif" /></p>

    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
    </ul>

    <h3 id="make-at-least-4-commits">Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 4 separate commits</li>
    </ul>

    <h2 id="forest-generator-requirements">Forest Generator Requirements</h2>

    <h3 id="required-features"><strong>Required Features</strong></h3>

    <p><strong>Use the following markup</strong></p>

    <ol>
      <li>Start a new express project that uses express-static.
        <ul>
          <li>the root directory should contain <code class="highlighter-rouge">package.json</code>, your eslint config, <code class="highlighter-rouge">.gitignore</code>, etc.</li>
          <li>the <code class="highlighter-rouge">src</code> directory should contain <code class="highlighter-rouge">app.js</code> (serving on 3000), <code class="highlighter-rouge">public</code>, etc.</li>
        </ul>
      </li>
      <li>(there&#39;s no need to create any route handlers for this homework, you can do the whole thing with static files)</li>
      <li>In your public folder, create an <code>index.html</code> file.</li>
      <li>Add the following code to your <code>index.html</code>:
        <pre><code data-trim="" contenteditable="">
     &lt;!doctype html&gt;
     &lt;html&gt;

     &lt;head&gt;
         &lt;title&gt;FOREST SIMULATOR&lt;/title&gt;
         &lt;script src="sim.js"&gt;&lt;/script&gt;
         &lt;link rel="stylesheet" href="base.css" type="text/css" media="screen" title="no title" charset="utf-8"&gt;
       &lt;link href="https://fonts.googleapis.com/css?family=Lato|Playfair+Display" rel="stylesheet" &gt;

     &lt;/head&gt;

     &lt;link href="https://fonts.googleapis.com/css?family=Lato|Playfair+Display" rel="stylesheet"&gt;


     &lt;body&gt;
         &lt;div id="content"&gt;
             &lt;h1&gt;FOREST SIMULATOR&lt;/h1&gt;
             &lt;div id="intro"&gt;
                 starting forest (leave empty to randomize):
                 &lt;br /&gt;
                 &lt;textarea id="inputForest" name="inputForest" cols="16" rows="8"&gt;&lt;/textarea&gt;
                 &lt;br /&gt;
                 &lt;button&gt;generate&lt;/button&gt;
             &lt;/div&gt;
             &lt;div id="sim" class="hidden"&gt;
             &lt;/div&gt;
             &lt;div id="pushtray" class="overlay"&gt;
             &lt;/div&gt;
         &lt;/div&gt;&lt;!--close id="content"--&gt;
     &lt;/body&gt;
     &lt;/html&gt;
 </code></pre>
      </li>
      <li><strong>You are not allowed to use any additional markup</strong>; you must generate any additional elements you&#39;ll need with JavaScript</li>
      <li>All of your JavaScript should go in your external JavaScript file.</li>
      <li>&#8230; and, of course, all of your CSS should go in your external CSS file.</li>
    </ol>

    <p><strong>Only show title screen and form on page load</strong></p>

    <ul>
      <li>Only show the content in the div with id <code>intro</code>
        <ul>
          <li>Make sure the overlay div and the sim div are not displayed</li>
          <li>Hint:
            <ul>
              <li>Make the appropriate CSS rules</li>
              <li>Use JavaScript&#39;s <code>someElementObj.classList</code>&#39;s <code>add</code>, <code>remove</code>, and <code>contains</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList">to <em>add and remove</em> classes</a> so that you can control which CSS rules are active</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>If the user clicks on the button, then start the sim (see next requirement for instructions)</li>
      <li>Here&#39;s what the interaction should look like (you won&#39;t have any real content on the <em>next</em> page yet, though):
  <br />
  <img src="../resources/img/hw07-forest-02-start.gif" />
  <br /></li>
    </ul>

    <p><strong>Pressing &quot;generate&quot; reveals the simulation screen and sets predefined forest lines</strong></p>

    <ul>
      <li>Use <code>addEventListener</code> to allow the button on the <em>title screen</em> to be pressed
        <ul>
          <li>It should lead to the next <em>screen</em>, which will be contained within the <code class="highlighter-rouge">div</code> with id, <code class="highlighter-rouge">sim</code></li>
          <li>Check out the <a href="../slides/19/events.html#/">slides on events</a></li>
          <li>Along with mdn&#39;s documentation on <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/Events/click">click</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded">DOMContentLoaded</a></li>
          <li>Remember, you&#39;ll need to put all of your DOM dependant JavaScript in a <code>DOMContentLoaded</code> listener</li>
          <li>And, of course, you&#39;ll need to add a <code>click</code> event listener for your button</li>
          <li><code>document.querySelector</code> will also be very useful - see the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">docs</a> or <a href="slides/19/js-css.html">slides</a>!</li>
          <li>Create and apply the appropriate classes to get rid of the <em>title screen</em> (do this with styles, there&#39;s no need to remove the element) and show the <em>sim screen</em></li>
        </ul>
      </li>
      <li>Note that there&#39;s a form field in the <em>title screen</em> &#8230;
        <ul>
          <li>This field will allow the player to manually set the emoji forest in the sim (it&#39;s kind of like cheating / playing Intelligent Creator, but it&#39;s really for making it easier to test)</li>
          <li>If the player enters a value in this field, then the forest  will be set to the sequence inputted</li>
          <li>The input should be a multiline string of forest emojis
            <ul>
              <li>(no commas, just a string with multiple lines of emoji)</li>
              <li>if it&#39;s useful, a string can be broken into an <code class="highlighter-rouge">Array</code> of characters using the spread operator: <code class="highlighter-rouge">[..."asdf"] // [ 'a', 's', 'd', 'f' ]</code>)</li>
              <li>
                <s>(if it's useful, a string can be broken into an `Array` of characters: `"asdf".split(''); // [ 'a', 's', 'd', 'f' ]`)</s>
              </li>
            </ul>
          </li>
          <li>No validation is required (assume that the user puts in valid input or no input)</li>
          <li>You can retrieve the user input from the text field by using the <code class="highlighter-rouge">value</code> property on the form element that contains the user input - <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea">see the mdn docs on value under HTML textarea Element</a></li>
          <li>If there&#39;s nothing in the field, then forest should be completely random</li>
          <li>To implement this behavior, see below &#8230;</li>
        </ul>
      </li>
      <li>Create a function or object that generates an 8x8 forest
        <ul>
          <li>You&#39;ll use this any time a new forest is needed</li>
          <li>Again, the emoji forest should initially be random &#8230;</li>
          <li>However, the function or object should be <em>configurable</em> so that it can draw emojis from the list of emojis entered</li>
          <li>(Use whatever mechanism you like to do this - perhaps storing the list in a closure or in a property in the function or constructor&#8230; or just a plain old global)</li>
          <li>the function should output an array of 8 strings, where each string is 8 emojis (or spaces) long</li>
        </ul>
      </li>
      <li>Here&#39;s an example of how it may work (again, the sim screen will be blank for now, but when it&#39;s implemented, it should function like this):
  <img src="../resources/img/hw07-forest-03-genagain.gif" />
  <br /></li>
    </ul>

    <p><strong>Generate DOM elements for the lines of forest, the biodiversity metric, and 3 buttons</strong></p>

    <ul>
      <li>Create DOM elements to show Simpson&#39;s Index
        <ul>
          <li>use this function
            <pre><code data-trim="" contenteditable="">const simpsonsIndex = forest =&gt;
  1 - Object.entries(
  [...forest.join("")].reduce(
      (counts, emoji) =&gt; ({...counts, [emoji]: (counts[emoji] || 0) + 1}),
      {}
  )
  ).reduce(([top, bottom], [species, count]) =&gt; [top + (count * (count - 1)), bottom + count], [0, 0])
  .reduce((sumLilN,bigN) =&gt; sumLilN / (bigN * (bigN - 1)))
</code></pre>
            <p>which takes one argument in the form of an array of emoji strings to output the Simpson&#39;s Index biodiversity estimate for the forest at hand</p>
          </li>
        </ul>
      </li>
      <li>Create DOM elements to show the 8 rows of forest
        <ul>
          <li>The elements should start off with no text</li>
          <li>Hint: you may find it helpful to create a containing element that holds all 8 lines of forest</li>
        </ul>
      </li>
      <li>Create a button, <code class="highlighter-rouge">generate</code></li>
      <li>The generated forest and buttons should look something like this:
  <br />
  <img src="../resources/img/hw07-forest-04-button.gif" /></li>
    </ul>

    <p><strong>Selecting rows to pin / save</strong></p>
    <ul>
      <li>add onclick handlers to all of the rows so that when clicked, it toggles between a <em>pinned</em> and <em>unpinned</em> state</li>
      <li>make sure that the state change is visually reflected somehow, such as with a change in background color (for just that row of the forest)</li>
    </ul>

    <p><strong>Pressing the generate button</strong></p>

    <ul>
      <li>Add an onclick handler to the generate button so that
        <ul>
          <li>it finds all of the rows that aren&#39;t pinned</li>
          <li>it replaces the contents of those rows with new randomized forest strings</li>
          <li>it recalculates and redisplays the Simpson&#39;s Index</li>
        </ul>
      </li>
      <li>Everything together should look like:
  <br />
  <img src="../resources/img/hw07-forest-05-pinned.gif" /></li>
    </ul>

    <p><strong>Omnious alerts</strong></p>

    <p>Let&#39;s implement push-_like_ notifications for when the biodiversity index drops below 0.7. Or more specifically</p>
    <ol>
      <li>when <code class="highlighter-rouge">generate</code> is clicked and calculates a new index, the index should be checked to see if it is higher than 0.7</li>
      <li>if not, add another div to the #pushtray element</li>
    </ol>

    <ul>
      <li>implement this using plain CSS and/or JavaScript (no JQuery or bootstrap)</li>
      <li>Hint: the overlay should be <code>position:fixed</code> and forced to the right side of the screen</li>
      <li>Hint: the overlay&#39;s <code>z-index</code> should be a high number (100?) so that it appears <em>on top</em> of everything else</li>
    </ul>

    <p><img src="../resources/img/hw07-forest-06-alerts.gif" /></p>

    <h3 id="optional-features-extra-credit">Optional Features (Extra Credit)</h3>

    <p>Implement any of the following features</p>

    <p>(10 points) <strong>Restart Sim</strong></p>

    <ul>
      <li>add a restart button along the bottom of the sim</li>
      <li>the restart button makes the original form show up, and essentially starts from the beginning without refreshing the page</li>
    </ul>

    <p>(15 points) <strong>Pin Single Cells</strong></p>

    <ul>
      <li>Pin single emoji instead of entire row</li>
    </ul>
  </div>
</div>

:ET