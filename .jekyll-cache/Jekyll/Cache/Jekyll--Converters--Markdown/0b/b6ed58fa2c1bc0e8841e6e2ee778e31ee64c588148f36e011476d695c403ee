I"_&<style>
.warning {
    background-color: #ffaabb;
}
</style>

<div class="panel panel-default">
  <div class="panel-heading">Homework #8</div>
  <div class="panel-body">

    <h1 id="ajax---due-tuesday-november-28th-by-11pm">AJAX - <strong>Due Tuesday, November 28th by 11pm</strong></h1>

    <h2 id="first--fix-or-download-the-code"><span class="warning">First &#8230; Fix or Download the Code!</span></h2>

    <p>Not all repositories had starter code pushed, and the ones that did had an error. <strong>Before starting your work&#8230;</strong> you have to do one of two things:</p>

    <ol>
      <li>if you don&#39;t have the code, download the starter version (that already contains the correction outlined below) here:
        <ul>
          <li><a href="/csci-ua.0480-fall2017-007/homework/homework08-starter-restaurants.zip">homework08-starter-restaurants.zip</a></li>
        </ul>
      </li>
      <li>however, if you already have code in your repository, please make the following correction:
        <ul>
          <li>in <code class="highlighter-rouge">app.js</code></li>
          <li>move the line <code class="highlighter-rouge">app.use(express.urlencoded({extended: false}));</code></li>
          <li>so that it&#39;s before <code class="highlighter-rouge">const placesRoutes = require('./routes/places');</code></li>
          <li>see @491 on piazza for original student post</li>
        </ul>
      </li>
    </ol>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>XMLHttpRequest</li>
      <li>sending back json from Express</li>
      <li>Express <code class="highlighter-rouge">Router</code></li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Creat a &quot;single page application&quot; that allows users to filter restaurants from a list and add new ones. The application will use AJAX POSTs and GETs instead of regular form submissions.</p>

    <p>You will:</p>

    <ol>
      <li>Consolidate the forms for filtering restaurants and adding restaurants so that they appear on the same page</li>
      <li>Add routes to create an API for retrieving restaurants and adding new ones</li>
      <li>Use JavaScript to trigger background requests to the API from the form submit buttons</li>
    </ol>

    <p>Use the following resources as reference:</p>

    <ol>
      <li><a href="../slides/20/ajax.html">Slides on AJAX Part 1</a></li>
      <li><a href="../slides/21/ajax-express.html">Slides on AJAX Part 2</a></li>
      <li><a href="../slides/21/ajax-express.html#/47">AJAX POST (from Part 2)</a></li>
    </ol>

    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
      <li>Commits later than that date will be handled on a case-by-case basis.</li>
    </ul>

    <h3 id="make-at-least-3-commits">Make at Least 3 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 3 separate commits</li>
    </ul>

    <h3 id="code-structure">Code Structure:</h3>

    <p><strong>You should first create an express application that will be served on port 3000</strong></p>

    <p>The structure of your directory should eventually look like this</p>

    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>single-page-app
    /node_modules
    package.json        
    .gitignore
    /public
        index.html      // the 'single' page in your single page web app
        /javascripts
            main.js     // write your client side JavaScript here
        /stylesheets
            style.css   
    /routes
        places.js       // the routes file that will contain all of your route handlers
    app.js
</code></pre></div>    </div>

    <ul>
      <li><strong>app.js</strong>:  this is where the express app is initialized</li>
      <li><strong>/routes/places.js</strong>: this is where all your API routes to fetch and create restaurants should exist (this will need to be &quot;used&quot; in the <strong>app.js</strong> file)</li>
    </ul>

    <p>Note that this will be implemented <strong>as a single page web app</strong>. This means that to implement these features:</p>

    <ol>
      <li><strong>create routes that send back JSON</strong> (essentially create an API)</li>
      <li>utilize the API by writing client side JavaScript that:
        <ul>
          <li>constructs a url by retrieving the values of form elements</li>
          <li>requests data from url constructed in the background (AJAX)</li>
          <li>parses the result of the background request</li>
          <li>modifies the DOM appropriately</li>
        </ul>
      </li>
    </ol>

    <h3 id="fetching-and-filtering">Fetching and Filtering:</h3>

    <ol>
      <li>Create a route <code class="highlighter-rouge">GET /places</code> which returns all the restaurants existing in your database
        <ol>
          <li>This route should support query string parameters which give the user the ability to specify the <code class="highlighter-rouge">location</code>, <code class="highlighter-rouge">cuisine</code>, or both.</li>
          <li>It should return a JSON object. For example, <code class="highlighter-rouge">GET /places?location=West%20Village&amp;cuisine=Turkish</code>
could return:
            <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[
  {
 "name":"Istanbul Grill",
 "cuisine":"Turkish",
 "location":"West Village"
  }
]
</code></pre></div>            </div>
          </li>
          <li>Note that there could be more than one restaurant in the resulting json.</li>
          <li>To test, enter the url <code class="highlighter-rouge">http://localhost:3000/places</code> in your browser; you should get JSON back</li>
        </ol>
      </li>
      <li>Using JavaScript in <code class="highlighter-rouge">main.js</code>, modify the form so that when the button is pressed:
        <ol>
          <li>the regular form button press event isn&#39;t triggered (use <code class="highlighter-rouge">preventDefault</code>)</li>
          <li>instead, the values in the filter form field are retrieved from their elements and are used to construct the url to be requested (use the <code class="highlighter-rouge">.value</code> property of the form element)</li>
          <li>a background request is made to the url using <code class="highlighter-rouge">XMLHttpRequest</code></li>
          <li>when the JSON is returned, it should be parsed into a list of objects representing restaurants</li>
          <li>use those restaurant objects to replace the contents of the list of restaurants on the page</li>
          <li>filtering with a blank field gives back all restaurants</li>
        </ol>
      </li>
    </ol>

    <p>Putting everything together, this should look like (note that the network tab is open to show that pressing the button will show background requests being triggered):</p>

    <p><img src="/csci-ua.0480-fall2017-007/resources/img/hw08-rest-filter.gif" alt="ajax add" /></p>

    <h3 id="adding-new-restaurants">Adding New Restaurants</h3>

    <ol>
      <li>You will need to create another route <code class="highlighter-rouge">POST /places</code> which will create a new restaurant based on the request&#39;s body
        <ul>
          <li>it should give back a JSON object as the response</li>
          <li>it should send back the object inserted, if successful</li>
          <li>otherwise, send back an object with a key called error&#8230; with a value containing an error message</li>
        </ul>
      </li>
      <li>The normal behavior of forms will need to be modified so that when the add button is pressed:
        <ul>
          <li>the regular form button press event isn&#39;t triggered (use <code class="highlighter-rouge">preventDefault</code>)</li>
          <li>&#8230; and instead, the values in the add form are retrieved</li>
          <li>a background request is made to the url
            <ul>
              <li>remember to set content type: <code class="highlighter-rouge">req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");</code></li>
              <li>in <code>res.send</code>, make sure to add the form data as name value pairs: <code>"name1=value1&amp;name2=value2&amp;nameN=valueN"</code></li>
            </ul>
          </li>
          <li>when a response is retrieved, repopulate the table so that the new restaurant is added</li>
          <li><strong>if there was a filter set before adding, then clear the filter to show all restaurants, including the newly added one</strong></li>
        </ul>
      </li>
    </ol>

    <p>For example (again, noting the requests in the network tab):</p>

    <p><img src="/csci-ua.0480-fall2017-007/resources/img/hw08-rest-add.gif" alt="ajax add" /></p>

    <h3 id="points-validations-extra-credit">(5 points) Validations! (Extra credit)</h3>

    <p>Implement the following validation on the server:</p>

    <ul>
      <li>Form Validation: Users should not be able to post requests for adding restaurants if any of the form fields are empty</li>
      <li>Duplicate check: Users should not be able to save duplicated entries to the database</li>
    </ul>

    <p>Do this by:</p>

    <ul>
      <li>Writing constraints in the schema or checking the data sent manually in the route handler</li>
      <li>Sending back validation errors back through JSON</li>
      <li>Displaying the errors in the DOM using JavaScript</li>
    </ul>

  </div>

</div>

:ET