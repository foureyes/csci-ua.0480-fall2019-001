I"º0<section class="intro-slide">
  <h1 id="objects">Objects</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="topics">Topics</h2>

  <ul>
    <li>Objects, Object Creation</li>
    <li>Properties</li>
    <li>Methods</li>
    <li>String Methods</li>
    <li>Array Methods</li>
    <li>Math Methods</li>
    <li>Modifying and Deleting Properties</li>
    <li>Detecting Properties</li>
    <li>Looping Over Objects</li>
  </ul>
</section>

<section>
  <h2 id="types-so-far">Types So Far</h2>

  <p><strong>What are the six types that we&#39;ve learned so far?</strong> &#8594;</p>

  <p class="fragment">(sort of in order of how we&#39;ve seen them)&#8230;</p>

  <ul>
    <li class="fragment"><code>number</code></li>
    <li class="fragment"><code>string</code></li>
    <li class="fragment"><code>boolean</code></li>
    <li class="fragment"><code>undefined</code></li>
    <li class="fragment"><code>function</code></li>
    <li class="fragment"><code>object</code></li>
  </ul>
</section>

<section>
  <h2 id="the-one-we-havent-talked-about-">The One We Haven&#39;t Talked About &#8230;</h2>

  <p>We&#39;ve explored <code>numbers</code>, <code>strings</code>, <code>booleans</code>, <code>undefined</code> and <code>functions</code> a bit, but we haven&#39;t really talked about <strong>objects</strong> yet.</p>

  <div class="fragment">
    <p><strong>Objects</strong> are essentially:</p>

    <ul>
      <li>an &quot;arbitrary collections of properties&quot;</li>
      <li>&#8230;and their associated values</li>
      <li>these properties can be added, removed and modified</li>
    </ul>

    <p><br />
<strong>Can anyone think of analogous types in other languages?</strong> &#8594;</p>

    <ul class="fragment">
      <li><strong>HashMaps</strong> in Java</li>
      <li><strong>associative arrays</strong> in PHP</li>
      <li><strong>dictionaries</strong> in Python</li>
      <li><strong>Hashes</strong> in Ruby</li>
    </ul>

  </div>
</section>

<section>
  <h2 id="creating-objects">Creating Objects</h2>

  <p>Here&#39;s an example of an object (scroll over to see the whole thing):</p>

  <pre><code data-trim="" contenteditable="">
var course = {name:'Applied Internet Technology', section:2, undergraduate:true};
</code></pre>

  <p><strong>Object literals</strong> consist of:</p>

  <ul>
    <li>surrounding curly braces - <code>{}</code>
      <ul>
        <li>an empty object is just <code>{}</code></li>
      </ul>
    </li>
    <li>property/value pairs separated by commas - <code>,</code></li>
    <li>properties and values separated from each other with a colon - <code>:</code>
      <ul>
        <li><strong>properties that aren&#39;t valid variables names or valid numbers must be quoted</strong></li>
        <li>for example: <code>{"still a property name":true}</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="object-literals-continued">Object Literals Continued&#8230;</h2>

  <h3 id="ah-thats-better">Ah, that&#39;s better.</h3>

  <p><strong>Internal white space and newlines won&#39;t cause any syntax issues.</strong> &#8594;</p>

  <ul>
    <li>you could use them for formatting</li>
    <li>indentation also helps with readability</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
var course = {
    name:'Applied Internet Technology',
    section:2,
    undergraduate:true
};
</code></pre>
</section>

<section>
  <h2 id="properties">Properties</h2>

  <ul>
    <li><strong>properties can be any value</strong>, including numbers, strings, and booleans</li>
    <li>they can also contain other objects&#8230; <strong>even functions</strong></li>
    <li>a <strong>method</strong> is a <strong>property that contains a function</strong></li>
    <li><strong>almost all JavaScript values have properties</strong>
      <ul>
        <li>the only exceptions are <code>null</code> and <code>undefined</code></li>
        <li>strings, numbers and booleans <em>act like they have properties</em></li>
      </ul>
    </li>
    <li>which implies that <strong>almost everything in JavaScript is an object</strong> (or again, <em>acts like</em> an object for some values)!</li>
  </ul>
</section>

<section>
  <h2 id="accessing-properties">Accessing Properties</h2>

  <p>Sooo&#8230; how do we access properties? Using our previous object:</p>

  <pre><code data-trim="" contenteditable="">
var course = {
    name:'Applied Internet Technology',
    section:2,
    undergraduate:true
};
</code></pre>

  <p>There are two ways to access properties:</p>

  <ul>
    <li>the <strong>dot operator</strong></li>
  </ul>
  <pre class="fragment"><code data-trim="" contenteditable="">
// gives us 2
console.log(course.section);
</code></pre>
  <ul>
    <li><strong>square brackets</strong></li>
  </ul>
  <pre class="fragment"><code data-trim="" contenteditable="">
// gives us 2
console.log(course["section"]);
</code></pre>
</section>

<section>
  <h2 id="accessing-properties-continued">Accessing Properties Continued</h2>

  <p><strong>What&#39;s the difference between the two ways of accessing properties?</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
course.section;
course["section"];
</code></pre>

  <ul>
    <li>when using <strong>dot</strong>, the part after the <strong>dot</strong> directly names the property
      <ul>
        <li>the property name must adhere to the rules of valid variables names.<br />
  (<strong>what were they again?</strong> &#8594;)</li>
        <li class="fragment">start with a <strong>letter</strong>, <strong>underscore</strong> ( <code>_</code> ), or <strong>dollar</strong> ( <code>$</code> ) <!--_ --></li>
        <li class="fragment">following characters can be any of above, and/or <strong>digits (0-9)</strong></li>
      </ul>
    </li>
    <li>when using <strong>square brackets</strong>, the part within the brackets is evaluated and is used as the property name
      <ul>
        <li>this allows for <em>dynamically</em> created property names</li>
        <li>also allows property names that are not valid variable names <code>obj["I'm ok"] = true</code> (oof, maybe avoid that))</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="hey-wait">Hey Wait&#8230;</h2>

  <p>Let&#39;s see some examples of these <em>so called</em> properties (and methods) on some values that we&#39;ve already seen. <strong>Can you recall any?</strong> &#8594;</p>

  <ul>
    <li class="fragment">length is a property of both Strings and Arrays</li>
  </ul>
  <pre class="fragment"><code data-trim="" contenteditable="">
var exclamation = 'wow!',
    listOfExclamations = ['golly!', 'gosh!'];
console.log(exclamation.length, listOfExclamations.length)
</code></pre>
  <ul>
    <li class="fragment">log is a method of the built-in, global <strong>console</strong> object</li>
  </ul>
  <pre class="fragment"><code data-trim="" contenteditable="">
console.log("here's one!")
</code></pre>
</section>

<section>
  <h2 id="these-methods-you-talk-about-sound-intriguing">These Methods You Talk About Sound Intriguing</h2>

  <h3 id="lets-take-a-look-at-some-more-methods">Let&#39;s take a look at some more methods!</h3>

  <ul>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String#Methods_2">Strings have a bunch</a></li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#Methods_of_array_instances">Arrays do too</a></li>
    <li>We&#39;ll take a closer look at these when we go over strings and Arrays in the next set of slides</li>
  </ul>
</section>

<section>
  <h2 id="math">Math!</h2>

  <p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects">There are a bunch of built-in objects that are available globally</a>. We&#39;ve already seen some&#8230; like the <code>console</code> object or the <code>isNan()</code> and <code>parseInt</code> functions.</p>

  <p>There&#39;s also the built-in <code>Math</code> object. It provides a bunch of miscellaneous <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math#Methods">number crunching methods</a>&#8230;</p>

  <ul>
    <li>the usual trig functions like <strong>sin</strong>, <strong>cos</strong>, etc.</li>
    <li>of course, <strong>ceil</strong> and <strong>floor</strong> (don&#39;t know? <strong>let&#39;s try</strong> &#8594;) to round up or down</li>
    <li>&#8230;and the related <strong>round</strong></li>
    <li><strong>random</strong> - returns a random number between 0 and 1</li>
  </ul>
</section>

<section>
  <h2 id="reading-modifying-and-deleting">Reading, Modifying and Deleting</h2>

  <ul>
    <li>if the property doesn&#39;t exist, we&#39;ll get back <code>undefined</code>:</li>
  </ul>
  <pre><code data-trim="" contenteditable="">
// &rarr; gives us undefined
console.log(course.nothingToSeeHere);
</code></pre>
  <ul>
    <li>you can assign values to properties by using the <strong><code>=</code> operator</strong>:</li>
  </ul>
  <pre><code data-trim="" contenteditable="">
course.nothingToSeeHere = 'maybe something';
console.log(course.nothingToSeeHere);
</code></pre>
  <ul>
    <li>you can remove properties by using the <strong>delete operator</strong>:</li>
  </ul>
  <pre><code data-trim="" contenteditable="">
delete course.nothingToSeeHere;
console.log(course.nothingToSeeHere);
</code></pre>

</section>

<section>
  <h2 id="detecting-properties">Detecting Properties</h2>

  <p>Note that if a property doesn&#39;t exist, reading that property yields <code>undefined</code>.</p>

  <p><strong>Why might this be confusing?</strong> &#8594;</p>

  <p class="fragment">How can we distinguish between a property that actually exists, but is intentionally <code>undefined</code> versus a property that doesn&#39;t actually exist?</p>

</section>

<section>
  <h2 id="detecting-properties-continued">Detecting Properties Continued</h2>

  <p>There are two ways to determine if a property actually exists (rather than being undefined by default). Using the previously defined <code>course</code> object:</p>

  <p><strong>hasOwnProperty</strong> - method on all objects that tests if argument is property of object that hasOwnProperty is called on</p>

  <pre><code data-trim="" contenteditable="">
// true
course.hasOwnProperty('name');

// false
course.hasOwnProperty('oh no, not here');
</code></pre>

  <p><strong>in</strong> - an operator that tests if left operand (a string or number) is property of object in right operand&#8230; picks up &quot;inherited&quot; properties</p>

  <pre><code data-trim="" contenteditable="">
// true
'name' in course;

// false
'oh no, not here' in course;
</code></pre>

  <p><strong>Use hasOwnProperty for now&#8230; so you won&#39;t have to worry about &quot;inherited&quot; properties.</strong></p>
</section>

<section>
  <h2 id="looping-over-properties">Looping Over Properties</h2>

  <p>Use a <code>for (prop in obj)</code> loop:</p>

  <ul>
    <li>make sure that you use <strong>hasOwnProperty</strong> in loop to exclude <em>inherited</em> properties</li>
    <li>don&#39;t use this kind of loop for <code>Arrays</code>
      <ul>
        <li>does not preserve order</li>
        <li>includes <em>inherited</em> properties</li>
      </ul>
    </li>
  </ul>
  <pre><code data-trim="" contenteditable="">
for (property in course) {
	if (course.hasOwnProperty(property)) {
		console.log(property +  " is " + course[property]);
	}
}
</code></pre>
</section>
<section>
  <h2 id="some-behind-the-scenes">Some Behind the Scenes</h2>

  <p>In reality, though, <code>strings</code>, <code>numbers</code> and <code>booleans</code> aren&#39;t objects; they&#39;re <strong>primitives</strong> (you know, kind of like Java).</p>

  <p>However, as soon as you perform an <em>object-like</em> operation on them, such as a method call:</p>

  <ul>
    <li><strong>JavaScript creates an actual String, Number or Boolean object that wraps that primitive&#8230;</strong></li>
    <li>and throws it away immediately, once the operations is done</li>
    <li>this does mean, however, that __you can&#39;t create arbitrary properties on primitives</li>
  </ul>

  <p><br /></p>

  <p><a href="http://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/">See this article on the <em>secret</em> life of JavaScript primitives!</a></p>
</section>

:ET