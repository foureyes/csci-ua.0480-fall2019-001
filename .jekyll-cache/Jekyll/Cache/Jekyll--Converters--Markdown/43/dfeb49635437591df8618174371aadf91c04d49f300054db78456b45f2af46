I"™<section class="intro-slide">
  <h1 id="control-structures">Control Structures</h1>

  <h3 id="csci-ua0480">CSCI-UA.0480</h3>

</section>

<section>
  <h2 id="control-structures-1">Control Structures</h2>

  <ul>
    <li>as you might expect, JavaScript programs are generally executed line-by-line from top to bottom</li>
    <li><strong>but there are ways to <em>control</em> that flow of execution (<em>of course</em>)!</strong> &#8594;
      <ul>
        <li class="fragment">conditionals</li>
        <li class="fragment">repetition</li>
        <li class="fragment">creating a function (to jump to the code in the function definition)</li>
        <li class="fragment">(we&#39;ll see others as well)</li>
      </ul>
    </li>
  </ul>

</section>

<section>
  <h2 id="conditionals-and-loops">Conditionals and Loops</h2>

  <p><strong>This stuff should look really familiar</strong> &#8230;</p>

  <ul>
    <li>we&#39;ll go through the following material quickly because&#8230;</li>
    <li>you know all of these concepts already</li>
    <li>and it looks a lot like Java/C/C++</li>
  </ul>
</section>

<section>
  <h2 id="again-with-the-definitions">Again With the Definitions</h2>

  <ul>
    <li><strong>boolean expression</strong> - an expression that results in a boolean value
      <ul>
        <li><code>423 === 423</code> &#8594;
          <ul>
            <li>JavaScript &#10084;s coercing values for you; a value will be coaxed into boolean when the need arises</li>
          </ul>
        </li>
        <li><code>!!5</code> &#8594;
          <ul>
            <li>logical not, logical not, number 5 &#8230; <code>Â¯\_(ãƒ„)_/Â¯</code></li>
          </ul>
        </li>
      </ul>
    </li>
    <li><strong>block</strong> - a sequence of grouped statements bound by curly braces - <code>{</code>&#39;s and <code>}</code>&#39;s</li>
    <li><strong>iteration</strong> - repeated execution of a set of programming statements</li>
    <li><strong>loop</strong> - the construct that allows allows us to repeatedly execute a statement or a group of statements until a terminating condition is satisfied</li>
  </ul>
</section>

<section>
  <h2 id="if-and-else">If and Else</h2>

  <p>Conditionally execute a <strong>block</strong> of code (should look <em>familiar</em>):</p>

  <ul>
    <li><strong>keyword</strong> <code>if</code> followed by a <strong>boolean expression</strong> enclosed in parentheses</li>
    <li><strong>block</strong> of code to be executed if expression is true</li>
    <li>optional additional <code>else if</code>&#39;s to chain conditionals, with corresponding <strong>block</strong> of code to execute</li>
    <li>optional <code>else</code>, with corresponding <strong>block</strong> of code to execute</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
if (some_boolean_expression) {
	// do stuff here if expression is true
}

if (some_boolean_expression) {
	// do stuff 
} else if (another_boolean_expression) {
	// do other stuff
} else {
	// do other other stuff
}
</code></pre>

</section>

<section>
  <h2 id="a-for-loop">A For Loop</h2>

  <p>Again, should look familiar&#8230; repeatedly execute a <strong>block</strong> of code:</p>

  <pre><code data-trim="" contenteditable="">
//    initialization
//    |        condition
//    |        |       afterthought/increment
//    |        |       |
for(let i = 0; i &lt;= 5; i = i + 1) {
	console.log(i);
}

// (i++ works too, of course)
</code></pre>

  <p>Speaking JavaScript calls the three parts: initialization, check and update.</p>

  <p class="fragment"><strong>Hey - notice that <code>let</code> in front of the loop variable declaration?  Do that.</strong></p>
</section>

<section>
  <h2 id="a-while-loop">A While Loop</h2>

  <p>Conditionally repeat a <strong>block</strong> of code:</p>
  <pre><code data-trim="" contenteditable="">
while (boolean_expression) {
	// repeat this stuff as long as boolean expression is true
}
</code></pre>
  <p><br /></p>

  <p>Conditionally repeat a <strong>block</strong> of code <strong>and</strong> ensure that code is executed at least once:</p>
  <pre><code data-trim="" contenteditable="">
do {
	// repeat this stuff at least once
} while (boolean_expression)
</code></pre>
</section>

<section>
  <h2 id="break-and-continue">Break and Continue</h2>

  <p>The <strong>keyword</strong> <code>break</code> immediately stops the execution of a loop:</p>

  <pre><code data-trim="" contenteditable="">
for (let num = 1; num &lt; 30; num++) { 
	if (num % 7 == 0 &amp;&amp; num % 3 == 0)
		break; 
	console.log(num);
}
</code></pre>

  <p>The <strong>keyword</strong> <code>continue</code> stops the current iteration and immediately skips to the next one:</p>
  <pre><code data-trim="" contenteditable="">
for(let num = 1; num &lt; 30; num++) { 
	if (num % 7 == 0 &amp;&amp; num % 3 == 0)
		continue; 
	console.log(num);
}
</code></pre>

  <p><strong>What is the output of the above programs?</strong> &#8594;</p>

  <p><span class="fragment"><strong>1 through 20</strong> and <strong>1 through 29 skipping 21</strong> respectively</span></p>
</section>

<section>
  <h2 id="switch-case">Switch-Case</h2>

  <p>Execute code based on value of switch.</p>

  <pre><code data-trim="" contenteditable="">
var day = "thu";
switch (day) { 
	case "fri":
		console.log("Friday");
		break;
	case "thu":
		console.log("Thursday");
		break;
	case "wed":
		console.log("Wednesday");
		break;
}
</code></pre>

  <p><strong>What is the output of the above programs?</strong> &#8594;</p>

  <p><span class="fragment">Thursday</span></p>

</section>

<section>
  <h2 id="lastly-a-preview-of-functions">Lastly, a Preview of Functions</h2>

  <p>One way to define a function in JavaScript is to create a variable, and set it equal to a function:</p>

  <pre><code data-trim="" contenteditable="">
var f = function(x) {
	return x
}

</code></pre>
</section>

<section>
  <h2 id="some-quick-exercises">Some Quick Exercises</h2>

  <h3 id="some-silly-practice-programs-to-get-you-warmed-up">Some silly practice programs to get you warmed up</h3>
</section>

<section>
  <h2 id="fizzbuzz">FizzBuzz</h2>

  <p><strong>From Eloquent JavaScript</strong>:</p>

  <ul>
    <li>write a program that uses console.log to print all the numbers from 1 to 100</li>
    <li>for numbers divisible by 3, print &quot;Fizz&quot; instead of the number</li>
    <li>for numbers divisible by 5 (and not 3), print &quot;Buzz&quot; instead</li>
    <li>for numbers divisible by <strong>both</strong> 3 and 5, print &quot;FizzBuzz&quot; instead</li>
  </ul>
</section>

<!--
<section markdown="block">
## Max Number

* write a function that takes one parameter, an array - assume that it will only have 0 or more numbers
* the function should return the largest number in the array
</section>
-->

:ET