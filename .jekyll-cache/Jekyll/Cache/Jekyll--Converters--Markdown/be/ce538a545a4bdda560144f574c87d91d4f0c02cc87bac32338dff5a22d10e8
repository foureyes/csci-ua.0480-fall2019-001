I"+,<section class="intro-slide">
  <h1 id="styling-and-layout">Styling and Layout</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="hm-so-many-elements">Hm. So Many Elements.</h2>

  <p><strong>There are a ton of HTML elements that we can use.</strong></p>

  <p><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5/HTML5_element_list">Check out the list of valid HTML5 elements on MDN</a></p>

  <p>Whew! <strong>How do we know which element we should use for a mark-up? How do we choose? (easy for headers, images links, etc&#8230; but other content?)</strong> &#8594;</p>

  <p class="fragment">Use the one that describes / represents the content best.</p>

  <ul class="fragment">
    <li>if a tag doesn&#39;t exist that describes your content, you&#39;ll often see a generic container element, like <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div">div</a></li>
    <li>(a div doesn&#39;t inherently represent anything)</li>
    <li>but, with so many tags, it should be easy to find one that&#39;s appropriate (there are a bunch of new ones)
      <ul>
        <li>if your element contains navigation elements, use <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/nav">nav</a></li>
        <li>if it&#39;s your header or footer, use <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/header">header</a> or <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/footer">footer</a>
  *etc.</li>
      </ul>
    </li>
  </ul>
</section>

<section data-background="#440000">
  <h2 id="remember-mark-up-is-for-structure-and-meaning-not-style">Remember, Mark-up is for structure and meaning, not style</h2>
</section>

<section>
  <h2 id="css">CSS</h2>

  <p><strong>We use Cascading Style Sheets</strong> to style our pages.</p>

  <ul>
    <li>CSS is a stylesheet language</li>
    <li>used to describe the presentation and layout of an HTML document</li>
    <li>for the next few slides, I&#39;m assuming some very <em>basic</em> knowledge of CSS</li>
  </ul>
</section>

<section>
  <h2 id="definitions">Definitions</h2>

  <p><strong>Name the parts of this code:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
h3 {
	font-size: 2em;
	color: #ff0000;
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
this whole thing is a rule...

selector
|   property    value 
|      |        |		    
h3 {
	font-size: 2em; ---+
	                   |---- declaration block
	color: #ff0000; ---+
	|_____________|
          |
		  declaration
}

</code></pre>

</section>

<section>
  <h2 id="definitions-1">Definitions</h2>

  <p>Just to get some terminology straight. <strong>When talking about CSS.</strong> &#8594;</p>

  <ul>
    <li><strong>rule</strong> - the selector and all of its accompanying property:value pairs</li>
    <li><strong>selector</strong> - specifies an element(s) within the markup where styles will be applied</li>
    <li><strong>property</strong> - the name of a particular style</li>
    <li><strong>value</strong> - the <em>actual</em> style being applied on the property</li>
    <li><strong>declaration</strong> - the property and its value - for example: <code>color:red;</code></li>
    <li><strong>declaration block</strong> - the curly braces and all of the declarations within them
      <ul>
        <li>there can be multiple <strong>declarations</strong> in each <strong>declaration block</strong>, separated by semicolons (<code>;</code>&#39;s)</li>
        <li>(<em>technically</em>, you can leave off the semicolon of the last declaration, but that&#39;s considered bad practice &#8211; potentially leads to errors when you add another declaration)</li>
      </ul>
    </li>
  </ul>

</section>

<section>
  <h2 id="but-wait">But Wait!!</h2>

  <p><strong>Do you see any difference in how elements are laid out, even if we haven&#39;t explicitly applied styles?</strong> &#8594;</p>

  <p>Take for example&#8230; a paragraph (a <code>p</code> tag) and an anchor (a link, and <code>a</code> tag)</p>

  <ul class="fragment">
    <li>paragraphs seem to go on separate lines</li>
    <li>while anchor links stay on the same line</li>
  </ul>
</section>

<section>
  <h2 id="the-display-property">The Display Property</h2>

  <p>In CSS, the <code>display</code> property determines how elements are laid out.</p>

  <ul>
    <li>every element has a default display value</li>
    <li>the default for most elements are either <code>block</code> or <code>inline</code>, but there are actually 4 possible values:
      <ul>
        <li><code>block</code></li>
        <li><code>inline</code></li>
        <li><code>none</code></li>
        <li><code>inline-block</code></li>
      </ul>
    </li>
  </ul>

  <p><br />
 (Well, and <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/display">a bunch of others</a>)</p>
</section>

<section>
  <h2 id="block-level-elements">Block-Level Elements</h2>

  <p><strong>block-level elements</strong> - start on a new line and stretch out horizontally as far as they can; have a height and width</p>

  <p><strong>What are some common block-level elements?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>div</code> - standard and generic block level element (again, doesn&#39;t inherently represent any type of content)</li>
    <li><code>p</code> - paragraph</li>
    <li><code>h1</code> - header</li>
    <li>etc.</li>
    <li><strong>Let&#39;s see this in action.</strong> &#8594;</li>
  </ul>
</section>

<section>
  <h2 id="inline-elements">Inline Elements</h2>

  <p><strong>inline elements</strong> - stay on the same line (do not start a new line); do not have height and width</p>

  <p><strong>What are some common inline elements?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>span</code> - standard and generic inline element</li>
    <li><code>a</code> - anchor (link)</li>
    <li><code>em</code> - emphasis</li>
    <li>etc.</li>
    <li><strong>Let&#39;s see these in action.</strong> &#8594;</li>
  </ul>
</section>

<section>
  <h2 id="none">None</h2>

  <p>An element with a display value of <strong>none</strong>:</p>

  <ul>
    <li>will not appear on the page</li>
    <li>the remainder of the page will be rendered as if the element did not exist</li>
    <li>often used to toggle element on/off page (different from visibility property, though!)</li>
  </ul>

  <p><br />
<strong>What are some common elements that are <em>not</em> displayed?</strong> &#8594;</p>

  <ul class="fragment">
    <li><code>script</code></li>
    <li><code>style</code></li>
    <li><code>title</code></li>
  </ul>
</section>

<section>
  <h2 id="inline-block">Inline-block</h2>

  <p>Wait, what? An <strong>inline-block</strong> element is an element that has a width and height (a box), but flows with surrounding content inline (no new line).</p>

  <ul>
    <li>this is useful if you want elements on the same line that have an actual height and width!</li>
    <li>for example, a grid of elements (if you&#39;re not using floats or a table)</li>
  </ul>
</section>

<section>
  <h2 id="a-quick-example">A Quick Example</h2>

  <p><strong>On our sample page, try making the div with id=&quot;content&quot; inline&#8230; and none:</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
#content {
	display: inline;
}
</code></pre>

  <pre><code data-trim="" contenteditable="">
#content {
	display: none;
}
</code></pre>
</section>

<section>
  <h2 id="more-about-block-level-elements">More About Block Level Elements</h2>

  <ul>
    <li>setting the width on a block level element prevents it from stretching out horizontally</li>
    <li>use <code>max-width</code> if you don&#39;t want scrollbars when you resize to small window or have smaller resolution device</li>
    <li>a block-level element can be centered by specifying a width and setting a margin to auto</li>
  </ul>

  <p><br />
<strong>Let&#39;s try it out on our sample page&#8230;</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
#content {
	border: 1px solid #000;
	max-width: 500px;
	margin:auto;
}
</code></pre>
</section>

<section>
  <h2 id="visibility">Visibility</h2>

  <p>As mentioned above, there&#39;s another CSS property that can hide and show elements.</p>

  <p><strong>visibility</strong> - can hide an element but leave space where it should have appeared</p>

  <p><strong>Let&#39;s see what this looks like on our sample page.</strong></p>

  <pre><code data-trim="" contenteditable="">
#content {
	visibility: none;
}
</code></pre>

</section>

<section>
  <h2 id="position">Position</h2>

  <p>After display, the next most important property for layout is <strong>position</strong>.</p>

  <p>An element&#39;s position can be:</p>

  <ul>
    <li>static</li>
    <li>relative</li>
    <li>absolute</li>
    <li>fixed</li>
  </ul>

  <p><br />
We&#39;ll take a look at the first two&#8230;</p>

</section>

<section>
  <h2 id="static">Static</h2>

  <p><strong>static</strong> is the default position value</p>

  <ul>
    <li>not <em>positioned</em> in any special way</li>
    <li>element with <code>position: static</code> is also called (no surprise here) <strong>not positioned</strong></li>
  </ul>

</section>

<section>
  <h2 id="relative">Relative</h2>

  <p>An element with a position of <strong>relative</strong> can be positioned <em>relative</em> to where it normally would be placed.</p>

  <p>It can take these addtional properties to position it relative to what its normal position would be:</p>

  <ul>
    <li><strong>top</strong></li>
    <li><strong>bottom</strong></li>
    <li><strong>left</strong></li>
    <li><strong>right</strong></li>
  </ul>

  <p><br /></p>
</section>

<section>
  <h2 id="relative-continued">Relative Continued</h2>

  <p><strong>Let&#39;s try using position relative on our sample page</strong> &#8594;</p>

  <ul>
    <li>select the div with an id of content</li>
    <li>set the position to relative</li>
    <li>set top to 50px</li>
  </ul>

  <p><br /></p>
  <pre><code data-trim="" contenteditable="">
#content {
	border:1px solid #000;
	position: relative;
	top: 50px;
}
</code></pre>
</section>

<section>
  <h2 id="accessing-css-properties">Accessing CSS Properties</h2>

  <p>It turns out you can <strong>access CSS properties</strong> through <strong>JavaScript</strong>!</p>

  <p>Use the <strong>style</strong> property on an element to access each individual CSS property as a property on styles. (Whew&#8230; that was a jumble&#8230; easier to show than tell!)</p>

  <p><strong>Doing the same as the previous slide (but making the display relative in CSS first).</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
var c = document.getElementById('content')
c.style.display = 'relative';
c.style.top = '150px';
</code></pre>

</section>
<!--
<section markdown="block">
* what element to use (again)
* block, inline, inline block
* how elements are laid out 
	* box model
	* positioning
* absolute, relative, ? TODO: research positioning
* styles
	* CSS selectors
	* changing classes class/inline
* get/set attribute here as well
* toggle display on/off TODO: research best way to toggle, why?

</section>
-->
:ET