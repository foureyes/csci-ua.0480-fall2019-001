I"ÁS<div class="panel panel-default">
	<div class="panel-heading">Homework #7</div>
	<div class="panel-body">

    <h1 id="threes-dice-game-client-side-javascript---due-wednesday-april-11th-thursday-april-12th-by-11pm">Threes Dice Game (Client Side JavaScript) - <strong>Due <s>Wednesday, April 11th</s> Thursday, April 12th, by 11PM</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>manipulating the DOM</li>
      <li>setting DOM element attributes</li>
      <li>handling events with addEventListener</li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Threes is a dice game where the goal is to get the lowest score (with each die face counting for that value, with the exception of threes, which count as 0).  It&#39;s played with 5 dice. In our version there are two players, the user and the computer.</p>

    <ol>
      <li>A player starts off buy rolling 5 dice.</li>
      <li>The player then chooses 1 or more dice to pin (that is, to <em>save</em> and count towards their score).</li>
      <li>Once at least 1 die is pinned, the player rolls the remaining dice &#8230;</li>
      <li>The player then chooses 1 or more dice to pin.</li>
      <li>This process repeats until the player either pins all of the remaining dice, or there&#39;s only 1 die left, and the player is forced to pin that die.</li>
      <li>Once all of a player&#39;s dice are pinned, the values of all of the rolls are added to determine a player&#39;s score.
        <ul>
          <li>3&#39;s count as 0</li>
          <li>for example, if the pinned dice were: 1, 4, 1, 2, 3</li>
          <li>&#8230; then the score would be: 8</li>
        </ul>
      </li>
      <li>The other player then repeats steps 1 - 6 to get their score.</li>
      <li>The player <strong>with the lower score wins</strong>.</li>
    </ol>

    <p>You will be making an online version of this game where all of the game logic is client side JavaScript. Here&#39;s an example of what your game may look like:</p>

    <p><img src="../resources/img/hw07b-01-win.gif" /></p>

    <h3 id="submission-process">Submission Process</h3>

    <p>You will be given access to a private repository on GitHub.  The final version of your assignment should be in GitHub</p>

    <ul>
      <li><strong>Push</strong> your changes to the homework repository on GitHub.</li>
    </ul>

    <h3 id="make-at-least-4-commits">Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 4 separate commits</li>
    </ul>

    <h2 id="threes-dice-game-requirements">Threes Dice Game Requirements</h2>

    <h3 id="required-features"><strong>Required Features</strong></h3>

    <p><strong>Use the following markup</strong></p>

    <ol>
      <li>Start a new express project that uses express-static.
        <ul>
          <li>the root directory should contain <code class="highlighter-rouge">package.json</code>, your eslint config, <code class="highlighter-rouge">.gitignore</code>, etc.</li>
          <li>the <code class="highlighter-rouge">src</code> directory should contain <code class="highlighter-rouge">app.js</code> (serving on 3000), <code class="highlighter-rouge">public</code>, etc.</li>
        </ul>
      </li>
      <li>(there&#39;s no need to create any route handlers for this homework, you can do the whole thing with static files)</li>
      <li>In your public folder, create an <code>index.html</code> file.</li>
      <li>Add the following code to your <code>index.html</code>:
        <pre><code data-trim="" contenteditable="">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;A Little Threesy&lt;/title&gt;
  &lt;script src="game.js"&gt;&lt;/script&gt;
  &lt;link rel="stylesheet" href="base.css" type="text/css" media="screen" title="no title" charset="utf-8"&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;div id="content"&gt;
 &lt;h1&gt;A Little Threesy&lt;/h1&gt; 
 &lt;div id="intro"&gt;
   Starting Dice Values (leave empty for random):
   &lt;input type="text" id="diceValues" name="diceValues"&gt;
   &lt;button&gt;Go!&lt;/button&gt;

 &lt;/div&gt;
   &lt;div id="game" class="hidden"&gt;
 &lt;/div&gt;

 &lt;div id="error-message" class="overlay"&gt;
   &lt;div class="modal"&gt;
     &lt;p&gt;&lt;/p&gt;
     &lt;button class="closeButton"&gt;Ok. Got it!&lt;/button&gt;
   &lt;/div&gt;
 &lt;/div&gt;
  &lt;/div&gt;&lt;!--close id="content"--&gt;
&lt;/body&gt;
&lt;/head&gt;
&lt;/html&gt;
</code></pre>
      </li>
      <li><strong>You are not allowed to use any additional markup</strong>; you must generate any additional elements you&#39;ll need with JavaScript</li>
      <li>All of your JavaScript should go in your external JavaScript file.</li>
      <li>&#8230; and, of course, all of your CSS should go in your external CSS file.</li>
    </ol>

    <p><strong>Only show title screen and form on page load</strong></p>

    <ul>
      <li>Only show the content in the div with id <code>intro</code>
        <ul>
          <li>Make sure the overlay div and the game div are not displayed</li>
          <li>Hint:
            <ul>
              <li>Make the appropriate CSS rules</li>
              <li>Use JavaScript&#39;s <code>someElementObj.classList</code>&#39;s <code>add</code>, <code>remove</code>, and <code>contains</code> <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList">to <em>add and remove</em> classes</a> so that you can control which CSS rules are active</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>If the user clicks on the button, then start the game (see next requirement for instructions)</li>
      <li>Here&#39;s what the interaction should look like (you won&#39;t have any real content on the <em>next</em> page yet, though):
  <br />
  <img src="../resources/img/hw07b-00-start.gif" />
  <br /></li>
    </ul>

    <p><strong>Pressing &quot;Go&quot; reveals the game screen and sets predefined dice roll results</strong></p>

    <ul>
      <li>Use <code>addEventListener</code> to allow the button on the <em>title screen</em> to be pressed
        <ul>
          <li>It should lead to the next <em>screen</em>, which will be contained within the <code class="highlighter-rouge">div</code> with id, <code class="highlighter-rouge">game</code></li>
          <li>Check out the <a href="../slides/19/events.html#/">slides on events</a></li>
          <li>Along with mdn&#39;s documentation on <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/Events/click">click</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/Events/DOMContentLoaded">DOMContentLoaded</a></li>
          <li>Remember, you&#39;ll need to put all of your DOM dependant JavaScript in a <code>DOMContentLoaded</code> listener</li>
          <li>And, of course, you&#39;ll need to add a <code>click</code> event listener for your button</li>
          <li><code>document.querySelector</code> will also be very useful - see the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector">docs</a> or <a href="slides/19/js-css.html">slides</a>!</li>
          <li>Create and apply the appropriate classes to get rid of the <em>title screen</em> (do this with styles, there&#39;s no need to remove the element) and show the <em>game screen</em></li>
        </ul>
      </li>
      <li>Note that there&#39;s a form field in the <em>title screen</em> &#8230;
        <ul>
          <li>This field will allow the player to set the results of the dice rolls in the game (it&#39;s kind of like cheating / using loaded dice, but it&#39;s really for making it easier to test!)!</li>
          <li>If the player enters a value in this field, then the dice rolls will be set to the sequence inputted</li>
          <li>The input should be a comma separated list of numbers, for example <code class="highlighter-rouge">1,2,3,4,5,6,7,8,9</code>
            <ul>
              <li>the first 5 rolls should be 1,2,3,4,5</li>
              <li>the next 5 rolls should be 6,7,8,9 plus a random 5th number</li>
            </ul>
          </li>
          <li>No validation is required (assume that the user puts in valid input or no input)</li>
          <li>You can retrieve the user input from the text field by using the <code class="highlighter-rouge">value</code> property on the form element that contains the user input - <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement">see the mdn docs on value under HTML Input Element</a></li>
          <li>If there&#39;s nothing in the field, then dice rolls should be random</li>
          <li>To implement this behavior, see below &#8230;</li>
        </ul>
      </li>
      <li>Create a function or object that generates dice rolls
        <ul>
          <li>You&#39;ll use this any time a roll is needed for the player or the computer</li>
          <li>Again, dice rolls should initially be random &#8230;</li>
          <li>However, the function or object should be <em>configurable</em> so that it can draw numbers from the list of numbers entered</li>
          <li>(Use whatever mechanism you like to do this - perhaps storing the list in a closure or in a property in the function or constructor&#8230; or just a plain old global)</li>
          <li>Note that the first several numbers will be exhausted by the computer&#39;s rolls</li>
          <li>Once the list of specified numbers is exhausted, random numbers should be generated again</li>
        </ul>
      </li>
      <li>Here&#39;s an example of how it may work (again, the <em>game screen</em> will be blank for now, but when it&#39;s implemented, it should function like this):
  <img src="../resources/img/hw07b-00a-start-btn-fix.gif" />
  <br /></li>
    </ul>

    <p><strong>Generate DOM elements for 5 dice and 3 buttons</strong></p>

    <ul>
      <li>Create DOM elements to represent 5 dice
        <ul>
          <li>The elements should start off with no text</li>
          <li>Hint: you may find it helpful to create a containing element that holds all 5 dice</li>
          <li>Hint: to lay out all 5 dice adjacent to each other and still maintain a width and height, you can use &#8230;
            <ul>
              <li><code>display: inline-block</code></li>
              <li>a <code>table</code></li>
              <li>or <code>float</code> your elements</li>
            </ul>
          </li>
          <li>Hint: depending on your layout and positioning, it may be useful to have a <code>vertical-align: top;</code> in the containing element to keep the dice aligned in the same row once you start adding text nodes to them</li>
        </ul>
      </li>
      <li>Create three buttons, <code class="highlighter-rouge">Start</code>, <code>Roll</code>, and <code>Pin</code>
        <ul>
          <li>Set <code class="highlighter-rouge">Roll</code> and <code>Pin</code> to disabled by adding a <code>disabled</code> attribute</li>
          <li>For example:<code class="highlighter-rouge">&lt;button disabled&gt;My Button&lt;/button&gt;</code></li>
          <li>Hint: To do this in JavaScript, use either <code class="highlighter-rouge">someElementObject.disabled = true;</code> or <code>someElementObject.setAttribute("disabled", "disabled");</code></li>
        </ul>
      </li>
      <li>The generated dice and buttons should look something like this:
  <br />
  <img src="../resources/img/hw07b-00b-dice.gif" /></li>
    </ul>

    <p><strong>Pressing &quot;Start&quot; Generates a score for the computer and shows your score</strong></p>

    <ul>
      <li>Add an event listener to the Start button so that it when it&#39;s clicked it:
        <ol>
          <li>Generates a set of pinned dice for the computer</li>
          <li>Shows the player&#39;s score</li>
          <li>Allows the player to start rolling</li>
        </ol>
      </li>
      <li>Generate a set of pinned dice (and consequently a score) for the computer
        <ul>
          <li>The computer will:
            <ol>
              <li>roll 5 dice, and pick the lowest out of the 5 to pin</li>
              <li>roll the remaining 4 dice, and pick the lowest out of the 4 to pin</li>
              <li>roll the remaining 3 dice, and pick the lowest out of the 3 to pin</li>
              <li>&#8230; and continue to roll remaining dice and choose the single lowest dice to pin until all 5 dice are pinned</li>
            </ol>
          </li>
          <li>You can test this by setting the initial form input to <code class="highlighter-rouge">5,5,5,5,5,4,4,4,4,3,3,3,2,2,1</code>
            <ul>
              <li>(the computer&#39;s dice should be 5, 4, 3, 2, and 1)</li>
            </ul>
          </li>
          <li>Display the result as <code class="highlighter-rouge">Computer Score: 5 + 4 + 3 + 2 + 1</code> (where the numbers are the values of the pinned dice)</li>
          <li>This text should go below the title, but above the player&#39;s score</li>
        </ul>
      </li>
      <li>Display the player&#39;s score (which is 0 for now) below the computer&#39;s score, but above the dice</li>
      <li>Here&#39;s what the two scores should look like:
  <br />
  <img src="../resources/img/hw07b-00b-comp.gif" /></li>
      <li>Finally, disable the <code class="highlighter-rouge">Start</code> button and enable the <code class="highlighter-rouge">Roll</code> button
        <ul>
          <li>Hint: To do this in JavaScript, use either <code class="highlighter-rouge">someElementObject.disabled = false;</code> or <code>someElementObject.removeAttribute("disabled");</code></li>
        </ul>
      </li>
    </ul>

    <p><strong>Rolling dice</strong></p>

    <ul>
      <li>When the roll button is pressed&#8230;</li>
      <li>Assign a random number between 1 and 6 to each <em>unpinned</em> die
        <ul>
          <li>You&#39;ll have to keep track of which dice have been <em>saved</em> / <em>pinned</em> versus dice that have not been pinned</li>
          <li>Hint: There are many ways to do this:
            <ul>
              <li>Simply use global variables, or variables that are accessible to all of your listener callback functions</li>
              <li>You can also base pinned and unpinned on the attributes of the elements themselves (for example, each pinned die could have a <code>data-pinned</code> attribute or could have a class, <code>pinned</code>)</li>
              <li>Or any other design or architecture that meets the requirements</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>Display that number in each DOM element</li>
      <li>After you roll, the <code>Roll</code> button should be disabled</li>
      <li>The pin button should be enabled</li>
      <li>You can do this by using <code>someElementObject.removeAttribute('disabled');</code></li>
      <li>See an example roll below&#8230;
  <br />
  <img src="../resources/img/hw07b-00c-roll.gif" /></li>
    </ul>

    <p><strong>Selecting dice to pin</strong></p>

    <ul>
      <li>After rolling, a player must pin at least one die</li>
      <li>First, the player must select the dice that they would like to pin</li>
      <li>They do this by clicking on the actual displayed dice
        <ul>
          <li>Clicking on a die selects it for pinning (when the <code>Pin</code> button is pressed) and changes the die&#39;s appearance (you can make this whatever you like - such as changing the background color, adding a differently styled border, etc.)</li>
          <li>Note that dice that have already been pinned should not be clickable (they&#39;ll be a different style; in the sample program, pinned dice are <strong>dark</strong> gray)</li>
          <li>Hovering over the dice should also have an effect on styling (in the examples, hovering over dice show a green background)</li>
          <li>The example below shows a die selected for pinning being given a background color of <strong>light</strong> gray&#8230;
  <br />
  <img src="../resources/img/hw07b-00d-select.gif" /></li>
        </ul>
      </li>
      <li>Clicking on a die again <em>deselects</em> it for pinning
        <ul>
          <li>A user can deselect a die simply by clicking on the die again</li>
          <li>Note that this reverts its style</li>
          <li>Hint: <code>someElementObject.classList.toggle(someClassName)</code> is helpful when dealing with flipping back-and-forth between one state and another</li>
          <li>See below for an example of selecting and then deselecting (toggling)
  <br />
  <img src="../resources/img/hw07b-00d-deselect.gif" /></li>
        </ul>
      </li>
      <li><strong>Selecting the dice to pin doesn&#39;t actually pin the dice&#8230; you&#39;ll have to press the pin button to do that</strong> (see next step!)</li>
    </ul>

    <p><strong>Pressing the pin button</strong></p>

    <ul>
      <li>Once a player has chosen the dice to pin, they can finalize their choices by clicking the <code>Pin</code> button
        <ul>
          <li>At least one die must be selected to pin for the <code>Pin</code> button to work</li>
          <li>Pinned dice can no longer be rolled</li>
          <li>&#8230;And they can&#39;t be chosen to be pinned again (they&#39;re <em>already pinned</em>!)</li>
        </ul>
      </li>
      <li>Clicking on the <code>Pin</code> button will change the styles on the selected dice
        <ul>
          <li>When the <code>Pin</code> button is pressed, the dice that were not set to be pinned become blank (see image below)</li>
          <li>The dice that were selected to be pinned receive a different style (in the examples shown, the background is dark gray)</li>
        </ul>
      </li>
      <li>After the <code>Pin</code> button is pressed, the player&#39;s score should be re-calculated and updated based on the newly pinned dice</li>
      <li>Again, if there are still unpinned dice after pinning, then they become blank (no number)</li>
      <li>Everything together should look like:
  <br />
  <img src="../resources/img/hw07b-00d-select-and-pin.gif" /></li>
    </ul>

    <p><strong>Determine the winner</strong></p>

    <p>Once all of the dice have been pinned&#8230;</p>

    <ol>
      <li>Disable both the <code>Pin</code> and <code>Roll</code> buttons</li>
      <li>Compare the computer&#39;s score with the user&#39;s score</li>
      <li>The player with the lower score wins</li>
      <li>Add text to indicate of the user won, lost or tied</li>
      <li>The text should be styled differently depending on the game outcome&#8230; for example, in the screen captures for the solution&#39;s version&#8230;
        <ul>
          <li>win text is green</li>
          <li>lose text is red</li>
          <li>tie text is blue</li>
        </ul>
      </li>
      <li>See the example below of a user losing a game:
 <img src="../resources/img/hw07b-02-lose.gif" /></li>
    </ol>

    <p><strong>Validation and error messages</strong></p>

    <p>There are two interactions that the user <strong>shouldn&#39;t be able to do</strong>:</p>

    <ol>
      <li>Click on the <code>Pin</code> button before the user has selected dice to pin</li>
      <li>Select a die to pin before a they&#39;ve rolled (that is, click on the die when it&#39;s blank)</li>
    </ol>

    <p>If either state occurs, create an overlay on the screen with the appropriate error message. When they click on the <code>OK</code> button (or even better anywhere, in the overlay), the overlay should disappear.</p>

    <ul>
      <li>implement this using plain CSS and/or JavaScript (no JQuery or bootstrap)</li>
      <li>Hint: the overlay should be <code>position:fixed</code> with a <code>height</code> and <code>width</code> of <code>100%</code></li>
      <li>Hint: the overlay&#39;s <code>z-index</code> should be a high number (100?) so that it appears <em>on top</em> of everything else</li>
      <li>Hint: to center content within the overlay, <code>margin: auto</code> and a specific <code>width</code> is helpful</li>
    </ul>

    <p><img src="../resources/img/hw07b-05-error.gif" /></p>

    <h3 id="optional-features-extra-credit">Optional Features (Extra Credit)</h3>

    <p>Implement any of the following features</p>

    <p>(10 points) <strong>Restart game</strong></p>

    <ul>
      <li>when game ends, add a restart button along the bottom row of buttons</li>
      <li>the restart button resets the game so that:
        <ul>
          <li>the computer generates a new score</li>
          <li>the player starts with 5 unpinned dice</li>
          <li>Start and Pin are disabled, but Roll is enabled</li>
        </ul>
      </li>
    </ul>

    <p>(5 points) <strong>Add actual dice faces to the game</strong></p>

    <ul>
      <li>instead of numbers, add an actual face to each die
        <ul>
          <li>you can use images</li>
          <li>&#8230; or <a href="https://commons.wikimedia.org/wiki/File:Dice_1-6.svg">svgs</a></li>
          <li>&#8230; or even <a href="https://davidwalsh.name/flexbox-dice">css / flexbox</a>!</li>
        </ul>
      </li>
      <li>(the computer&#39;s pinned dice can remain as numbers, though)</li>
    </ul>

  </div>
</div>

:ET