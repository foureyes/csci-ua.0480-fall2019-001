I"x<div class="panel panel-default">
  <div class="panel-heading">React Lab</div>
  <div class="panel-body">

    <h1 id="react-lab---memoremoji">React Lab - MemorEmoji</h1>

    <h2 id="submission-process">Submission Process</h2>

    <ul>
      <li>work in groups of 2 - 4 students</li>
      <li>choose one of the applications described below in the Overview &#8594; Description and implement it</li>
      <li><strong>submit using <a href="https://docs.google.com/forms/d/e/1FAIpQLSfPZMXdlMnx-w-ZighnPR5P7bw6opA0h_1QvFiw8M7SNSaKUw/viewform">this form</a></strong></li>
      <li><strong>each person on the team should submit their own individual form</strong></li>
      <li>once you&#39;ve submitted:
        <ul>
          <li>raise your hand to let me know</li>
          <li>either&#8230;
            <ol>
              <li>help others with their lab</li>
              <li>try the other application!</li>
            </ol>
          </li>
        </ul>
      </li>
    </ul>

    <h2 id="scoring">Scoring</h2>

    <p>Total Score</p>

    <ul>
      <li><strong>60 points</strong> submitting <em>any</em> code</li>
      <li><strong>80 points</strong> (Part 1) code deployed on <a href="https://codepen.io">codepen.io</a>, <a href="glitch.com">glitch</a>, and single card toggle works</li>
      <li><strong>95 points</strong> (Part 2) code deployed and multi-card toggle works with hardcoded components / elements</li>
      <li><strong>100 points</strong> (Part 3) full game implemented</li>
    </ul>

    <p>Extra Credit</p>

    <ul>
      <li><strong>+15 points</strong> (Part 4, extra credit) matching game implemented</li>
      <li><strong>+20 points</strong> (Part 5, extra credit) game over message implemented</li>
    </ul>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>React
        <ul>
          <li>props</li>
          <li>state</li>
          <li>events</li>
          <li>nested components</li>
          <li>conditional rendering</li>
          <li>form elements (extra credits)</li>
        </ul>
      </li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Create a game similar to  <strong>MemorEmoji</strong> from  Homework 6, but using <strong>React</strong> instead of plain JavaScript.</p>

    <h2 id="instructions">Instructions</h2>

    <h3 id="setup">Setup</h3>

    <p>You can develop your application with any tools that you like. If you&#39;d like to use what we learned in the lectures, you can choose one of these method (however, you can only deploy on 2 and 3):</p>

    <ol>
      <li>use <code class="highlighter-rouge">create-react-app</code>
        <ul>
          <li>allows quick setup for local development</li>
          <li>you can use your own text editor!</li>
          <li><a href="../slides/26/react-state-parent.html#/15">see the instructions on setting up create-react-app in the slides</a></li>
          <li><a href="https://github.com/facebookincubator/create-react-app/issues/138#issuecomment-334316575">but also, <strong>if you are having path issues, especially on windows</strong>, see this github ticket</a></li>
        </ul>
      </li>
      <li>remix a react starter boilerplate using <a href="https://glitch.com/edit/#!/remix/starter-react">glitch.com</a>
        <ul>
          <li>add your code to <code class="highlighter-rouge">app.jsx</code></li>
        </ul>
      </li>
      <li>create a new project (pen) in <a href="https://codepen.io">codepen.io</a>
        <ul>
          <li>debugging might be difficult</li>
          <li>&#8230;but your application will already be deployed!</li>
          <li>to setup, configure babel as your JavaScript pre-processor and add React and ReactDOM Libraries:
  <br />
  <img src="../resources/img/codepen.gif" alt="codepen" /></li>
        </ul>
      </li>
    </ol>

    <h3 id="part-1---single-card">Part 1 - Single Card</h3>

    <p>Create a React component or components so that you can toggle a card from being face down or face up. Note that rather than using css, you can manipulate the DOM directly in your jsx (for example, favor conditionally adding a text node to your JSX rather than setting visibility hidden).</p>

    <p>Lastly, to add a class to a React element, use <code class="highlighter-rouge">className=foo</code>, where <code class="highlighter-rouge">foo</code> is is your class name.</p>

    <video controls="">
    <source src="../resources/video/lab08-1.webm" type="video/webm" />
    Sorry, your browser doesn't support embedded videos.
</video>

    <h3 id="part-2---multiple-cards">Part 2 - Multiple Cards</h3>

    <p>Instead of just a single component that reacts to clicks, create several that can be clicked. Try to use parent and child components to do this. Clicking on any card toggles it from being face down to face up&#8230;or from face up to face down.</p>

    <video controls="">
    <source src="../resources/video/lab08-2.webm" type="video/webm" />
    Sorry, your browser doesn't support embedded videos.
</video>

    <h3 id="part-3---game">Part 3 - Game</h3>

    <p>Now&#8230; only allow the player to flip two cards at a time. Once they flipped two cards, display a message and a confirmation button to proceed to the next turn. If the two cards flipped are the same, keep them face up. Otherwise, turn the cards back over so that the value is hidden.</p>

    <video controls="">
    <source src="../resources/video/lab08-3.webm" type="video/webm" />
    Sorry, your browser doesn't support embedded videos.
</video>

    <h3 id="part-4---game-over">Part 4 - Game Over</h3>

    <p>When the game ends (all of the cards are face up and matched), replace the cards with a message that says: &quot;Game Over&quot;</p>

    <video controls="">
    <source src="../resources/video/lab08-4.webm" type="video/webm" />
    Sorry, your browser doesn't support embedded videos.
</video>

    <h3 id="deployment">Deployment</h3>

    <p>To deploy your app on glitch.com&#8230; (only valid if you developed locally, otherwise, your code is already there!)</p>

    <ol>
      <li>use the react starter boilerplate on <a href="https://glitch.com/edit/#!/remix/starter-react">glitch.com</a></li>
      <li>add your code to <code class="highlighter-rouge">app.jsx</code>
        <ul>
          <li><strong>Do not bring in <code class="highlighter-rouge">import</code> statements</strong></li>
          <li>(it&#39;s already done at the top of <code class="highlighter-rouge">index.js</code> with <code class="highlighter-rouge">require</code>)</li>
          <li>only add your components and your call to <code class="highlighter-rouge">ReactDOM.render</code></li>
        </ul>
      </li>
      <li>add styles easily by adding a <code class="highlighter-rouge">style</code> tag in <code class="highlighter-rouge">index.html</code> and writing your css directly there</li>
    </ol>

    <p>To deploy your app in codepen.io&#8230; (only valid if you developed locally, otherwise, your code is <em>already there</em>)</p>

    <ol>
      <li>configure babel, React and React DOM as shown in the gif above (see Instructions &#8594; setup)</li>
      <li>copy all of your <strong>components</strong> over to the js panel (don&#39;t include any of the import statements)</li>
      <li>you may have to change <code class="highlighter-rouge">extends</code> so that it&#39;s <code class="highlighter-rouge">extends React.Component</code> for each component</li>
      <li>use <code class="highlighter-rouge">ReactDom.render</code> at the very end to render your main/root component:
 <code class="highlighter-rouge">ReactDOM.render(&lt;App /&gt;, document.body);</code></li>
    </ol>

  </div></div>
:ET