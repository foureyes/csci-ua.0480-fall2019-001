I"ùB<style>
h1.warning {
	background-color: #eaa;
}
</style>

<div class="panel panel-default">
	<div class="panel-heading">Homework #3</div>
	<div class="panel-body">

    <h1 id="ascii-art-diaryyyy-mm-dd-due-wednesday-1017-by-11pm">ASCII ART DIARYYYY-MM-DD, Due <strong>Wednesday 10/17 by 11PM</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="description">Description</h3>

    <p>Create a site the collects and displays a sketchbook of ascii art.In this homework you&#39;ll be working with:</p>

    <ul>
      <li>serving static files</li>
      <li>middleware</li>
      <li>handling forms, both GET and POST</li>
      <li>sessions</li>
    </ul>

    <p>You&#39;ll be creating 2 pages:</p>

    <ul>
      <li><strong>home</strong> - <code>/</code>: displays all of the ascii pieces submitted on the site; can be filtered by tag.</li>
      <li><strong>add</strong> - <code>/add</code>: a page that allows a user to submit a new piece</li>
    </ul>

    <p>Your directory layout should look like the following <strong>once you&#39;re done with the assignment</strong>:</p>

    <pre><code data-trim="" contenteditable="">
‚îú‚îÄ‚îÄ app.js
‚îú‚îÄ‚îÄ package-lock.json
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ public
‚îÇ   ‚îú‚îÄ‚îÄ css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ base.css
‚îÇ   ‚îî‚îÄ‚îÄ img
‚îÇ       ‚îî‚îÄ‚îÄ logo.png
‚îî‚îÄ‚îÄ views
    ‚îú‚îÄ‚îÄ layout.hbs
    ‚îî‚îÄ‚îÄ your-template-here.hbs
</code></pre>

    <h3 id="example-interaction">Example Interaction</h3>

    <div class="img">
      <!--![interaction](../resources/img/hw04-asciidiary-mainexample.gif)-->
      <p><img src="../resources/img/hw04-asciidiary-mainexample.gif" /></p>

    </div>

    <h3 id="submission-process">Submission Process</h3>

    <ol>
      <li>You will be given access to a private repository on GitHub</li>
      <li>The final version of your assignment should be in GitHub</li>
      <li><strong>Push</strong> your changes to the homework repository on GitHub by the due date.</li>
    </ol>

    <h3 id="make-at-least-4-commits">Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 3 separate commits - (for example, one option may be to make one commit per part in the homework).</li>
    </ul>

    <h2 id="part-1---setup">Part 1 - Setup</h2>

    <h3 id="installing-dependencies">Installing Dependencies</h3>

    <ul>
      <li>create a <code>package.json</code></li>
      <li><strong>install</strong> the following <strong>dependencies</strong> (make sure you use the <code>--save</code> option), and <strong>no others</strong>:
        <ul>
          <li><code>express</code></li>
          <li><code>hbs</code></li>
        </ul>
      </li>
    </ul>

    <h3 id="gitignore">.gitignore</h3>

    <ul>
      <li>create a <code>.gitignore</code></li>
      <li>ignore the following files:
        <ul>
          <li><code>node_modules</code></li>
          <li>any other files that aren&#39;t relevant to the project&#8230; for example
            <ul>
              <li><code>.DS_Store</code> if you&#39;re on OSX</li>
              <li><code>.swp</code> if you use vim as your editor</li>
              <li>etc.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <h3 id="linting">linting</h3>

    <ul>
      <li>an eslint configuration file (for example <code class="highlighter-rouge">.eslintrc.json</code>) should be in the root directory (or copy one from a previous project if it doesn&#39;t exist)</li>
      <li>make sure that any global linting tools are installed (<code class="highlighter-rouge">eslint</code>)</li>
      <li>periodically lint your program as you work</li>
    </ul>

    <h2 id="part-2---homepage-and-static-files">Part 2 - Homepage and Static Files</h2>

    <h3 id="enabling-static-files">Enabling Static Files</h3>

    <p>First, let&#39;s make sure you can serve up static content, like css and images.</p>

    <ul>
      <li>create the following directory structure in your project&#39;s root directory
        <ul>
          <li><code>public</code></li>
          <li><code>public/css</code></li>
          <li><code>public/img</code></li>
        </ul>
      </li>
      <li>add a blank css file in <code>public/css/base.css</code></li>
      <li>add an ascii related image in <code>public/img/logo.png</code></li>
      <li>create a basic express application called <code>app.js</code>; you don&#39;t have to define any routes yet&#8230;
        <ul>
          <li>make sure that your application is <strong>served over port 3000</strong></li>
        </ul>
      </li>
      <li>just add the appropriate requires and middleware to enable static file serving:
        <ul>
          <li>check out the <a href="../slides/08/express.html#/29">slides on serving static files with Express</a></li>
        </ul>
      </li>
      <li>test that both the css files and image work
        <ul>
          <li>for example, try to curl <code>http://localhost:3000/img/logo.png</code></li>
          <li>or go that url in your browser</li>
        </ul>
      </li>
    </ul>

    <h3 id="creating-a-home-page">Creating a Home Page</h3>

    <p>Now that static files are set, create a homepage.</p>

    <ul>
      <li>for the home page, your app should accept <code>GET</code> requests on the path, <code>/</code></li>
      <li>set up handlebars - <a href="../slides/09/templating.html">these slides</a> may help&#8230; (it&#39;s just one line!)
        <ul>
          <li>get all the requirements and config setup</li>
          <li>create the appropriate views folder, along with an initial layout file:
            <ul>
              <li><code>views</code></li>
              <li><code>views/layout.hbs</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>in your <code>layout.hbs</code>, drop in the surrounding html that will go on every page
        <ul>
          <li>pull in your <code>base.css</code> stylesheet</li>
          <li>include a header containing both your <code>logo.png</code> image and the title of your site, <strong>ascii sketchbook</strong></li>
          <li>additionally, add a footer that links to all 2 pages in your site:
            <ul>
              <li>a link to the home / list of artworks page (/)</li>
              <li>a link to <strong>a page to add an entry</strong> page (/add)</li>
            </ul>
          </li>
          <li>don&#39;t forget <code>body</code>, surrounded by triple curly braces!</li>
        </ul>
      </li>
      <li>in your template for your homepage (you can name this template whatever you want&#8230; just make sure you can pull it up later), add the following:
        <ul>
          <li>an <code>h3</code> header that says &quot;artworks&quot;</li>
        </ul>
      </li>
      <li>create the appropriate route so that a <code>GET</code> request pulls up the rendered template</li>
      <li>add some css to change some styles, (for example change the color of the text, change the font, etc.)</li>
    </ul>

    <p>Here&#39;s an example of what the page could look like (you don&#39;t have to use the same exact styles, but add enough styles so that you can see that the style sheet is integrated correctly):</p>

    <div class="img">
      <p><img src="../resources/img/hw04-asciidiary-examplelookempty.png" width="100%" />
<!--
![png](../resources/img/hw04-asciidiary-examplelookempty.png)
--></p>
    </div>

    <h2 id="part-3---list-of-artworks-filtering-list-of-artworks">Part 3 - List of Artworks, Filtering List of Artworks</h2>

    <p>The homepage should also have a list of all of the artworks submitted to the site. By default, this list will start with the following content:</p>

    <p>01.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2018-09-29 washington sq arch
 _______________
 |~|_________|~|
 |::::\^o^/::::|
 ---------------
 |..|/     \|..|
 ---        ----
 |  |       |  |
 |  |       |  |
 |  |       |  |
.|__|.     .|__|.

tags: architecture, public
</code></pre></div>    </div>

    <p>02.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2018-09-30 boba
  ______
  ======
 /      \
|        |-.
|        |  \
|O.o:.o8o|_ /
|.o.8o.O.|
 \.o:o.o/

tags: snack, notmybestwork
</code></pre></div>    </div>

    <p>03.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2018-10-31 buddy
       ___
      /  /\   |---.
      |__|/__ |---,\
      |  `   |=    `
      |      /|
      |  .--' |
      |   |\  |
      |   | \ |
     /|   | | |
    \/    |  \|
___ /_____\___|\____

tags: halloween, squad, fashion
</code></pre></div>    </div>

    <p>These artworks can be filtered so that your application only shows artworks for a particular tag.</p>

    <h3 id="middleware-and-logging">Middleware and Logging</h3>

    <p>First, get some logging together so that you can troubleshoot. Log out the request that you receive, including the request&#39;s query string and body.</p>

    <ul>
      <li>require the <code>body-parser</code> (aka <code class="highlighter-rouge">express.urlencoded</code>) middleware and use it; this will allow you to access the content of the request&#39;s body</li>
      <li>set up some logging using your own middleware function; it should include
        <ul>
          <li>the request <strong>method</strong>,  <strong>path</strong></li>
          <li>followed by the contents of the request&#39;s query string</li>
          <li>followed by the contents of the request <strong>body</strong></li>
        </ul>
      </li>
    </ul>

    <h3 id="artwork-list">Artwork List</h3>

    <p>Now for some actual content. This page will display the artworks and the tags associated with the artwork.</p>

    <p><strong>Bootstrap the list with some data.</strong></p>

    <ul>
      <li>store all of the artwork data in a global Array of objects&#8230;</li>
      <li>each object has four properties:
        <ul>
          <li>the title</li>
          <li>the date (as a YYYY-MM-DD string)</li>
          <li>the <em>actual</em> artwork (just strings).</li>
          <li>hint: use `` string templates to have strings with newlines in your code.
            <ul>
              <li>warning: the &quot;" needs to be escaped using itself if you do things this way i.e. &quot;\&quot; whenever you mean &quot;"</li>
            </ul>
          </li>
        </ul>
      </li>
      <li>it should start off with three artworks of your choice or doing (you can copy the ones above if you feel like it)</li>
      <li>(storing this data in a global variable isn&#39;t typical, of course, but we&#39;ll have to store the data <em>somewhere</em> for now!)</li>
    </ul>

    <p><strong>Create the actual page&#8230;</strong></p>

    <ul>
      <li>modify your route for your home page (<code>/</code>) so that you render the template with the correct context object (that is, the list of artworks to display)</li>
      <li>in the template, you can iterate through the list of artworks using the <code>#each</code> helper
        <ul>
          <li>HINT: use the <code class="highlighter-rouge">&lt;pre&gt;</code> tag is for monospaced (ascii art)</li>
        </ul>
      </li>
      <li><strong>display the artworks in reverse order</strong> - the last element on the list should be on top</li>
      <li>put each artwork + metadata entry in a list item (<code>li</code>)</li>
      <li>for each artwork, display all tags as links that will filter the artworks to only that tag
        <ul>
          <li>you&#39;ll have to come back to this later as you add the ability to <em>actually</em> filter in the next part</li>
        </ul>
      </li>
      <li>additionally, make the tags a different style (such as a different font-weight or background-color or &#8230; anything you want)</li>
    </ul>

    <p><strong>Test your page.</strong></p>

    <ul>
      <li>it should look a little like the image below</li>
      <li>again, the styles don&#39;t have to match exactly - just add enough styling to distinguish between the tags and the actual message</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw04-asciidiary-examplelookpopulated.png" width="100%" />
<!--![list](../resources/img/hw04-asciidiary-examplelookpopulated.png)--></p>
    </div>

    <h3 id="filter-by-artwork-tag">Filter by Artwork Tag</h3>

    <p><strong>Once you have your list of artworks working&#8230; add a form that allows you to filter by tags.</strong> &#8594;</p>

    <ul>
      <li>create a form in the template used for your homepage
        <ul>
          <li>the form should issue a <code>GET</code> request</li>
          <li>the request should go to the same URL that it&#39;s on (still home, <code>/</code>)</li>
          <li>the form should also have a text field and a submit button</li>
          <li><strong>name your text input: <code class="highlighter-rouge">tag</code></strong></li>
        </ul>
      </li>
      <li>on the server side, modify your route for your home page (<code>/</code>) so that it sends filtered data if the form is submitted
        <ul>
          <li>how does your route know if the form was submitted?</li>
          <li>how does the route extract the data from the <code>GET</code> request / form submission?</li>
          <li>find some way to filter the data</li>
          <li>send that data to the template</li>
          <li>if the filter submitted is blank or if there is no filter, display all of the artworks</li>
        </ul>
      </li>
      <li>go back and modify the tag links in your template for <code class="highlighter-rouge">/</code> so each has an appropriate link to filter the artworks <strong>WITHOUT</strong> having to submit a form</li>
      <li><strong>here&#39;s what the filter interaction should look like:</strong></li>
    </ul>

    <div class="img">
      <!--![filter](../resources/img/hw04-asciidiary-filterexample.gif)-->
      <p><img src="../resources/img/hw04-asciidiary-filterexample.gif" /></p>
    </div>

    <p><strong>The log should look something like this:</strong></p>

    <p><code>GET</code> the home page</p>

    <pre><code data-trim="" contenteditable="">GET /
=====
req.query: {}
req.body: {}
</code></pre>

    <p><code>GET</code> to submit your filter</p>
    <pre><code data-trim="" contenteditable="">GET /
=====
req.query: { filter: 'G' }
req.body: {}
</code></pre>

    <h2 id="part-4---adding-an-artwork">Part 4 - Adding an Artwork</h2>

    <h3 id="create-a-artwork-form">Create a Artwork Form</h3>

    <ul>
      <li>in <strong>app.js</strong> create a new route handler and template for <code>/add</code>
        <ul>
          <li>add a form in your template</li>
          <li>it should have 4 <code>inputs</code> (choose whatever form elements you like, they can all be text if you want to keep things simple) - with appropriate name attributes&#8230; you&#39;ll see that name in the request body!
            <ul>
              <li>title</li>
              <li>dt (date string)</li>
              <li>the text of the artwork</li>
              <li>tags (as single space-delimited string)</li>
            </ul>
          </li>
          <li>&#8230;as well as a submit <code>input</code></li>
        </ul>
      </li>
      <li>the form&#39;s method should be <code>POST</code></li>
      <li>the action should be empty string <code>""</code> or <code>/add</code> (it&#39;s <code>POST</code>ing to itself)</li>
      <li>modify <strong>app.js</strong> again&#8230; by adding a new route so that it accepts <code>POST</code> requests on <code>/add</code>
        <ul>
          <li>in your callback function for this route&#8230;</li>
          <li>create an object for this new artwork (with the actual artwork text and the tags) and add it to your global list of artwork objects</li>
          <li>&#8230;after that, redirect to home <code>/</code> with a <code>GET</code> request</li>
        </ul>
      </li>
      <li><strong>here&#39;s what the add interaction should look like:</strong></li>
    </ul>

    <div class="img">
      <!--![add](../resources/img/hw04-asciidiary-addexample.gif)-->
      <p><img src="../resources/img/hw04-asciidiary-addexample.gif" /></p>
    </div>

    <p>The logs should look something like this for the POST, Redirect and GET:</p>

    <p><code>GET</code> the list page.</p>

    <pre><code data-trim="" contenteditable="">GET /add
=====
req.query: {}
req.body: {}
</code></pre>

    <p><code>POST</code> the form (notice the body).</p>

    <pre><code data-trim="" contenteditable="">POST /add
=====
req.query: {}
req.body: { title: 'sanata',
     dt: '2018-12-25',
     work: '(o.O )\\r\\n  ... /\\r\\n  //\\\\\\\\  ',
     tags: 'holiday  fun  healthy' } }
</code></pre>

    <p><code>GET</code> the home page (/)&#8230;</p>

    <pre><code data-trim="" contenteditable="">GET /
=====
req.query: {}
req.body: {}
</code></pre>

  </div>

</div>
:ET