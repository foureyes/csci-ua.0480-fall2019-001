I"tL<section class="intro-slide">
  <h1 id="html-primer-javascript-and-the-browser">HTML Primer, JavaScript and the Browser</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>
<section>
  <h2 id="javascript-html-the-browser-and-you">JavaScript, HTML, the Browser and <em>You</em></h2>

  <p>In this set of slides, we&#39;ll briefly discuss:</p>

  <ul>
    <li>HTML</li>
    <li>browsers and how they render HTML</li>
    <li>using JavaScript on the client side</li>
  </ul>
</section>

<section>
  <h2 id="html">HTML</h2>

  <p>Hey&#8230; so remember when we talked about the internet, the web, interconnected documents and hyper-text?</p>

  <p><strong>HTML</strong> is the language that describes the <strong>structure</strong> and <strong>semantic content</strong> of a document on the web; it consists of:</p>

  <ul>
    <li><strong>content</strong> (just plain text)</li>
    <li>and elements (tags) that give structure to the <strong>text</strong></li>
  </ul>

  <p><br />
Content and structure aren&#39;t the whole story when viewing a web page, though. <strong>What pieces are missing (let&#39;s see)?</strong> &#8594;</p>

  <ul>
    <li>style (presentation)</li>
    <li>interactivity</li>
  </ul>
</section>

<section data-background="#440000">
  <h1 id="html-is-for-content-and-structure">HTML is for content and structure</h1>

</section>

<section>
  <h2 id="html-is-a-mark-up-language">HTML is a <em>Mark Up</em> Language</h2>

  <p><strong>HTML</strong> stands for Hyper-Text Markup Language. We get the Hyper-Text part.</p>

  <p><strong>What about the markup part?</strong> &#8594;</p>

  <ul>
    <li>a markup language is a method of annotating text&#8230;
      <ul>
        <li>where the markup itself is syntactically distinguishable from the content</li>
        <li>markup is applied to text by using <em>tags</em></li>
      </ul>
    </li>
    <li>HTML is generally not considered a language in the <em>programming</em> language sense</li>
  </ul>

</section>

<section>
  <h2 id="elements-and-tags">Elements and Tags</h2>

  <p>An <strong>element</strong> a single part of an HTML document; it encompasses both structure and (optionally) content: a paragraph, the head of the document, etc.</p>

  <ul>
    <li>an element is made up of <strong>tags</strong> and, optionally, text: <code>&lt;p&gt;Some Content&lt;/p&gt;</code></li>
    <li><strong>tags</strong> are used to mark the start and end of an HTML element: <code>&lt;p&gt; ... &lt;/p&gt;</code></li>
    <li>an <strong>opening tag</strong> is an element&#39;s name surrounded by angle brackets: <code>&lt;p&gt;</code></li>
    <li>an <strong>closing tag</strong> is an element&#39;s name prefixed with a forward slash and surrounded by angle brackets: <code>&lt;/p&gt;</code></li>
  </ul>
</section>

<section>
  <h2 id="tags-continued">Tags Continued</h2>

  <p>There are a few ways that <strong>tags</strong> and content can be combined to create <strong>elements</strong>. <strong>What are they?</strong> &#8594;</p>

  <ul>
    <li class="fragment">an open and close tag surrounding content: <code>&lt;h1&gt;The Busy Birder&lt;/h1&gt;</code></li>
    <li class="fragment">an open and close tag without content: <code>&lt;script src="main.js"&gt;&lt;script&gt;</code></li>
    <li class="fragment">only an open tag <code>&lt;img src="logo.png"&gt;</code></li>
  </ul>

</section>

<section>
  <h2 id="attributes">Attributes</h2>

  <p>An <strong>opening tag</strong> can contain <strong>attributes</strong>. <strong>In the context of HTML, what&#39;s an attribute?</strong> &#8594;</p>

  <ul>
    <li class="fragment">an <strong>attribute</strong> is part of a tag that provides additional information about an element</li>
    <li class="fragment">it&#39;s composed of a name/value pair joined by an equal sign</li>
    <li class="fragment">it&#39;s is placed after the name of the element in a tag, but before the last angle bracket: <code>&lt;img src="logo.png"&gt;</code></li>
    <li class="fragment">the value doesn&#39;t have to be quoted, but it&#39;s good practice to do so&#8230; to avoid issues like this:<code>&lt;input type=text value=what is this&gt;</code></li>
  </ul>
</section>

<section>
  <h2 id="a-quick-diagram">A Quick Diagram</h2>

  <p><strong>Name the parts of this markup</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;a href="www.nyu.edu&gt;NYu&lt;/a&gt;
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
<!--             element
                    |
     +--------------+-----------+
     |                          | 
    &lt;a href="www.nyu.edu"&gt;NYU&lt;/a&gt;
     |     |                    |
     |   attribute              |
start tag                    end tag
-->
</code></pre>
</section>

<section>
  <h2 id="special-characters">Special Characters</h2>

  <p><strong>What if you want your content to contain a literal less than sign&#8230; or some other special character?</strong> &#8594;</p>

  <p class="fragment">Use an <strong>HTML entity</strong>. An <strong>entity</strong> is a sequence of characters that represent a special characters that is not readily available on most keybaords&#8230; such as the less-than sign, an ampersand, a space:</p>

  <ul>
    <li class="fragment">HTML entities start with an ampersand, followed by a name, and end with a semicolon</li>
    <li class="fragment">for example, <code>&amp;lt;</code> is <code>&lt;</code> and <code>&amp;amp;</code> is an <code>&amp;</code></li>
    <li class="fragment">a <a href="http://dev.w3.org/html5/html-author/charref">list of HTML entities</a></li>
  </ul>
</section>

<section>
  <h2 id="some-commonly-used-html-entities">Some Commonly Used HTML Entities:</h2>

  <pre><code data-trim="" contenteditable="">
&amp;amp; ... ampersand (&amp;)
&amp;nbsp; ... non breaking space (&nbsp;)
&amp;lt; ... less than (&lt;)
&amp;gt; ... greater than (&gt;)
&amp;quot; ... double quotes (&quot;)
&amp;apos; ... single quote (&apos;)
</code></pre>
</section>

<section>
  <h2 id="were-using-modern-html">We&#39;re Using <em>Modern</em> HTML</h2>

  <p>HTML has evolved greatly since its inception in the early 90&#39;s. There are <a href="http://en.wikipedia.org/wiki/HTML#HTML_versions_timeline">multiple versions</a> that have cropped up over time.</p>

  <p><strong>We&#39;re using <em>modern HTML</em>.</strong></p>

  <p>HTML is specified by two groups: WHATWG and W3C.</p>
</section>

<section>
  <h2 id="modern-html-specifications">Modern HTML, Specifications</h2>

  <p>WHATWG and W3C work together to specify HTML</p>

  <ul>
    <li>WHATWG (Web Hypertext Application Technology Working Group) has a <a href="https://html.spec.whatwg.org/multipage/">living HTML standard</a>
      <ul>
        <li>the standard is continuously evolving, as necessary</li>
        <li>no version numbers</li>
        <li>it is driven by <em>the community</em>; <a href="">everyone can contribute</a>!</li>
      </ul>
    </li>
    <li>W3C (World Wide Web Consortium) is basing the most recent versions of HTML on WHATWG&#39;s living standard
      <ul>
        <li>it snapshots versions</li>
        <li>the <a href="https://wiki.whatwg.org/wiki/FAQ#Is_participation_free.3F">latest specification is version 5 - HTML5</a></li>
        <li>these version releases are a bit slower than WHATWG&#39;s</li>
      </ul>
    </li>
  </ul>

</section>
<section>
  <h2 id="html5">HTML5</h2>

  <p>In this class, we&#39;re using the most modern version of HTML that&#39;s currently supported by most browsers. We&#39;re using <strong>HTML 5</strong>.</p>

  <p><strong>By the way, why do you think snapshots / versions are necessary? Why not just work off of the living standard?</strong> &#8594;</p>

  <ul>
    <li class="fragment">web browsers and developers need something stable to code against!</li>
    <li class="fragment">ensure operability among different browsers, such as desktop, and mobile browsers</li>
  </ul>
</section>

<section>
  <h2 id="so-what-is-html5-exactly">So, What is HTML5, Exactly</h2>

  <p><strong>HTML5</strong> is the newest version of HTML, which includes new elements, attributes and behaviors. It introduces changes and features in:</p>

  <ul>
    <li>actual markup</li>
    <li>scripting APIs</li>
    <li>error handling / graceful degradation</li>
  </ul>

</section>
<section>
  <h2 id="html5-and-markup-improvements">HTML5 and Markup Improvements</h2>

  <p>HTML5 introduces elements and attributes that reflect typical components of modern web sites:</p>

  <ul>
    <li>adds new semantic elements, such as <code>video</code>, <code>nav</code>, etc.</li>
    <li>adds additional attributes, such as new input types - <code>number</code>, <code>range</code>, <code>date</code>, etc.</li>
    <li>removes purely presentational elements, such as <code>font</code> and <code>center</code></li>
    <li>simplifies some markup, such as the introductory doctype line, which is now merely <code>&lt;!doctype html&gt;</code></li>
    <li>(this doctype tells browsers to render the document based on a standards compliant mode)</li>
  </ul>
</section>

<section>
  <h2 id="html5-and-new-scripting-apis">HTML5 and New Scripting APIs</h2>

  <p>HTML5 also specifies new scripting APIs for JavaScript:</p>

  <ul>
    <li>canvas element for 2D drawing</li>
    <li>browser history management</li>
    <li>offline web applications</li>
    <li>drag and drop support</li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/HTML5">and</a> <a href="http://en.wikipedia.org/wiki/HTML5#New_APIs">others</a></li>
  </ul>
</section>

<section>
  <h2 id="a-reminder-about-doctype">A Reminder About Doctype</h2>

  <p><strong>To indicate that your page uses HTML5, use the following doctype declaration</strong>:</p>

  <pre><code data-trim="" contenteditable="">
&lt;!DOCTYPE html&gt;
</code></pre>

  <p>This doctype:</p>

  <ul>
    <li>this will force most browsers into standards mode</li>
    <li>&#8230;even ones that don&#39;t support HTML5</li>
    <li>which means that they&#39;ll handle the long established parts of HTML5</li>
    <li>but ignore the newer features gracefully</li>
  </ul>
</section>

<section>
  <h2 id="rendering-an-html-page">Rendering an HTML Page</h2>

  <p><strong>What are some steps that your browser must perform to get from a URL to a rendered page?</strong> &#8594;</p>

  <ul class="fragment">
    <li>download the page (the <em>actual</em> HTML)</li>
    <li>parse the HTML</li>
    <li>download any additional resources, such as scripts and CSS</li>
    <li>layout the page</li>
    <li><em>paint</em> the page onto the screen</li>
    <li>&#8230;it&#39;s more complicated than this, of course</li>
    <li><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm#Main_flow_examples">check out this article on how Webkit (Safari and Chrome&#39;s rendering engine) and Gecko (the rendering engine for FireFox) work</a>)</li>
  </ul>
</section>

<section>
  <h2 id="a-few-notes-about-parsing-html">A Few Notes About Parsing HTML</h2>

  <p>When working through HTML, if the parser encounters JavaScript (whether inline, in the page or external):</p>

  <ul>
    <li>it will stop parsing the HTML (dealing with scripts <em>blocks</em> the HTML parsing process)</li>
    <li>it&#39;ll download the script (if applicable)</li>
    <li>&#8230;then run the script</li>
    <li>and finally, go back to parsing the document</li>
  </ul>

  <p><br />
<strong>Why do you think document parsing stops in order to run scripts?</strong> &#8594;</p>

  <p class="fragment">Some scripts will actually change elements on the page!</p>
</section>
<section>
  <h2 id="fun-with-malformed-markup">Fun with Malformed Markup</h2>

  <p>For each of the code snippets below, <strong>guess what markup the browser actually uses (that is, how does it interpret the malformed markup)</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
No tags surrounding me!
</code></pre>

  <p class="fragment"><code>html</code>, <code>head</code>, and <code>body</code> tags are inserted</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
&lt;html&gt;
&lt;body&gt;
		Where's my close body?
&lt;/html&gt;
</code></pre>

  <p class="fragment"><code>body</code> is automatically closed</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
&lt;html&gt;&lt;body&gt; Some nested forms....
	&lt;form method="POST"&gt;
	&lt;form method="GET"&gt;
	&lt;/form&gt;
&lt;/form&gt;
&lt;/body&gt; &lt;/html&gt;
</code></pre>

  <p class="fragment">The second nested form element is removed.</p>
</section>
<section>
  <h2 id="dealing-with-bad-markup">Dealing with Bad Markup</h2>

  <p>Browsers are extremely forgiving when it comes to markup:</p>

  <ul>
    <li>for example, Chrome allows the <a href="http://taligarsiel.com/Projects/howbrowserswork1.htm#Browsers_error_tolerance">errors listed in this article</a> (some of which we saw in the previous slide).</li>
    <li>it may seem like these are arbitrary workarounds</li>
    <li>&#8230;but the way that browsers deal with malformed markup is surprisingly consistent.</li>
  </ul>
</section>

<section>
  <h2 id="javascript-on-the-client-side">JavaScript on the Client Side</h2>

  <p>In order to use JavaScript on the client side, you can use script tags:</p>

  <pre><code data-trim="" contenteditable="">
&lt;script src="main.js"&gt; &lt;/script&gt;
</code></pre>

  <p>Note that:</p>

  <ul>
    <li>in HTML5, you can omit the type attribute; text/javascript is assumed</li>
    <li>the <code>script</code> element requires a closing tag</li>
  </ul>
</section>
<section>
  <h2 id="script-tags-javascript-in-attributes">Script Tags, JavaScript in Attributes</h2>

  <p>You can specify an external script by using the src attribute in the <code>script</code> tag</p>

  <pre><code data-trim="" contenteditable="">
&lt;script src="main.js"&gt; &lt;/script&gt;
</code></pre>

  <p>Or you can write the script inline, within the script tags itself</p>
  <pre><code data-trim="" contenteditable="">
&lt;script&gt; 
var x = 10;
alert(x);
&lt;/script&gt;
</code></pre>

  <p>And finally, you can have JavaScript in an element&#39;s attributes:</p>

  <pre><code data-trim="" contenteditable="">
&lt;button onclick="alert('hello!');&gt;Say hello&lt;/button&gt;
</code></pre>
</section>
<section>
  <h2 id="best-practice-for-javascript-on-the-frontend">Best Practice for JavaScript on the Frontend</h2>

  <p><strong>Which of the methods in the previous slide:</strong></p>

  <ul>
    <li>external JavaScript file</li>
    <li>JavaScript between script tags</li>
    <li>JavaScript as an element&#39;s  attribute</li>
  </ul>

  <p><br />
<strong>do you think is the recommended method for integrating JavaScript code and why?</strong> &#8594;</p>

</section>
<section>
  <h2 id="using-external-javascript">Using External JavaScript</h2>

  <p>The most commonly accepted best practice for integrating JavaScript is using external JavaScript files. <strong>This is because external JavaScript files</strong> &#8594;</p>

  <ul>
    <li class="fragment">helps separate content and style from functionality</li>
    <li class="fragment">encourage code reuse</li>
    <li class="fragment">allows for caching of often used code resources</li>
  </ul>

  <p class="fragment"><br />
What may be some reasons to use inline JavaScript (JavaScript code embedded directly into a page using script tags or as HTML attributes).</p>

  <ul>
    <li class="fragment">simplicity of development / faster prototyping</li>
    <li class="fragment">reduce the total number of requests made</li>
  </ul>
</section>

<section>
  <h2 id="where-to-include-javascript">Where to Include JavaScript?</h2>

  <p>Ok, so we know we what external JavaScript files, <strong>but where do we put the actual script tags? In the head? The body? In either case, at the top, bottom or middle? Why?</strong> &#8594;</p>

  <p class="fragment">We&#39;ll generally include JavaScript at the bottom of the body tag.</p>

  <ul class="fragment">
    <li>this prevents the inclusion of scripts from blocking the parsing of the page</li>
    <li>(which in turn, allows most of the page to be rendered before the parser encounters the script tags)</li>
  </ul>
</section>

<section>
  <h2 id="reducing-page-load-time">Reducing Page Load Time</h2>

  <p><strong>What are some other things that we can do with our external JavaScript to make our page load more quickly?</strong> &#8594;</p>

  <ul>
    <li class="fragment">minimize our external JavaScript</li>
    <li class="fragment">compress our external JavaScript</li>
    <li class="fragment">lastly, script tags in HTML5 may have:
      <ul>
        <li class="fragment">an <strong>async</strong> attribute which signals to the browser that the script does not have to be blocking; it can be downloaded asynchronously</li>
        <li class="fragment">a <strong>defer</strong> attribute - tells the browser that the script can be downloaded and run after the page has been parsed</li>
      </ul>
    </li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
&lt;script defer async src="main.js"&gt; &lt;/script&gt;
</code></pre>

</section>

<section>
  <h2 id="javascript-and-the-browser">JavaScript and the Browser</h2>

  <p>As we&#39;ve discussed in the past, JavaScript is based on a standard called <a href="http://www.ecma-international.org/ecma-262/5.1/">ECMAScript</a></p>

  <ul>
    <li class="fragment">as of 2012, <strong>all modern browsers fully support ECMAScript 5</strong></li>
    <li class="fragment">many browsers already support the <strong>majority of features of ECMAScript 6</strong> (ES6, ES2015, etc.) &#8230; like:
      <ul>
        <li class="fragment">additions to the standard library (for example, adding  Array methods like find() and fill())</li>
        <li class="fragment">new objects, such as Set and Map</li>
        <li class="fragment">syntactic sugar (for example class style definitions for inheritance, <em>fat arrow</em> anonymous functions)</li>
        <li class="fragment">default parameters for functions (like Python keyword arguments)</li>
        <li class="fragment"><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">and others</a></li>
      </ul>
    </li>
    <li class="fragment">older browsers support at least ECMAScript 3</li>
  </ul>
</section>

<section>
  <h2 id="what-does-ecmascript-define">What Does ECMAScript Define?</h2>

  <ul>
    <li>the language&#39;s type system (Number, String, etc.)</li>
    <li>language syntax (parsing rules, keywords, control flow)</li>
    <li>error handling mechanisms (throw, try/catch)</li>
    <li>built in objects / standard library (Array methods, JSON object, etc.)</li>
    <li>strict mode</li>
  </ul>

</section>

<section>
  <h2 id="youre-lucky">You&#39;re Lucky</h2>

  <p>Consider yourself lucky to be developing for the web at a time when <strong>browsers conforming to standards</strong> has become the <strong>norm</strong>.</p>

  <ul class="fragment">
    <li>while there are still differences between browsers and how they render pages</li>
    <li>it is much more pleasant to develop for the front-end on the web today than it was than just a few years ago</li>
    <li>(well, with the exception of JavaScript fatigue)</li>
    <li>the latest versions of most mainstream browsers behave surprisingly uniformly</li>
  </ul>
</section>
:ET