I"Í<section class="intro-slide">
  <h1 id="events-revisited">Events Revisited</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="a-clicked-button">A Clicked Button</h2>

  <p>Our textbook sets up the following scenario&#8230;</p>

  <ul>
    <li>imagine that you&#39;re working with some user interface library</li>
    <li>&#8230; that has a button that contains some state - whether it has been clicked or not</li>
    <li>the only way to determine if the button is being pressed is by asking the button for its state</li>
    <li><strong>how can you have an action occur as soon as the button is clicked?</strong> &#8594;</li>
  </ul>

  <p><br />
You&#39;d have to repeatedly <em>ask</em> (read) the button for its state (at a very tiny time interval), and then perform the desired action.</p>

  <ul>
    <li>this approach is called <strong>polling</strong></li>
    <li>it could be a bit resource intensive, as you have to do very often to make the button click seem <em>responsive</em></li>
  </ul>

</section>

<section>
  <h2 id="event-handlers">Event Handlers</h2>

  <p>Another paradigm for dealing with events is to have an API that allows functions to be called as a reaction to an event.</p>

  <p>This is what JavaScript in the browser allows us to do:</p>

  <ul>
    <li>register a function as a <strong>handler</strong> for a specific event</li>
    <li>the function is called when that event occurs</li>
    <li>this is done through a method called <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a></li>
  </ul>

</section>

<section>
  <h2 id="addeventlistener">addEventListener</h2>

  <p>Hey&#8230; <strong>where does this method come from&#8230; what kind of object can you call it on (let&#39;s try it out)?</strong> &#8594;</p>

  <ul>
    <li>document.addEventListener</li>
    <li>document.body.addEventListener</li>
    <li>document.getElementsByTagName(&#39;div&#39;)[0].addEventListener</li>
  </ul>

  <p><br /></p>

  <p class="fragment">Remember that <strong>Node</strong> objects have a prototype of <strong>EventTarget</strong>&#8230; and all elements are just nodes in the DOM</p>

  <pre><code data-trim="" contenteditable="">
var ele = document.getElementsByTagName('div')[0];
while (Object.getPrototypeOf(ele)) { 
	console.log(Object.getPrototypeOf(ele)); 
	ele = Object.getPrototypeOf(ele);
}
</code></pre>
</section>

<section>
  <h2 id="addeventlistener-example">addEventListener Example</h2>

  <p>So&#8230; that means every DOM element has <strong>addEventListener</strong>, and you can use it to listen for events on that specific element.</p>

  <p>For example:</p>

  <pre><code data-trim="" contenteditable="">
var b = document.querySelector(&#x27;button&#x27;);
b.addEventListener(&#x27;click&#x27;, sayHello);
function sayHello(evt){
  console.log(&#x27;hello&#x27;);
}
</code></pre>
</section>

<section>
  <h2 id="addeventlistener-details">addEventListener Details</h2>

  <p>So&#8230; some things to note about <strong>addEventListener</strong> &#8230;</p>

  <ul>
    <li>it takes two arguments, an event (as a string), and a callback</li>
    <li>the <strong>event name</strong> is a string
      <ul>
        <li>there are <a href="https://developer.mozilla.org/en-US/docs/Web/Events">lots of standard events</a></li>
        <li>we&#39;re interested in <code>click</code> and <code>DOMContentLoaded</code></li>
      </ul>
    </li>
    <li>the <strong>callback</strong> is a function with an optional parameter - the event object that represents the event
      <ul>
        <li>the event object may have information such as which mouse button was clicked</li>
        <li>what its x and y value are</li>
        <li>the unicode code point of the key pressed</li>
        <li>etc.</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="about-the-event-listeners-callback">About the Event Listener&#39;s Callback</h2>

  <p><strong>A few more details about the callback</strong> &#8594;</p>

  <ul>
    <li>any function will do - named or anonymous, but you have to have a named function to remove it with <code>removeEventListener</code>
      <ul>
        <li><code>removeEventListener('eventName', nameOfCallback);</code></li>
      </ul>
    </li>
    <li>also, within the function <strong>this</strong> is set to the element the that event listener was added to</li>
    <li><strong>let&#39;s see all of this in action</strong> &#8594;</li>
  </ul>

</section>

<section>
  <h2 id="event-object-this-and-removing-event-handlers">Event Object, this and Removing Event Handlers</h2>

  <p>Using the same example&#8230;. <strong>let&#39;s remove the event listener on click so that it only says hello on the first click&#8230; and does nothing afterwards. We&#39;ll also log out some event object properties</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
var b = document.querySelector(&#x27;button&#x27;);
b.addEventListener(&#x27;click&#x27;, sayHello);
function sayHello(evt){
  console.log(&#x27;hello&#x27;);
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
console.log(evt.x, evt.y, evt.which);
this.removeEventListener('click', sayHello);
</code></pre>
</section>

<section>
  <h2 id="bubbling--propagation">Bubbling / Propagation</h2>

  <p>So&#8230; what happens if you have two elements nested within each other, and both have event listeners?</p>

  <ul>
    <li class="fragment">the event handler of the more specific element (the innermost element) gets called first</li>
    <li class="fragment">&#8230;then the element bubbles up through the element&#39;s parent elements, triggering their event handlers as well</li>
  </ul>
</section>

<section>
  <h2 id="bubbling--propagation-example">Bubbling / Propagation Example</h2>

  <p><strong>Let&#39;s try nesting two elements (maybe a button in an article), add adding event listeners to both.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&#x3C;article&#x3E;
  &#x3C;h1&#x3E;About Events&#x3C;/h1&#x3E;
  &#x3C;button&#x3E;Click to Say Hello&#x3C;/button&#x3E;
&#x3C;/article&#x3E;

// in js
var a = document.querySelector(&#x27;article&#x27;);  
var b = document.querySelector(&#x27;button&#x27;);
a.addEventListener(&#x27;click&#x27;, function(evt) {
  console.log(&#x27;article!&#x27;);  
});
b.addEventListener(&#x27;click&#x27;, function(evt) {
  console.log(&#x27;button!&#x27;);
});
</code></pre>
</section>

<section>
  <h2 id="preventing-propagation">Preventing Propagation</h2>

  <p>You can also prevent events from bubbling up by calling <code>stopPropagation()</code> on the event object. <strong>Let&#39;s try it with the previous example to stop the paragraph event listener from being triggered.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
// modify your previous button event listener
b.addEventListener('click', function(evt) {
  console.log('button!');
  // the event won't bubble up!
  evt.stopPropagation();
});
</code></pre>
</section>

<section>
  <h2 id="preventing-default-event-actions">Preventing Default Event Actions</h2>

  <p>Most events have default actions on them:</p>

  <ul>
    <li>clicking an input of type submit will GET or POST a form</li>
    <li>clicking on a link will take you to that link</li>
  </ul>

  <p><br />
But&#8230; <strong>what if the default action was not your intention?</strong> &#8594;</p>

  <p>Use the <strong>preventDefault()</strong> method on the event object!</p>
</section>

<section>
  <h2 id="preventdefault-example">preventDefault Example</h2>

  <p><strong>Create a link&#8230; but add an event listener to stop the browser from going to the page linked to&#8230;</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&#x3C;a href=&#x22;http://nyu.edu&#x22;&#x3E;a link to nyu&#x3C;/a&#x3E;

// in js
var a = document.querySelector(&#x27;a&#x27;);  

a.addEventListener(&#x27;click&#x27;, function(evt) {
  console.log(&#x27;link clicked!&#x27;);  
  evt.preventDefault();
});
</code></pre>

</section>
:ET