I"„<div class="panel panel-default">
	<div class="panel-heading">socket.io Lab</div>
	<div class="panel-body">

    <h1 id="socket-io-lab---emoji-racer-10-points-for-in-class-projectquiz-grade">Socket IO Lab - Emoji Racer (10 points for In-Class Project/Quiz Grade)</h1>

    <h2 id="submission-process">Submission Process</h2>

    <ul>
      <li>work in groups of 2 or 3</li>
      <li><strong>submit using <a href="../#class24">the form for your section on the schedule</a></strong></li>
      <li><strong>each person on the team should submit their own individual form</strong></li>
    </ul>

    <h2 id="scoring">Scoring</h2>

    <ul>
      <li><strong>+7 points</strong> for showing up and submitting form</li>
      <li><strong>+2 points</strong> form submitted with a <em>reasonable</em> amount of <em>valid looking</em> code</li>
      <li><strong>+1 point</strong> code deployed on glitch.com (kind of optional, since you basically get 90% for just submitting a form with some code!)</li>
    </ul>

    <h2 id="overview">Overview</h2>

    <h3 id="goals--topics-covered">Goals / Topics Covered</h3>

    <p>You&#39;ll be using the following concepts:</p>

    <ul>
      <li>socket.io</li>
      <li>some simple dom manipulation</li>
      <li>absolute or fixed positioning</li>
    </ul>

    <h3 id="description">Description</h3>

    <p>Make a real time web app that:</p>

    <ol>
      <li>displays two emoji</li>
      <li>displays two buttons</li>
      <li>displays a finish line</li>
      <li>clicking on one button moves one emoji</li>
      <li>everyone connected to the game can click either button</li>
      <li>everyone connected to the game can see the emoji move in real time</li>
      <li>when someone new connects to the game, the should see the current position of both emoji</li>
      <li>(optional) end game and show message when one emoji crosses the finish line</li>
    </ol>

    <p><img src="../resources/img/hw09-screen.gif" alt="example emoji racer animation" /></p>

    <h2 id="instructions">Instructions</h2>

    <h3 id="setup">Setup</h3>

    <p>Use the <em>one-page</em> version of the slides to guide you through socket.io:</p>

    <p><a href="https://cs.nyu.edu/courses/fall18/CSCI-UA.0480-003/_site/slides/23/socketio.html?print-pdf">https://cs.nyu.edu/courses/fall18/CSCI-UA.0480-003/_site/slides/23/socketio.html?print-pdf</a></p>

    <ol>
      <li>create a directory to store your project</li>
      <li>create your <code class="highlighter-rouge">package.json</code> and install these packages:
        <pre><code data-trim="" contenteditable="">
npm init
npm install --save express socket.io
</code></pre>
      </li>
      <li>use this boilerplate code for the server (perhaps in server.js or app.js):
        <pre><code data-trim="" contenteditable="">
const express = require('express');
const app = express();
const server = require('http').Server(app);
const io = require('socket.io')(server);
app.use(express.static('public'));
// server code goes here!
// first listen for connection using io.on
// then... within callback, use socket.on, socket.emit, socket.broadcast, etc.
// NOTE THAT WE ARE LISTENING WITH server, NOT app!
server.listen(3000);
</code></pre>
      </li>
      <li>use this boilerplate code for the markup (in <code class="highlighter-rouge">public/index.html</code>):
        <pre><code data-trim="" contenteditable="">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;script src="/socket.io/socket.io.js"&gt;&lt;/script&gt;
&lt;script src="racer.js"&gt;&lt;/script&gt;
&lt;button class="player1Btn"&gt;Move Tears of Joy &amp;rarr;&lt;/button&gt;
&lt;div class="play-area"&gt;
  &lt;div class="racer player1"&gt;&amp;#128514;&lt;/div&gt;
  &lt;div class="racer player2"&gt;&amp;#128561;&lt;/div&gt;
&lt;/div&gt;
&lt;button class="player2Btn"&gt;Move Face Screaming &amp;rarr;&lt;/button&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
      </li>
      <li>use this boilerplate code for the client (in <code class="highlighter-rouge">public/racer.js</code>):
        <pre><code data-trim="" contenteditable="">
 const socket = io();
</code></pre>
      </li>
    </ol>

    <h2 id="deployment">Deployment</h2>

    <h3 id="deploying-to-glitchcom">Deploying to glitch.com</h3>

    <ol>
      <li><a href="https://glitch.com/edit/">go to glitch.com/edit</a></li>
      <li>modify the existing <code class="highlighter-rouge">package.json</code> so that it has both socket.io and express as requirements (but keep everything else the same)</li>
      <li>add/modify necessary files!
        <ul>
          <li>for example&#8230;</li>
          <li>modify <code class="highlighter-rouge">server.js</code> (make sure you&#39;re listening with server obj)</li>
          <li>add <code class="highlighter-rouge">public/racer.html</code></li>
          <li>change the name of <code class="highlighter-rouge">public/client.js</code> to <code class="highlighter-rouge">public/racer.js</code></li>
          <li>etc.</li>
        </ul>
      </li>
      <li><strong>change the port so that it looks in the env for the port number!</strong>
        <ul>
          <li><code class="highlighter-rouge">server.listen(process.env.PORT);</code></li>
        </ul>
      </li>
      <li>click on the look link&#8230;
        <ul>
          <li>instantly deployed app!</li>
          <li>(click on logs link to see server output)</li>
        </ul>
      </li>
    </ol>

    <div class="hideInner">

      <h2 id="major-hints-click-to-reveal">Major Hints (Click to Reveal)</h2>

      <div class="hidden">

        <h3 id="wait-how-do-i-even">Wait, How Do I Even?</h3>

        <p>Most real-time games work by having the server be the <em>single source of truth</em> for game state (for example, the positions of the emoji).</p>

        <p>An easy way to implement this game is by:</p>

        <ol>
          <li>storing the positions of both emoji on the server (global variables would be sufficient)</li>
          <li>pushing out the exact positions of each emoji to the connected clients
            <ul>
              <li>rather than incrementing the position</li>
              <li>(because it reduces the possibility of the positions becoming out of sync)</li>
            </ul>
          </li>
        </ol>

        <h3 id="dont-feel-like-dealing-with-css-you-can-use-this">Don&#39;t feel like dealing with css? You can use this:</h3>

        <pre><code data-trim="" contenteditable="">
&lt;style type="text/css" media="screen"&gt;

.racer {
  position: absolute;
  left: 0px;
  font-size: 100px;
}

.player1 {
  top: 50px;
}    

.player2 {
  top: 300px
}    

.play-area {
  position: relative;
  width: 800px;
  height: 500px;
  border-right: 3px dashed black;
}

button {
  font-size: 3em;
}
&lt;/style&gt;

</code></pre>

      </div>
      <script>
document.addEventListener('DOMContentLoaded', main);
function main() {
    const divs = document.querySelectorAll('.hideInner');

    function handleClick() {
        this.querySelector('div').classList.toggle('hidden');
    }

    divs.forEach((d) => {
        d.addEventListener('click', handleClick);
    });
}

</script>

      <style>
.hidden {
    display: none;
}
</style>

    </div>
  </div>
</div>
:ET