I"Ïc<section class="intro-slide">
  <h1 id="dom-continued">DOM Continued</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="in-this-set-of-slides">In This Set of Slides&#8230;</h2>

  <ul>
    <li>a brief review of the DOM, moving around, finding elements</li>
    <li>a word on the objects involved</li>
    <li>changing the DOM</li>
    <li>creating new elements</li>
    <li>a peek at events</li>
  </ul>
</section>

<section>
  <h1 id="a-brief-review">A Brief Review</h1>
</section>

<section>
  <h2 id="about-the-dom">About the DOM</h2>

  <p>Sooo&#8230; <strong>describe what the Document Object Model is</strong>: &#8594;</p>

  <ul>
    <li class="fragment">it&#39;s a standard that specifies how an HTML document (or XML, XHTML, SVG, etc.) is represented, interacted with and accessed by objects</li>
    <li class="fragment">it&#39;s separate from a programming language; it&#39;s not tied to JavaScript</li>
    <li class="fragment">the DOM + some programming language&#8230; is our API for programmatically manipulating a web page</li>
    <li class="fragment">the DOM is a fully object-oriented representation of an HTML Document</li>
    <li class="fragment">an HTML document is represented as a tree of node objects</li>
  </ul>
</section>

<section>
  <h2 id="the-dom-and-javascript">The DOM and JavaScript</h2>

  <p><strong>How do we access the dom in JavaScript?</strong> &#8594;</p>

  <p class="fragment">Through the <code>document</code> object. <strong>About the <code>document</code> object</strong>: &#8594;</p>

  <ul class="fragment">
    <li>it serves as an entry point to the DOM</li>
    <li>each page loaded in your browser has its own document object</li>
    <li>any global functionality (document wide functionality) is provided by this object
      <ul>
        <li>the page&#39;s url</li>
        <li>retrieving an element in the document by the element&#39;s id attribute, etc.</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="document-properties">Document Properties</h2>

  <p>We learned a few properties that the <code>document</code> object contains.  <strong>What were they?</strong> &#8594;</p>

  <pre class="fragment"><code class="js" data-trim="" contenteditable="">
// the head and body element of the current document
document.head
document.body

// the document's root element; in an HTML document, 
// the actual html element
document.documentElement 
</code></pre>

  <p class="fragment">You can find a full list of Document properties, such as <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document.URL">URL</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document.images">images</a>, etc. &#8230; <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">here</a>.</p>

  <p class="fragment">(<strong>btw</strong> &#8230; <strong>why not just use <code>document.firstChild</code> instead of <code>document.documentElement</code>?</strong> &#8594;)</p>

  <p class="fragment">There&#39;s probably a <code>doctype</code> element before <code>html</code></p>
</section>

<section>
  <h2 id="traversing-the-dom">Traversing the DOM</h2>

  <p>Speaking of the <code>firstChild</code> property, what other properties are there for navigating the DOM?</p>

  <pre class="fragment"><code class="js" data-trim="" contenteditable="">
// first and last child of current element
firstChild 
lastChild

// an array-like object containing all of the current 
// node's children
childNodes 

// the parent of the current node
parentNode 	

// the previous and next adjacent node
previousSibling 
nextSibling 
</code></pre>
</section>

<section>
  <h2 id="traversing-the-dom-continued">Traversing the DOM Continued</h2>

  <p>Assuming that all of this markup is in the <strong>body</strong>, <strong>how would I get</strong>: &#8594;</p>

  <ul>
    <li>an easy one&#8230; the <code>body</code></li>
    <li>the first <code>div</code> element, with id=&quot;content&quot;</li>
    <li>the first <code>p</code> (paragraph) in the first <code>div</code> element</li>
    <li>the <em>actual</em> text in the first paragraph from above (&quot;One&quot;)</li>
  </ul>

  <p><br /></p>

  <pre><code class="html" data-trim="" contenteditable="">
&lt;body&gt;
&lt;style&gt;#three {color:red;}&lt;/style&gt;
&lt;div id="content"&gt;
    &lt;p&gt;One&lt;/p&gt;
    &lt;p class="cta"&gt;Two&lt;/p&gt;
    &lt;p class="cta" id="three"&gt;Three&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
</code></pre>
</section>

<section>
  <h2 id="traversing-the-dom-potential-solutions">Traversing the DOM Potential Solutions</h2>

  <p>Ugh. That was <em>terrible</em>.</p>

  <ul>
    <li>an easy one&#8230; the <code>body</code>
      <ul>
        <li><code>document.body</code></li>
      </ul>
    </li>
    <li>the first <code>div</code> element, with id=&quot;content&quot;
      <ul>
        <li><code>document.body.firstChild.nextSibling</code></li>
      </ul>
    </li>
    <li>the first <code>p</code> (paragraph) in the first <code>div</code> element
      <ul>
        <li><code class="js">document.body.firstChild.nextSibling.firstChild.nextSibling</code></li>
      </ul>
    </li>
    <li>the <em>actual</em> text in the first paragraph from above (&quot;One&quot;)
      <ul>
        <li><code>document.body.firstChild.nextSibling.firstChild.nextSibling.firstChild</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="whew-that-was-fun-">Whew! That Was Fun (!?)</h2>

  <p><strong>So, besides the tedium, what&#39;s not great about how we retrieved elements?</strong> &#8594;</p>

  <ul class="fragment">
    <li>we have to navigate through text nodes</li>
    <li>we&#39;ve hardcoded paths!
      <ul>
        <li>what if the document changes?</li>
        <li>we have to know about the structure of the document beforehand (what if that structure is dynamic)</li>
      </ul>
    </li>
    <li>it&#39;d be great if we could just find the elements directly rather than traversing the DOM tree</li>
    <li>(we&#39;ll take a look at that later)</li>
  </ul>

</section>

<section>
  <h1 id="lets-take-a-closer-look-at-some-of-the-objects-that-we-retrieved">Let&#39;s Take a Closer Look at Some of the Objects That We Retrieved</h1>
</section>

<section>
  <h2 id="some-documentation">Some Documentation</h2>

  <p>First, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">check out Mozilla Developer Network&#39;s reference</a>:</p>

  <ul>
    <li>it contains an exhaustive list of objects&#8230;</li>
    <li>each object shows
      <ul>
        <li>properties</li>
        <li>methods</li>
        <li><strong>and where they&#39;re inherited from / what interface they&#39;re implementing</strong> &#8594;</li>
      </ul>
    </li>
    <li><strong>let&#39;s take a look at <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document">Document / HTML Document</a> too</strong> &#8594;</li>
  </ul>

</section>

<section>
  <h2 id="introspection-tools-and-getting-to-the-bottom-of-things">Introspection Tools and Getting to the Bottom of Things</h2>

  <p><strong>Let&#39;s see if we can use the following tools to investigate the built-in <code>document</code> object&#8230; and the first <code>div</code></strong> &#8594;</p>

  <ul>
    <li><code>Object.getPrototypeOf</code> - returns the prototype of the object (the next object up in the prototype chain)</li>
    <li><code>someInstance.constructor</code> - the function (the constructor) used to create someInstance</li>
    <li><code>someInstance.constructor.name</code> - the name of the above function</li>
    <li><code>someInstance instanceof obj</code> - determine if someInstance has obj somewhere in its prototype chain</li>
  </ul>

</section>
<section>
  <h2 id="investigating-the-built-in-document-object">Investigating the Built-In Document Object</h2>

  <p>We can walk up the prototype chain by continuously calling <code>Object.getPrototypeOf</code>. <strong>A bit ridiculous, but&#8230;</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
Object.getPrototypeOf(document);
&gt; HTMLDocument
</code></pre>
  <pre><code data-trim="" contenteditable="">
Object.getPrototypeOf(document);
Object.getPrototypeOf(Object.getPrototypeOf(document));
&gt; Document
</code></pre>
  <pre><code data-trim="" contenteditable="">
Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(document)));
&gt; Node 
</code></pre>
  <pre><code data-trim="" contenteditable="">
Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(
Object.getPrototypeOf(document))));
&gt; EventTarget 
</code></pre>
  <pre><code data-trim="" contenteditable="">
Object.getPrototypeOf(Object.getPrototypeOf(Object.getPrototypeOf(
Object.getPrototypeOf(Object.getPrototypeOf(document)))));
&gt; Object {}
</code></pre>
</section>

<section>
  <h2 id="a-div-element">A Div Element</h2>

  <p><strong>Let&#39;s try doing the same with the first <code>div</code> element.</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
// first, extract the div element
var ele = document.body.childNodes[1];
</code></pre>

  <p><strong>Then, calling Object.getPrototypeOf a few times, we get the following types.</strong> &#8594;</p>

  <ul class="fragment">
    <li>HTMLDivElement</li>
    <li>HTMLElement</li>
    <li>Element</li>
    <li>Node</li>
  </ul>
</section>

<section>
  <h2 id="node-objects">Node Objects</h2>

  <p><strong>So&#8230; it looks like <em>every</em> object we&#39;ve seen so far inherits from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node">Node</a>.</strong> &#8594;</p>

  <ul>
    <li>we know that there are a few node types (in fact, because everything inherits from Node, we can check out the nodeType property). <strong>What were a couple that we saw?</strong> &#8594;</li>
    <li class="fragment">element, text, comment (there are others)</li>
    <li class="fragment">each nodeType is represented by a class that <em>ultimately</em> descends from Node</li>
    <li class="fragment">we&#39;ll mostly encounter two node types, elements and text, which are represented by the following objects
      <ul>
        <li class="fragment"><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement"><code>HTMLElement</code></a> which descends from <a href="https://developer.mozilla.org/en-US/docs/Web/API/Element"><code>Element</code></a></li>
        <li class="fragment"><a href="https://developer.mozilla.org/en-US/docs/Web/API/Text"><code>Text</code></a> which descends from <a href="https://developer.mozilla.org/en-US/docs/Web/API/CharacterData"><code>CharacterData</code></a></li>
      </ul>
    </li>
  </ul>

  <p class="fragment"><br />
<a href="http://web.stanford.edu/class/cs98si/slides/the-document-object-model.html">Check out this (slightly out-of-date &#8211; Attr will no longer descend from Node) class diagram</a></p>
</section>

<section>
  <h2 id="event-target">Event Target?</h2>

  <p>So&#8230; does Node inherit from anything?</p>

  <p><strong>YES</strong></p>

  <ul>
    <li>it inherits from <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget">EventTarget</a></li>
    <li>EventTarget is an interface implemented by objects that can receive / listen for events</li>
    <li>we&#39;ll see listening for events later
      <ul>
        <li>document loaded</li>
        <li>click</li>
        <li>&#8230;<a href="https://developer.mozilla.org/en-US/docs/Web/Events">and many others</a></li>
      </ul>
    </li>
  </ul>

</section>

<section>
  <h2 id="some-examples">Some Examples&#8230;</h2>

  <p>Things can get convoluted quickly as many objects also implement multiple interfaces, which is why <code>getPrototypeOf</code>, <code>instanceof</code>, and <code>constructor.name</code> come in handy.</p>

  <p><strong>Let&#39;s see what we can do with all of those.</strong></p>

  <pre><code data-trim="" contenteditable="">
var p = content.getElementsByTagName('p')[1];
p.constructor.name;
p instanceof HTMLParagraphElement
p instanceof HTMLDivElement
p instanceof Text
p instanceof Element
</code></pre>
</section>

<section>
  <h2 id="finding-elements">Finding Elements</h2>

  <p>Great&#8230; so back to the original problem. <strong>How do we find elements directly</strong>? &#8594;</p>

  <ul class="fragment">
    <li><strong><code>document.getElementById</code></strong> - returns node with specified id attribute</li>
    <li><strong><code>someNode.getElementsByClassName</code></strong> - returns nodes with specified class attribute; searches only within element called on</li>
    <li><strong><code>someNode.getElementsByTagName</code></strong> - returns nodes with specified tag name ; searches within element that it was was called on</li>
  </ul>
</section>

<section>
  <h1 id="finding-reading-and-modifying-elements">Finding, Reading and Modifying Elements</h1>
</section>

<section>
  <h2 id="finding-elements-1"><em>Finding</em> Elements</h2>

  <p><strong>Using following code&#8230;</strong>  &#8594;</p>

  <pre><code class="html" data-trim="" contenteditable="">
&lt;body&gt;
&lt;style&gt;#three {color:red;}&lt;/style&gt;
&lt;div id="content"&gt;
    &lt;p&gt;One&lt;/p&gt;
    &lt;p class="cta"&gt;Two&lt;/p&gt;
    &lt;p class="cta" id="three"&gt;Three&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
</code></pre>

  <ul>
    <li>find the first <code>div</code> element, with id=&quot;content&quot;
      <ul>
        <li class="fragment"><code>document.getElementById('content')</code></li>
      </ul>
    </li>
    <li class="fragment">find the first <code>p</code> (paragraph) in the first <code>div</code> element
      <ul>
        <li class="fragment"><code>document.getElementById('content').childNodes[0]</code></li>
      </ul>
    </li>
    <li class="fragment">&#8230;the <em>actual</em> text in the first paragraph from above (&quot;One&quot;)
      <ul>
        <li class="fragment"><code>document.getElementsByTagName('p')[0].firstChild</code></li>
      </ul>
    </li>
    <li class="fragment">&#8230;only the <code>p</code> (paragraph) tags that have a class=&quot;cta&quot; in the first <code>div</code> element
      <ul>
        <li class="fragment"><code>div.getElementsByClassName('cta')</code></li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="modifying-the-dom">Modifying the DOM</h2>

  <p><strong>Nodes</strong> have a few methods for adding/removing child nodes.</p>

  <ul>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.removeChild"><code>.removeChild(childNodeToRemove)</code></a> - removes a child node from the DOM and returns it
      <ul>
        <li>returns removed node</li>
        <li>node still exists in memory, but is no longer in DOM tree</li>
      </ul>
    </li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild"><code>.appendChild(nodeToAppend)</code></a> - puts node at end of list of this node&#39;s child nodes
      <ul>
        <li>returns appended node</li>
      </ul>
    </li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.insertBefore"><code>.insertBefore(nodeToInsert, beforeThisNode)</code></a> - inserts node before the node given as child of current node
      <ul>
        <li>returns the inserted node</li>
      </ul>
    </li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.replaceChild"><code>.replaceChild(nodeToInsert, nodeToReplace)</code></a> - replaces a child of the current node with the nodeToInsert
      <ul>
        <li>returns the replaced node</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="swapping-paragraphs">Swapping Paragraphs</h2>

  <p>Nodes can only exist in one place at a time&#8230; so if you take an existing node and pass it to insertBefore, the node will be moved.</p>

  <p><strong>Using the same markup as before, move the 3rd paragraph between the first two.</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
content.insertBefore(paragraphs[2], paragraphs[1]);
</code></pre>

  <p class="fragment"><strong>Now, instead of just inserting before, let&#39;s replace paragraph &quot;Two&quot; with paragraph &quot;Three&quot;:</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
content.replaceChild(paragraphs[2], paragraphs[1]);
</code></pre>
</section>

<section>
  <h2 id="live-data-structures"><em>Live</em> Data Structures</h2>

  <p>Back to our favorite fragment. <strong>How do I remove every paragraph element from this div?</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
&lt;style&gt;#three {color:red;}&lt;/style&gt;
&lt;div id="content"&gt;
    &lt;p&gt;One&lt;/p&gt;
    &lt;p class="cta"&gt;Two&lt;/p&gt;
    &lt;p class="cta" id="three"&gt;Three&lt;/p&gt;
&lt;/div&gt;
</code></pre>
  <pre class="fragment"><code data-trim="" contenteditable="">
var div = document.getElementById('content');
var p = div.getElementsByTagName('p');

for(var i = 0; i &lt; p.length; i++) {
	div.removeChild(p[i]);
}
</code></pre>

  <p class="fragment"><strong>Hey wait&#8230; what?</strong> &#8594;</p>
</section>

<section>
  <h2 id="live-data-structures-continued"><em>Live</em> Data Structures Continued</h2>

  <p>The elements returned by the methods and properties that we&#39;ve seen are <strong>live</strong>. That is, they change as the document changes in real time!</p>

  <p><strong>Let&#39;s add one line to see what&#39;s actually going on.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">

var div = document.getElementById('content');
var p = div.getElementsByTagName('p');

for(var i = 0; i &lt; p.length; i++) {
	// watch the length decrease
	console.log(i, "length", p.length);
	div.removeChild(p[i]);
}
</code></pre>
</section>

<section>
  <h2 id="i-fear-change">I Fear Change</h2>

  <p><strong>What are some ways to work around this so that we can delete the list of elements?</strong> &#8594;</p>

  <ul class="fragment">
    <li>start from the end of the Array</li>
    <li>a while loop:
      <ul>
        <li>as long as the parent has a firstChild</li>
        <li>remove that firstChild from the DOM</li>
      </ul>
    </li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
while (div.firstChild) {
  div.removeChild(div.firstChild);
}
</code></pre>

</section>

<section>
  <h2 id="aaand-a-tricky-way">Aaand, a Tricky Way</h2>

  <p><strong>Take a snapshot</strong> &#8594;</p>

  <ul class="fragment">
    <li>putting together a bunch of things we learned from a while ago</li>
    <li>slice to make a copy
      <ul>
        <li>but a nodeList and HTMLCollection aren&#39;t really Arrays, so (???)</li>
        <li>use call to execute an Array&#39;s slice on our list of elements (!?)</li>
        <li>slice copies objects by reference</li>
      </ul>
    </li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
// make a copy
var copy = Array.prototype.slice.call(p, 0)

// remove without having to worry about the list 
// shrinking while you iterate

copy.forEach(function(ele) {
	div.removeChild(ele)
});
</code></pre>
</section>

<section>
  <h2 id="reading-and-modifying-a-nodes-content">Reading and Modifying a Node&#39;s Content</h2>

  <p>The following <strong>Node</strong> property and methods allow you to read and / or modify that Node&#39;s content:</p>

  <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.nodeValue">nodeValue</a> - represents content of text and comment nodes, null otherwise</p>

  <pre><code data-trim="" contenteditable="">
// assuming we have an element_node, and we know its first child is a text element
console.log(node.firstChild.nodeValue);
node.firstChild.nodeValue = 'new text';
</code></pre>

  <p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node.textContent">textContent</a> - the text content of the node and all of its descendants (!)</p>

  <pre><code data-trim="" contenteditable="">
var text = element.textContent; 
element.textContent = "this is some sample text";
</code></pre>

  <p>There are other properties similar to <code>textContent</code>, such as <code>innerHTML</code> (which includes markup) and <code>innerText</code> which is aware of styling (for example, ignores hidden elements).</p>
</section>

<section>
  <h2 id="node-content-continued">Node Content Continued</h2>

  <p><strong>What do the following lines of code represent / do based on the markup below?</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
&lt;style&gt;#three {color:red;}&lt;/style&gt;
&lt;div id="content"&gt;
    &lt;p&gt;One&lt;/p&gt;
    &lt;p class="cta"&gt;Two&lt;/p&gt;
    &lt;p class="cta" id="three"&gt;Three&lt;/p&gt;
&lt;/div&gt;
</code></pre>

  <pre><code data-trim="" contenteditable="">
document.body.textContent
document.body.innerHTML
document.getElementsByTagName('p')[0].firstChild.nodeValue
document.getElementsByTagName('p')[0].firstChild.nodeValue = 'Surprised?'
document.getElementsByTagName('p')[0].textContent = 'Maybe not.'
</code></pre>
</section>
<section>
  <h2 id="creating-nodes">Creating Nodes</h2>

  <p>The following methods actually create new Nodes!</p>

  <p><strong>Note&#8230; that they&#39;re called on the built-in <code>document</code> object, not on <code>Node</code> or an instance of <code>node</code>.</strong></p>

  <ul>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/document.createTextNode"><code>document.createTextNode(text)</code></a></li>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/document.createElement"><code>document.createElement(elementName)</code></a></li>
  </ul>
</section>

<section>
  <h2 id="replacing-all-paragraphs-with-text">Replacing All Paragraphs With Text</h2>

  <p>Replace each paragraph element with text that says &quot;this was a paragraph&quot;.</p>
  <pre><code data-trim="" contenteditable="">
&lt;div id="content"&gt;
    &lt;p&gt;One&lt;/p&gt;
    &lt;p class="cta"&gt;Two&lt;/p&gt;
    &lt;p class="cta" id="three"&gt;Three&lt;/p&gt;
&lt;/div&gt;
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
var div = document.getElementById('content');
var p = div.getElementsByTagName('p');

for(var i = p.length - 1; i &gt;= 0; i--) {
	div.replaceChild( 
		document.createTextNode("this was a paragraph"),
		p[i]);
}
</code></pre>
</section>

<section>
  <h2 id="now-lets-try-adding-some-elements">Now Let&#39;s Try Adding Some Elements</h2>

  <p><strong>Instead of just a text node, replace each paragraph with an <code>h1</code> (a header). The text should remain the same.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
var div = document.getElementById('content');
var p = div.getElementsByTagName('p');

for(var i = p.length - 1; i &gt;= 0; i--) {
	var header = document.createElement("h1");
	var content = document.createTextNode(p[i].textContent);
	header.appendChild(content);
	div.replaceChild(header, p[i]);
}
</code></pre>
</section>

<section>
  <h2 id="convenience">Convenience</h2>

  <p>Creating each element and adding a child was a bit of a drag&#8230;</p>

  <p><strong>The book uses a convenience method to add an element and an arbitrary number of child elements.</strong></p>

  <p>It acts like this: <code>elt(type, [, child1, ..., child2);</code> &#8594;</p>

  <ul>
    <li>creates an element of type <code>type</code></li>
    <li>an optional list of Elements follows</li>
    <li>each element will be added as a child</li>
    <li>if the element is just a string, create and add a text node</li>
    <li><code>elt('div', 'hi', elt('h2', 'hello'), elt('p', 'how are you?'))</code></li>
    <li>&#8230; creates a div, with &#39;hi&#39;,  an h2, and a p nested within it</li>
  </ul>

  <p><br />
<strong>How would we create this?</strong> &#8594;</p>

</section>

<section>
  <h2 id="elt-implementation">elt Implementation</h2>

  <p><strong>A potential implementation&#8230;</strong> &#8594;</p>

  <ul>
    <li>uses the arguments object</li>
    <li>checks typeof to determine whether or not to create a text node</li>
  </ul>
  <pre><code data-trim="" contenteditable="">
function elt(type) {
	var ele = document.createElement(type);
	// start at 1 or else we'll get the type argument!
	for (var i = 1; i &lt; arguments.length; i++) {
		var child = arguments[i];
		if (typeof child === "string") {
			child = document.createTextNode(child);
		}
		ele.appendChild(child);
	}
	return ele;
}
var ul = elt('ul', elt('li', 'item one'), elt('li', 'item two'));
document.body.appendChild(ul);
</code></pre>
</section>

<section>
  <h2 id="accessing-element-attributes">Accessing Element Attributes</h2>

  <p>Some elements have accessible attributes, such as the <code>href</code> of an anchor tag or the <code>src</code> of an image (an <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement">HTMLImageElement</a>).</p>

  <p><strong>Let&#39;s change the image of a jackfruit in the following markup.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;body&gt;
.
.
&lt;img src="https://openclipart.org/image/400px/svg_to_png/203184/jackfruit_monsterbrain.png"&gt;
&lt;/body&gt;
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
document.getElementsByTagName('img')[0].src = 
'https://openclipart.org/image/400px/svg_to_png/194496/Clipart-Search-2.3-Android-App-Released.png';
</code></pre>
</section>
:ET