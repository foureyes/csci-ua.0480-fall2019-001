I"ú:<section class="intro-slide">
  <h1 id="events">Events</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="a-clicked-button">A Clicked Button</h2>

  <p>Our textbook, Eloquent JavaScript, sets up the following scenario&#8230;</p>

  <ul>
    <li>imagine that you&#39;re working with some user interface library</li>
    <li>&#8230; that has a button that contains some state - whether it has been clicked or not</li>
    <li>the only way to determine if the button is being pressed is by asking the button for its state</li>
    <li><strong>how can you have an action occur as soon as the button is clicked?</strong> &#8594;</li>
  </ul>

  <p class="fragment"><br />
You&#39;d have to repeatedly <em>ask</em> (read) the button for its state (at a very tiny time interval), and then perform the desired action.</p>

  <ul class="fragment">
    <li>this approach is called <strong>polling</strong></li>
    <li>it could be a bit resource intensive, as you have to do very often to make the button click seem <em>responsive</em></li>
  </ul>

</section>

<section>
  <h2 id="event-handlers">Event Handlers</h2>

  <p><strong>Another paradigm for dealing with events is to have an API that allows functions to be called as a reaction to an event.</strong></p>

  <p>The API that JavaScript in the browser offers allows us to:</p>

  <ol>
    <li>register a function as a <strong>handler</strong> for a specific event</li>
    <li>have that function called when the event occurs</li>
  </ol>

  <p><br /></p>

  <p><strong>All of this is done through a method called <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener">addEventListener</a></strong> &#8594;</p>

</section>

<section>
  <h2 id="addeventlistener">addEventListener</h2>

  <p><strong>Where does this <code class="highlighter-rouge">addEventListsener</code> come from, and what kind of object can you call it on (let&#39;s try it out)?</strong> &#8594;</p>

  <ul>
    <li>document.addEventListener</li>
    <li>document.body.addEventListener</li>
    <li>document.getElementsByTagName(&#39;div&#39;)[0].addEventListener</li>
  </ul>

  <p><br /></p>

  <p class="fragment">Remember that <strong>Node</strong> objects have a prototype of <strong>EventTarget</strong>&#8230; and all elements are just nodes in the DOM</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
let ele = document.getElementsByTagName('div')[0];
while (Object.getPrototypeOf(ele)) { 
	console.log(Object.getPrototypeOf(ele)); 
	ele = Object.getPrototypeOf(ele);
}
</code></pre>

  <p class="fragment">So&#8230; that means every DOM element has <strong>addEventListener</strong>, and you can use it to listen for events on that specific element.</p>
</section>

<section>
  <h2 id="addeventlistener-example">addEventListener Example</h2>

  <p><strong>Here&#39;s a quick example of using <code class="highlighter-rouge">addEventListsener</code>:</strong> &#8594;</p>

  <p>The markup:</p>

  <pre><code data-trim="" contenteditable="">
&lt;button&gt;Hello&lt;/button&gt;
</code></pre>

  <p>Print <code class="highlighter-rouge">hello</code> to the console whenever the button is clicked:</p>

  <pre><code data-trim="" contenteditable="">
const b = document.querySelector(&#x27;button&#x27;);
b.addEventListener(&#x27;click&#x27;, sayHello);
function sayHello(evt){
  console.log(&#x27;hello&#x27;);
}
</code></pre>
</section>

<section>
  <h2 id="addeventlistener-details">addEventListener Details</h2>

  <p><strong>So&#8230; some things to note about <code class="highlighter-rouge">addEventListener</code> &#8230;</strong> &#8594;</p>

  <p>It takes two arguments, an event (as a string), and a callback</p>

  <ol>
    <li>the <strong>event name</strong> is a string
      <ul>
        <li>there are <a href="https://developer.mozilla.org/en-US/docs/Web/Events">lots of standard events</a></li>
        <li>we&#39;re interested in <code>click</code> and <code>DOMContentLoaded</code></li>
      </ul>
    </li>
    <li>the <strong>callback</strong> is a function with an optional parameter - the event object that represents the event
      <ul>
        <li>the event object may have information such as which mouse button was clicked</li>
        <li>what its x and y value are</li>
        <li>the unicode code point of the key pressed</li>
        <li>etc.</li>
      </ul>
    </li>
  </ol>
</section>

<section>
  <h2 id="the-event-listeners-callback">The Event Listener&#39;s Callback</h2>

  <p><strong>A few more details about the callback</strong> &#8594;</p>

  <ol>
    <li>within the callback function, <strong>this</strong> is set to the element the that event listener was added to</li>
    <li>the <strong>callback</strong> can be <strong>named or anonymous</strong>
      <ul>
        <li>but you have to have a named function to remove it with <code>removeEventListener</code> (we&#39;ll see this a little later)</li>
        <li><code>removeEventListener('eventName', nameOfCallback);</code></li>
      </ul>
    </li>
    <li>The <strong>callback should not be an arrow function!</strong>
      <ul>
        <li>why? <span class="fragment">we want to retain <code class="highlighter-rouge">this</code> for the element&#8230;</span></li>
      </ul>
    </li>
  </ol>

  <p><br /></p>

  <p><strong>Great, let&#39;s see some of this in action</strong> &#8594;</p>

</section>

<section>
  <h2 id="handling-clicks-this">Handling Clicks, This</h2>

  <p><strong>Make all of the paragraphs clickable&#8230; and change the text of the paragraph so that it displays the x and y position of the mouse click using the event object</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;style&gt;p {border: 1px solid #000}&lt;/style&gt; 
&lt;p&gt;FOO&lt;/p&gt; &lt;p&gt;BAR&lt;/p&gt; &lt;p&gt;BAZ&lt;/p&gt;
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
function handleClick(event) {
	this.textContent = event.x + ',' + event.y;
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
const paragraphs = document.querySelectorAll('p');
paragraphs.forEach((p) =&gt; {
	p[i].addEventListener('click', handleClick);
});
</code></pre>
</section>

<section>
  <h2 id="where-does-this-code-live">Where Does This Code Live?</h2>

  <p><strong>So, now that you have code:</strong> &#8594;</p>

  <ol>
    <li>that registers an event listener&#8230;</li>
    <li>and specifies a function that handles the event</li>
  </ol>

  <p><br />
<strong>What are some criteria for where this stuff should live?</strong> &#8594;</p>

  <ul class="fragment">
    <li>probably in an external file included at the end of the body</li>
    <li>we could even use that <code>DOMContentLoaded</code> event, right?
      <ul>
        <li>that is, only call once the DOM has been fully loaded</li>
        <li>&#8230;just in case your code depends on the presence of a specific element</li>
      </ul>
    </li>
  </ul>

  <p><br /></p>

  <pre class="fragment"><code data-trim="" contenteditable="">
function main() {
    console.log('THE DOM IS RED E');
}
document.addEventListener('DOMContentLoaded', main);
</code></pre>

</section>

<section>
  <h2 id="events-types">Events Types</h2>

  <p><strong>Again we&#39;ll be using these two events types (out of the many that are available - <a href="https://developer.mozilla.org/en-US/docs/Web/Events">check out the mdn docs</a>):</strong> &#8594;</p>

  <ul>
    <li><strong>click</strong> - triggered on mouse click (press and release) on a single element</li>
    <li><strong>DOMContentLoaded</strong> - document has been completed loaded and parsed (without waiting for CSS, images, etc.)</li>
  </ul>

  <p><br /></p>

  <p class="fragment">Some other events that may be useful in your projects include:</p>

  <ul class="fragment">
    <li><code class="highlighter-rouge">blur</code> - when an element loses focus</li>
    <li><code class="highlighter-rouge">focus</code> - when an element receives focus</li>
    <li><code class="highlighter-rouge">keydown</code> - when a key is pressed down</li>
    <li><code class="highlighter-rouge">mousemove</code> - when the mouse moves</li>
    <li><code class="highlighter-rouge">mouseover</code> - when the mouse hovers over an element</li>
  </ul>

</section>

<section>
  <h2 id="event-object-revisited">Event Object Revisited</h2>

  <p><strong>The callback to <code class="highlighter-rouge">addEventListener</code> is called with an object that represents the event that occurred</strong> &#8594;</p>

  <p>Depending on the event, the object may have the following properties</p>

  <ul>
    <li><code class="highlighter-rouge">target</code> - the element that received the event</li>
    <li><code class="highlighter-rouge">x</code> - the x coordinate of a mouse click</li>
    <li><code class="highlighter-rouge">y</code> - the y coordinate of a mouse click</li>
    <li><code class="highlighter-rouge">key</code> - the key pressed (the character or a text description, such as <code class="highlighter-rouge">ArrowDown</code></li>
  </ul>

</section>

<section>
  <h2 id="event-object-this-and-removing-event-handlers">Event Object, this and Removing Event Handlers</h2>

  <p>Using an example from the previous slides, <strong>let&#39;s remove the event listener on click so that it only says hello on the first click&#8230; and does nothing afterwards. We&#39;ll also log out some event object properties</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
const b = document.querySelector(&#x27;button&#x27;);
b.addEventListener(&#x27;click&#x27;, sayHello);
function sayHello(evt){
  console.log(&#x27;hello&#x27;);
}
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
console.log(evt.x, evt.y, evt.which);
this.removeEventListener('click', sayHello);
</code></pre>
</section>

<section>
  <h2 id="bubbling--propagation">Bubbling / Propagation</h2>

  <p><strong>So&#8230; what happens if you have two elements nested within each other, and both have event listeners?</strong> &#8594;</p>

  <p>Imagine that both the <code class="highlighter-rouge">div</code> and <code class="highlighter-rouge">h2</code> have event listeners. What happens when the <code class="highlighter-rouge">h1</code> is clicked?</p>

  <pre><code data-trim="" contenteditable="">
&lt;div&gt; 
I have an event listener
&lt;h1&gt;So do I&lt;/h1&gt;
&lt;/div&gt;
</code></pre>

  <ol>
    <li class="fragment">the event handler of the <strong>more specific element</strong> (the innermost element) gets called <strong>first</strong></li>
    <li class="fragment">&#8230;then the event bubbles up through the element&#39;s parent elements, triggering their event handlers as well</li>
  </ol>
</section>

<section>
  <h2 id="bubbling--propagation-example">Bubbling / Propagation Example</h2>

  <p><strong>Let&#39;s try nesting two elements (maybe a button in an article), add adding event listeners to both.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&#x3C;article&#x3E;
  &#x3C;h1&#x3E;About Events&#x3C;/h1&#x3E;
  &#x3C;button&#x3E;Click to Say Hello&#x3C;/button&#x3E;
&#x3C;/article&#x3E;

// in js
const a = document.querySelector(&#x27;article&#x27;);  
const b = document.querySelector(&#x27;button&#x27;);
a.addEventListener(&#x27;click&#x27;, function(evt) {
  console.log(&#x27;article!&#x27;);  
});
b.addEventListener(&#x27;click&#x27;, function(evt) {
  console.log(&#x27;button!&#x27;);
});
</code></pre>
</section>

<section>
  <h2 id="preventing-propagation">Preventing Propagation</h2>

  <p>You can also prevent events from bubbling up by calling <code>stopPropagation()</code> on the event object. <strong>Let&#39;s try it with the previous example to stop the paragraph event listener from being triggered.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
// modify your previous button event listener
b.addEventListener('click', function(evt) {
  console.log('button!');
  // the event won't bubble up!
  evt.stopPropagation();
});
</code></pre>
</section>

<section>
  <h2 id="preventing-default-event-actions">Preventing Default Event Actions</h2>

  <p>Most events have default actions on them. That is, there are some elements that react to events already. <strong>Can you think of any?</strong> &#8594;</p>

  <ul>
    <li class="fragment">clicking an <strong>input of type submit</strong> will GET or POST a form</li>
    <li class="fragment">clicking on a <strong>link</strong> will take you to that link</li>
  </ul>

  <p class="fragment"><br />
But&#8230; <strong>what if the default action was not your intention?</strong> &#8594;</p>

  <p class="fragment">Use the <strong>preventDefault()</strong> method on the event object!</p>
</section>

<section>
  <h2 id="preventdefault-example">preventDefault Example</h2>

  <p><strong>Create a link&#8230; but add an event listener to stop the browser from going to the page linked to&#8230;</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&#x3C;a href=&#x22;http://nyu.edu&#x22;&#x3E;a link to nyu&#x3C;/a&#x3E;

// in js
const a = document.querySelector(&#x27;a&#x27;);  

a.addEventListener(&#x27;click&#x27;, function(evt) {
  console.log(&#x27;link clicked!&#x27;);  
  evt.preventDefault();
});
</code></pre>
</section>

<section>
  <h2 id="and-now-for-something-silly">And Now for Something Silly</h2>

  <p><strong>Let&#39;s make this face spin when we click it</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
&lt;div id="face"&gt;
  &amp;#128581;
&lt;/div&gt;
</code></pre>

  <p>Some styles:</p>

  <pre><code data-trim="" contenteditable="">
#face {
    font-size: 15em;
    display: inline-block;
}
</code></pre>

  <pre><code data-trim="" contenteditable="">
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.dizzy {
    animation: spin 5s linear infinite;
}
</code></pre>

</section>

<section>
  <h2 id="and-the-javascript">And the JavaScript</h2>

  <p><strong>Simply toggle the dizzy class</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
document.addEventListener('DOMContentLoaded', main);

function main() {
    const face = document.querySelector('#face');
    face.addEventListener('click', function clicked(evt){
        this.classList.toggle('dizzy');
    });
}
</code></pre>

  <style>
#face {
    font-size: 5em;
    display: inline-block;
}
@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.dizzy {
    animation: spin 5s linear infinite;
}

#animation-container {
    text-align:center;
    margin: auto;
    margin-top: 4em;
}
</style>

  <div id="animation-container">
    <div id="face">
      &#128581;
    </div>
    <br />
    (Click me!)
</div>

  <script>
    const face = document.querySelector('#face');
    face.addEventListener('click', function clicked(evt){
        this.classList.toggle('dizzy');
    });

</script>

</section>
:ET