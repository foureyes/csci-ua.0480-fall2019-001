I"1<section class="intro-slide">
  <h1 id="about-class-5">About Class #5</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h1 id="how-was-the-homework">How Was the Homework?</h1>
</section>

<section>
  <h2 id="where-we-are">Where We Are</h2>

  <p>We&#39;re almost done with our whirlwind tour of JavaScript!</p>

  <ul>
    <li>objects, prototypes, patterns, error handling are left</li>
    <li>(we can get that done in this class and next)</li>
    <li>and that means web development next week (<strong>finally</strong>)!</li>
  </ul>

</section>

<section>
  <h2 id="call-by-sharing">Call By Sharing</h2>

  <p><a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Call_by_sharing">I sent out an article on call-by-sharing</a></p>

  <ul>
    <li>assignments to function arguments passed in are not seen by the caller</li>
    <li>if the argument is mutable, however, it can be changed within the function</li>
    <li>(and the caller will see the change)</li>
  </ul>

  <p><strong>Java, Python, and JavaScript exhibit this behavior, but call it different things!</strong> &#8594;</p>

  <ul>
    <li class="fragment">in Java it&#39;s called <em>pass-by-value</em></li>
    <li class="fragment">but in Ruby, it&#39;s called <em>pass-by-reference</em></li>
    <li class="fragment">sometimes Python uses <em>call-by-sharing</em>, though it&#39;s a term that&#39;s not as widely used as the others</li>
  </ul>
</section>

<section>
  <h3 id="misc-stuff">Misc Stuff</h3>

  <p>Before we go on, I want to cover some odds and ends:</p>

  <ul>
    <li><code>.length</code> property</li>
    <li><code>indexOf</code></li>
    <li><code>toFixed</code></li>
    <li>timing&#8230;</li>
  </ul>

</section>

<section>
  <h2 id="the-length-property">The .length Property</h2>

  <p>Both Strings and Arrays have a property called <code>length</code>:</p>

  <ul>
    <li>it returns the number of characters in a string</li>
    <li>&#8230;and the number of elements in an Array</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
"hello".length // --&gt; 5
[1, 2, 3].length // --&gt; 3
</code></pre>
</section>

<section>
  <h2 id="indexof">indexOf</h2>

  <p>If you&#39;d like to find something in an Array, you can use the <code>indexOf</code> method. (<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">see the docs</a>).</p>

  <ul>
    <li>it returns the index of first occurrence of an element</li>
    <li>-1 if the element doesn&#39;t exist</li>
    <li>it has an optional start index as the second arg (where to start the search from)</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
console.log([1, 3, 3, 7].indexOf(3));
console.log([1, 3, 3, 7].indexOf(8));
console.log([1, 3, 3, 7].indexOf(3, 2));
</code></pre>

  <pre class="fragment"><code data-trim="" contenteditable="">
1 ... -1 ... 2
</code></pre>

</section>

<section>
  <h2 id="tofixed">toFixed</h2>

  <p>The <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">toFixed</a> method for Numbers specifies the number of digits that appear after the decimal point:</p>

  <pre><code data-trim="" contenteditable="">
var n = 42;
cosnole.log(n.toFixed(4)); 
// prints out 42.0000
</code></pre>

</section>

<section>
  <h2 id="timing">Timing</h2>

  <p>Some implementations of JavaScript have functions that can measure elapsed time (read: it&#39;s not standard!).</p>

  <p>In v8 (node and Chrome), you can use:</p>

  <ul>
    <li><code>console.time('name of timer')</code>&#8230;. to start timing</li>
    <li><code>console.timeEnd('name of timer')</code>&#8230;. to stop timing and output the elapsed time since the start of the timer</li>
    <li>note that &#39;name of timer&#39; must match between the two calls</li>
  </ul>
</section>
:ET