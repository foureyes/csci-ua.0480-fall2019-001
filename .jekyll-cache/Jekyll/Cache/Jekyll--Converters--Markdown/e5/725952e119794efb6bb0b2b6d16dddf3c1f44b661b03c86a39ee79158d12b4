I"U0<section class="intro-slide">
  <h1 id="higher-order-functions">Higher Order Functions</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="abstractions">Abstractions</h2>

  <p><strong>Abstraction</strong> is:</p>

  <ul>
    <li>the process of hiding away necessary, but immaterial details</li>
    <li>&#8230; to allow for a programmer to work more closely with the problem that is actually being solved</li>
  </ul>

  <p><br />
For example:</p>

  <ul>
    <li>we abstract away the underlying machine when we use <strong>high-level</strong> programming languages, like JavaScript and Python</li>
    <li>whereas <strong>low-level</strong> languages are tied closely to the architecture and organization of the machine that you&#39;re working on</li>
  </ul>

</section>

<section>
  <h2 id="abstraction-continued">Abstraction Continued</h2>

  <p><strong>What are some constructs for abstraction in Java?</strong></p>

  <ul>
    <li class="fragment">Classes (there&#39;s even a keyword, <strong>abstract</strong>&#8230; <strong>what does that do</strong>?)</li>
    <li class="fragment">Interfaces</li>
    <li class="fragment">Methods / Functions</li>
  </ul>
</section>

<section>
  <h2 id="higher-order-functions-as-constructs-for-abstractions">Higher Order Functions as Constructs for Abstractions</h2>

  <p>A <strong>higher order function</strong> is a function that does at least one of the following:</p>

  <ul>
    <li>takes a function or functions as a parameter (input)</li>
    <li>returns a function</li>
  </ul>
</section>

<section>
  <h2 id="you-might-know-these-higher-order-functions-from">You Might Know These Higher Order Functions From&#8230;</h2>

  <p>In languages where functions are <em>first class citizens</em> it&#39;s common to have some implementation of the following <strong>higher order functions</strong> that work with arrays:</p>

  <ul>
    <li>foreach - calls a function for every element in an array (no return value)</li>
    <li>map - calls a function on every element in an array to return a new array composed of those elements</li>
    <li>filter - creates and returns a new array composed of only elements that pass a supplied test function</li>
    <li>reduce - reduces an array to a single value, and returns that value</li>
  </ul>

  <p><br />
<strong>Are you familiar with these functions?</strong> &#8594;</p>

  <ul class="fragment">
    <li>array_walk, array_map, array_filter, array_reduce in PHP</li>
    <li>for in, map, filter, reduce in Python</li>
  </ul>

</section>

<section>
  <h2 id="we-can-implement-all-of-these-higher-order-functions-in-javascript">We Can Implement All of These Higher Order Functions in JavaScript</h2>

  <h3 id="pssssst-they-actually-all-exist-as-array-methods-but-lets-try-exploring-their-implementations">(Pssssst. They actually all exist as array methods, but let&#39;s try exploring their implementations.)</h3>
</section>

<section>
  <h1 id="first-lets-see-why-we-would-use-these-functions">First, let&#39;s see why we would use these functions</h1>

  <h3 id="think-expressiveness-abstraction">(think expressiveness, abstraction)</h3>
</section>

<section>
  <h2 id="array-traversal--do-something-with-every-element">Array Traversal / Do Something With Every Element</h2>

  <p><strong>Write a quick loop. For every element in the following array, print it out.</strong> &#8594;</p>

  <p><code>const numbers = [1, 2, 3];</code></p>

  <pre><code data-trim="" contenteditable="">
for (let i = 0; i &lt; numbers.length; i++) {
	const current = numbers[i];
	console.log(current); 
}

</code></pre>
</section>

<section>
  <h2 id="seems-pretty-conventional">Seems Pretty Conventional</h2>

  <p>Easy, but&#8230; for code that just prints out every element, <strong>we have to do a bunch of extra things that / deal with some practical, yet immaterial details&#8230; like</strong>: &#8594;</p>

  <ul class="fragment">
    <li>use a <em>counter variable</em> <code>i</code></li>
    <li>continually check against the array&#39;s length</li>
    <li>pick out / index the current element</li>
  </ul>

  <p><br />
<strong>What are some places where we could accidentally make a mistake?</strong> &#8594;</p>

  <ul class="fragment">
    <li>inadvertently reuse the <code>i</code> variable</li>
    <li>misspell <em>lenght</em></li>
    <li>confuse the <code>i</code> and <code>current</code> variables (are we looking at the index or the actual current element!)</li>
    <li>(I know&#8230; a for loop isn&#39;t <em>that difficult</em> to deal with)</li>
  </ul>
</section>

<section>
  <h2 id="lets-create-a-function">Let&#39;s Create a Function</h2>

  <p><strong>One simple abstraction is to hide the details of the iteration by creating a function called logEach.</strong> &#8594;</p>

  <ul>
    <li>it&#39;ll take an array as a parameter</li>
    <li>&#8230; and just print out every element</li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
const numbers = [1, 2, 3];
function logEach(arr) {
	for (let i = 0; i &lt; arr.length; i++) {
		console.log(arr[i]); 
	}
}
logEach(numbers);
</code></pre>
</section>
<section>
  <h2 id="ok-the-logeach-function-was-pretty-straightforward">Ok, the logEach Function was Pretty Straightforward</h2>

  <p>But&#8230; what if we want to perform a different action instead of printing out each element? We could:</p>

  <ul class="fragment">
    <li>create a function for each action that we want to perform</li>
    <li><strong>abstract out the action so that it&#39;s passed in as a parameter</strong> &#8594;</li>
  </ul>
</section>
<section>
  <h2 id="our-implementation-of-foreach">Our Implementation of forEach</h2>

  <p><strong>Create a function called <code>forEach</code>.</strong> &#8594;</p>

  <ul>
    <li>it&#39;ll take two parameters, the array, <code>arr</code>, and some sort of function, <code>action</code></li>
    <li>it will run the function for every element in the array</li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
const numbers = [1, 2, 3];
function forEach(arr, action) {
	for (let i = 0; i &lt; arr.length; i++) {
		action(arr[i]); 
	}
}
// instead of just logging each number as is, log the square of ever number
forEach(numbers, function(arrayElement) { console.log(arrayElement * arrayElement)});
</code></pre>
</section>

<section>
  <h2 id="great-weve-just-implemented-foreach">Great We&#39;ve Just Implemented ForEach!</h2>

  <p><strong>What are some advantages?</strong></p>

  <ul>
    <li>no indexing, convenient, eh?</li>
    <li>reads more clearly / like natural language</li>
  </ul>

  <p><br />
<strong>Of course, JavaScript already has a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach">forEach implementation</a>:</strong></p>

  <ul>
    <li>simply a method called on an array object</li>
    <li>works off of the elements of the object it&#39;s called on, so it only needs one parameter, the <strong>callback</strong></li>
    <li>callback is executed with element value, element index and original array object</li>
    <li>doesn&#39;t return anything (gives back undefined)</li>
  </ul>
</section>

<section>
  <h2 id="generatecards">generateCards</h2>

  <p><strong>Write a function that creates a deck of cards. The function will</strong> &#8594;</p>

  <ul>
    <li>generate and return an array of card objects</li>
    <li>each card object has a suit (♠, ♥, ♦, ♣) and a face (the strings &#39;2&#39; .. &#39;10&#39;, &#39;J&#39;, &#39;Q&#39;, &#39;K&#39;, &#39;A&#39;)</li>
    <li>the 52 resulting objects should represent every combination of suit and face</li>
    <li>example list with two card objects: <code>[{ suit: '♣', face: '2' }, { suit: '♦', face: '6' } ]</code></li>
    <li>example usage: <code>const cards = generateCards()</code></li>
  </ul>
</section>
<section>
  <h2 id="generatecards-with-standard-for-loop">generateCards with Standard For Loop</h2>

  <pre><code data-trim="" contenteditable="">
const generateCards = function() {
	const suits = ['♠','♥','♦','♣'];
    const faces = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
    const cards = [];
	for(let i = 0; i &lt; suits.length; i++) {
		for(let j = 0; j &lt; faces.length; j++) {
			cards.push({'suit':suits[i], 'face':faces[j]}); 
		}
	}
	return cards;
};
console.log(generateCards());

</code></pre>
</section>

<section>
  <h2 id="generatecards-with-foreach">generateCards with forEach</h2>

  <p><strong>Perhaps slightly more expressive: only dealing with suit and face in the forEach loops</strong>&#8230; &#8594;</p>

  <pre><code data-trim="" contenteditable="">
const generateCards = function() {
	const suits = ['♠','♥','♦','♣'];
    const faces = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
    const cards = [];
	suits.forEach(function(suit) {
		faces.forEach(function(face) {
			cards.push({'suit':suit, 'face':face}); 
		});
	});
	return cards;
};
console.log(generateCards());
</code></pre>
</section>

<section>
  <h2 id="generatecards-with-for-of">generateCards with for of</h2>

  <p><strong>Ah, that&#39;s it!</strong>&#8230; &#8594;</p>

  <pre><code data-trim="" contenteditable="">
const generateCards = function() {
	const suits = ['♠','♥','♦','♣'];
    const faces = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];
    const cards = [];
	for(const suit of suits) {
		for(const face of faces) {
			cards.push({'suit':suit, 'face':face}); 
		});
	});
	return cards;
};
console.log(generateCards());
</code></pre>
</section>

<section>
  <h2 id="a-few-other-notes-on-the-implementations">A Few Other Notes on the Implementations</h2>

  <ul>
    <li>no <code class="highlighter-rouge">break</code> in <code class="highlighter-rouge">forEach</code></li>
    <li>but <code class="highlighter-rouge">break</code> works in regular <code class="highlighter-rouge">for</code> and <code class="highlighter-rouge">for of</code></li>
    <li>ok to <code class="highlighter-rouge">const</code> declare loop variable in <code class="highlighter-rouge">for of</code></li>
    <li><code class="highlighter-rouge">for of</code> works on anything that implements the iterator protocol, not just arrays
      <ul>
        <li>for example, strings!</li>
      </ul>
    </li>
    <li>for this particular task, perhaps <code class="highlighter-rouge">reduce</code> could be used instead of <code class="highlighter-rouge">forEach</code> (see later)</li>
  </ul>
</section>

<section>
  <h2 id="filtering-an-array">Filtering an Array</h2>

  <p><strong>Create a function called filter that filters an array by:</strong> &#8594;</p>

  <ul>
    <li>taking an array as one argument and a function, a test, as the other</li>
    <li>it should return an entirely new array populated with only the elements that pass the test</li>
    <li>test by using it to keep only the odd numbers in an array of numbers</li>
  </ul>

  <pre class="fragment"><code data-trim="" contenteditable="">
function filter(arr, test) {
	const filtered = [];
	arr.forEach(function(element) {
		if(test(element)) {
			filtered.push(element)
		}
	});
	return filtered;
}
const result = filter([1, 2, 3, 4], function(x) { 
	return x % 2 == 1;
});
console.log(result);
</code></pre>
</section>
<section>
  <h2 id="using-filter">Using Filter!</h2>

  <p>Again, JavaScript arrays already have a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter">filter method</a>:</p>

  <ul>
    <li>an array method, so only one parameter, a callback function (the test) &#8230; no need to pass in the array</li>
    <li>callback is executed with element value, element index and original array object</li>
    <li>callback returns either true or false</li>
    <li>filter returns a new filtered array</li>
  </ul>

  <p><br />
<strong>Try using it to filter our deck of cards so that we only have cards that have a numeric value that&#39;s less than or equal to 3</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
const deck = generateCards();
const filtered = deck.filter(function(card) {
	return parseInt(card.face, 10) &lt;= 3;
});
console.log(filtered);
</code></pre>
</section>

:ET