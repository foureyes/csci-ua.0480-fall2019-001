I"‹}<section class="intro-slide">
  <h1 id="authentication">Authentication</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="authentication-vs-authorization">Authentication vs Authorization</h2>

  <p><strong>In the context of the web, what is authentication? Is it the same as authorization?</strong> &#8594;</p>

  <ul>
    <li class="fragment"><strong>Authentication</strong> the process of determining whether or not who they claim to be.</li>
    <li class="fragment"><strong>Authorization</strong> is the set of rules that determine whether a user is allowed to perform an action that they are trying to perform.</li>
    <li class="fragment">You may hear authentication and authorization referred to as AuthN and AuthZ respectively</li>
    <li class="fragment">In today&#39;s class, we&#39;ll be discussing <strong>authentication</strong></li>
  </ul>
</section>

<section>
  <h2 id="authentication-and-the-web">Authentication and the Web</h2>

  <p><strong>How do websites verify that a user is who they claim to be? How do websites implement authentication?</strong> &#8594;</p>

  <ul class="fragment">
    <li>traditionally through <strong>username</strong> and <strong>password</strong></li>
    <li><strong>&#8230;what are some other ways?</strong> &#8594;
      <ul>
        <li class="fragment">requiring more than just a username and password (maybe both something you know and something you <em>have</em>) &#8230; <strong>any examples of this <em>two-factor auth</em> thing?</strong> &#8594;</li>
        <li class="fragment">
          <p>(a code that&#39;s texted to your phone - think gmail&#39;s 2-factor auth, or a dedicated device, like yubikey)</p>
        </li>
        <li class="fragment">some sort of integration with with a social media site that can vouch for your credentials!
          <ul>
            <li class="fragment">like Facebook Connect</li>
            <li class="fragment">or Google Sign-In</li>
          </ul>
        </li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="before-we-go-on">Before We Go On</h2>

  <p>If our site collects any <em>sensitive</em> information from a user, <strong>the communication between our server and the client should be encrypted</strong>.  To do this, you&#39;ll need to use TLS/SSL (that&#39;s when you see the padlock icon and https in the schema part of the url):</p>

  <p><strong>TLS/SSL</strong> are cryptographic protocols</p>

  <ol>
    <li>a method to encrypt traffic between the server and client</li>
    <li>a typical exchange involves the following steps:
      <ul>
        <li>the client and server agree on which protocol and version to use</li>
        <li>the server sends back a cryptographically signed certificate supplied from a trusted third party</li>
        <li>this certificate is used by the browser to verify the identity of the server that the browser is connecting to</li>
        <li>keys for encryption (a parameter to an encryption algorithm) are exchanged, and are subsequently used to communicate through symmetric encryption</li>
      </ul>
    </li>
  </ol>

</section>

<section>
  <h2 id="where-do-i-get-my-cert">Where do I Get My Cert?</h2>

  <p><strong>You&#39;ll have to</strong>: &#8594;</p>

  <ul>
    <li>buy a cert from a Certificate Issuer, like digicert, geotrust, etc.</li>
    <li>or use a cert from <strong>Let&#39;s Encrypt</strong>.</li>
  </ul>

  <p><br />
<strong>Let&#39;s Encrypt</strong> is a free certificate authority backed by a non-profit.  Check out:</p>

  <ul>
    <li><a href="https://git.daplie.com/Daplie/greenlock-express">greenlock-express</a>, a node module for installing and renewing Let&#39;s Encrypt certs</li>
    <li>&#8230;and this <a href="https://justinmccandless.com/post/setting-up-https-on-node-for-free-with-lets-encrypt/">blog article</a> for how to set everything up.</li>
  </ul>

</section>

<section>
  <h2 id="using-ssltls">Using SSL/TLS</h2>

  <p>A fully detailed lecture on security and encryption is beyond the scope of this class (we&#39;ll talk a <em>little</em> more about tls/ssl). <strong>However, you should know there&#39;s support for TLS/SSL in Node.js and Express.</strong> &#8594;</p>

  <ul>
    <li>you&#39;ll have to obtain a certificate from a certificate issuer, such as DigiCert, Comodo, Let&#39;s Encrypt etc.</li>
    <li>(you can also create a <em>self-signed</em> one (not suitable for production)</li>
    <li>&#8230;and configure express to use it (notice that you have to explicitly call createServer, and that the options may vary depending on how you&#39;ve obtained your cert - <a href="http://expressjs.com/api.html#app.listen">see relevant docs</a>)</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
// require http, https, express, etc.
const options = {
	key: fs.readFileSync(__dirname + '/ssl/server.pem'), 
	cert: fs.readFileSync(__dirname + '/ssl/server.crt'),
};
https.createServer(options, app).listen(app.get('port'), function(){ 
	console.log('Express started ...');
});
</code></pre>

</section>

<section>
  <h2 id="use-tlsssl">Use TLS/SSL!</h2>

  <p><strong>If you&#39;re curious about how it works under the hood:</strong> &#8594;</p>

  <ol>
    <li>we&#39;ll cover a little bit more about tls/ssl in the next set of slides</li>
    <li>check out this <a href="http://security.stackexchange.com/questions/20803/how-does-ssl-tls-work">StackExchange Information Security article on TLS/SSL</a></li>
  </ol>

  <p><br /></p>

  <p><strong>Also, we can actually check out certs in our browser.</strong> &#8594;</p>

  <p class="fragment">(try going to home.nyu.edu in chrome&#8230; and check on the padlock)</p>
</section>

<section>
  <h2 id="back-to-authentication">Back to Authentication</h2>

  <p>Ok&#8230; now that that&#39;s out of the way&#8230; <strong>If we&#39;d like to add username and password for authentication, where do we store that information?</strong> &#8594;</p>

  <p class="fragment">Our database makes sense, of course, but <strong>what would our Schema look like, and what would the contents be of each field?</strong> &#8594;</p>

  <p class="fragment">Simple enough&#8230; just two fields, username to store username and password to store password. Easy!</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
const userSchema = mongoose.Schema({
{
	username: String,
	password: String,
})
</code></pre>
</section>

<section>
  <h2 id="the-password-field">The Password Field</h2>

  <p>That password field is just the password in plain text. <strong>Why is storing a password in plain text a bad idea?</strong> &#8594;</p>

  <p class="fragment">The data in our database may be compromised (<strong>how?</strong> &#8594;):</p>

  <ul class="fragment">
    <li>someone hacking into the database server and obtaining users&#39; passwords</li>
    <li>an inadvertent leak of data from a misconfigured server</li>
    <li>a person that has access to the database server misusing their access privileges to read sensitive information</li>
    <li>database backups being lost or stolen</li>
    <li>(yikes! &#8230;<a href="http://security.blogoverflow.com/2011/11/why-passwords-should-be-hashed/">more on this</a>)</li>
  </ul>
</section>

<section data-background="#440000">
  <h1 id="dont-store-passwords-in-plain-text">Don&#39;t Store Passwords in Plain Text</h1>

</section>
<section>
  <h2 id="hashing-vs-encryption">Hashing vs Encryption</h2>

  <p>Both are ways that we can use to transform a string into another string&#8230; but <strong>what&#39;s the difference between the two?</strong> &#8594;</p>

  <ul>
    <li class="fragment"><strong>hashing</strong> is a one way function (mapping)</li>
    <li class="fragment"><strong>encryption</strong> is a two way function
      <ul>
        <li class="fragment">it&#39;s reversible</li>
        <li class="fragment">you can decrypt an encrypted string</li>
      </ul>
    </li>
  </ul>

  <p class="fragment"><br />
<strong>Which do you think is appropriate for storing passwords? Why?</strong> &#8594;</p>

  <ul>
    <li class="fragment"><strong>we should hash our passwords</strong></li>
    <li class="fragment">if the transformation were reversible, then it would be possible to retrieve the actual passwords!</li>
  </ul>
</section>

<section>
  <h2 id="hashing-passwords">Hashing Passwords</h2>

  <p><strong>Ok&#8230; so, how do I find or create an adequate hashing algorithm? What are some properties that we would look for?</strong> &#8594;</p>

  <ul class="fragment">
    <li>kind of a trick question
      <ul>
        <li>we don&#39;t want to create or choose an algorithm ourselves!</li>
        <li>we should let <a href="http://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf">expert cryptographers and/or standards bodies do this for us</a></li>
      </ul>
    </li>
    <li>but, maybe some characteristics are:
      <ul>
        <li>collision resistant</li>
        <li>computationally difficult to generate (<strong>why? &#8230; we&#39;ll see in the next couple of slides</strong> &#8594;)</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="hashing-algorithms">Hashing Algorithms</h2>

  <p><strong>It turns out that these are the ones that are recommended:</strong> &#8594;</p>

  <ol>
    <li><code class="highlighter-rouge">bcrypt</code></li>
    <li><code class="highlighter-rouge">PBKDF2</code></li>
  </ol>

  <p><br />
<strong>But only for <em>now</em> &#8230; as the landscape continues to change:</strong> &#8594;</p>

  <ul>
    <li>computational power increases</li>
    <li>flaws found in existing algorithms</li>
    <li>better algorithms discovered</li>
  </ul>
</section>

<section>
  <h2 id="common-attacks-against-hashed-passwords">Common Attacks Against Hashed Passwords</h2>

  <p><strong>What are some ways of figuring out a password from a hash? (You&#39;ll see why the hashing algorithm should be computationally expensive)</strong> &#8594;</p>

  <ul>
    <li class="fragment">most naive way is to guess the password, hash the guess&#8230; and compare with the password&#39;s hash using:
      <ul>
        <li class="fragment">brute force - construct every possible string up to a length and use that as a guess</li>
        <li class="fragment">dictionary - use a set of known passwords (super <a href="https://www.google.com/search?q=password+dictionary&amp;oq=password+dictionary&amp;aqs=chrome..69i57j0l5.2589j0j9&amp;sourceid=chrome&amp;es_sm=91&amp;ie=UTF-8">easy</a> <a href="http://security.stackexchange.com/questions/1376/where-can-i-find-good-dictionaries-for-dictionary-attacks">to</a>  <a href="https://wiki.skullsecurity.org/Passwords">find</a>)</li>
      </ul>
    </li>
    <li class="fragment">precompute hashes and use a lookup table</li>
    <li class="fragment"><a href="https://crackstation.net/hashing-security.htm">and others</a></li>
  </ul>
</section>

<section>
  <h2 id="are-we-done-yet">Are We Done Yet?</h2>

  <p><strong>Is a one way hash of a password adequate? Are we done yet? What&#39;s another consideration?</strong> &#8594;</p>

  <p class="fragment"><strong>What can be inferred from two passwords if their hash is the same?</strong> &#8594;</p>

  <p class="fragment">They&#39;re the same passwords! If you figure out one, you&#39;ve figured out the other.</p>

  <p class="fragment"><strong>How can we make the hash of two of the same passwords different from eachother?</strong> &#8594;</p>

  <p class="fragment">Add salt.</p>

</section>

<section>
  <h2 id="salting-and-hashing">Salting and Hashing</h2>

  <p>To prevent the hash of two of the same passwords from being the same, we can <strong>salt</strong> the password.</p>

  <ul>
    <li>add a random string (you&#39;ll need to store the salt as well as the password in your database) to the password</li>
    <li>&#8230;hash the string formed from the salt and password</li>
    <li>the salt should be unique per-user, per-password (<strong>don&#39;t reuse salts&#8230; why?</strong> &#8594;)
      <ul>
        <li class="fragment">two users with the same password will still have the same hash!</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="tlsssl-and-storing-passwords-summary">TLS/SSL and Storing Passwords Summary</h2>

  <ul>
    <li><strong>use TLS/SSL</strong> to encrypt traffic between server and client</li>
    <li><strong>never store passwords in plain text</strong></li>
    <li><strong>hash</strong> passwords (one way, unlike encryption, which is reversible)</li>
    <li><strong>salt</strong> and hash passwords</li>
  </ul>

  <p><br /></p>

  <p>And here are some particularly good resources</p>

  <ul>
    <li><a href="http://security.stackexchange.com/questions/211/how-to-securely-hash-passwords">How to securely hash passwords</a></li>
    <li><a href="https://crackstation.net/hashing-security.htm">Salted Password Hashing - Doing it Right</a></li>
    <li><a href="http://csrc.nist.gov/publications/nistpubs/800-132/nist-sp800-132.pdf">NIST - Recommendation for Password-Based Key Derivation</a></li>
  </ul>

</section>

<section>
  <h2 id="back-to-authentication-1">Back to Authentication</h2>

  <p>Assuming that we have all of the previous stuff on password storage right. What&#39;s next? We&#39;ll need to manage:</p>

  <ul>
    <li>a way to <strong>authenticate</strong> a user</li>
    <li>keep that authentication persistent through a user&#39;s session</li>
  </ul>
</section>

<section>
  <h2 id="passport">Passport</h2>

  <p>We&#39;ll use the following node modules for authentication and session management:</p>

  <ul>
    <li><a href="http://passportjs.org/guide/">passport</a> - authentication middleware</li>
    <li><a href="https://github.com/jaredhanson/passport-local">passport-local</a> - allows password/username authentication with passport</li>
    <li><a href="https://github.com/saintedlama/passport-local-mongoose">passport-local-mongoose</a> - mongoose plugin for facilitating username/password auth, and user storage</li>
    <li><a href="https://www.npmjs.org/package/express-session">express-session</a> - session middleware (no <strong>s</strong>!)</li>
  </ul>
</section>

<section>
  <h2 id="passport-usage">Passport Usage</h2>

  <p><strong>So&#8230; what does it actually do?</strong> &#8594;</p>

  <ul>
    <li><strong>handles authentication</strong> (ask for user and password)</li>
    <li><strong>persists that authentication</strong> (session management)</li>
    <li><strong>supplies</strong> a <code class="highlighter-rouge">req.user</code> object
      <ul>
        <li>enabled when user is authenticated</li>
        <li>you can use to access username, determine if authenticated, etc.</li>
      </ul>
    </li>
  </ul>

  <p><br />
<strong>To setup passport&#8230; you&#39;ll need to</strong> &#8594;</p>

  <ol>
    <li class="fragment">Specify authentication strategies (how we want someone to be able to login)</li>
    <li class="fragment">Enable the middleware</li>
    <li class="fragment">Enable sessions</li>
  </ol>
</section>

<section>
  <h2 id="passport-strategies">Passport Strategies</h2>

  <p>Passport uses <strong>strategies</strong> to authenticate a request. There are multiple ways to authenticate a user (we mentioned them before). <strong>What are some possible authentication strategies?</strong> &#8594;</p>

  <ul class="fragment">
    <li>check for username and password in the database (called <strong>local</strong> strategy)</li>
    <li>Facebook Connect</li>
    <li>Google</li>
    <li>authentication protocols, such as OAuth, OpenID</li>
  </ul>

  <p class="fragment"><br />
We&#39;ll be using <strong>local authentication</strong>&#8230; authentication with a  username and password stored in a <em>local</em> database (MongoDB).</p>

</section>

<section>
  <h2 id="passport-strategies-continued">Passport Strategies Continued</h2>

  <p><strong>When we create a strategy, we define a callback function that:</strong> &#8594;</p>

  <ol>
    <li class="fragment">finds and returns the user that possesses a set of credentials</li>
    <li class="fragment">for our local strategy, that means we have to retrieve a user from our database using their username and (hashed) password</li>
    <li class="fragment">soooo&#8230; we could write this function ourselves, or use a module that does this for us (we&#39;ll take the easier route: use passport-local-mongoose)</li>
  </ol>

</section>
<section>
  <h2 id="middleware">Middleware</h2>

  <p>We also have to activate two pieces of middleware:</p>

  <ul>
    <li>passport.initialize - to start up passport</li>
    <li>passport.session - to enable persistent login sessions</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
app.use(passport.initialize());
app.use(passport.session());
</code></pre>

</section>

<section>
  <h2 id="sessions">Sessions</h2>

  <p><strong>Username and password (credentials) are usually only transmitted once during the initial login request.</strong> &#8594;</p>

  <ul>
    <li>once a user is authenticated&#8230;</li>
    <li>a session is created and maintained&#8230;</li>
    <li>via data stored on the server that&#39;s associated with a cookie in the user&#39;s browser</li>
    <li>(each subsequent request will not have the username and password, but instead, the cookie that identifies the session)</li>
  </ul>

</section>
<section>
  <h2 id="sessions-continued">Sessions Continued</h2>

  <p>To support login sessions, Passport will serialize and deserialize instances of the user object to and from the session store (for us the session store is in memory).</p>

  <p><strong>By the way, what do we mean by serialization?</strong> &#8594;</p>

  <p class="fragment">Translate a data structure / object to a <em>storable</em> format). We&#39;ll have to <strong>define functions that do this and tell passport all about it or rely on (again) a module.</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
passport.serializeUser(function(user, done) {
	done(null, user.id);
});

passport.deserializeUser(function(id, done) {
	User.findById(id, function(err, user) {
		done(err, user);
	});
});
</code></pre>
</section>

<section>
  <h2 id="tldr-passport">TL;DR Passport</h2>

  <p><strong>Passport</strong> is middleware that authenticates requests.  It&#39;ll give us:</p>

  <ul>
    <li>a <strong>req.user</strong> object that contains the currently logged in user</li>
    <li><strong>use</strong>() - to specify an <em>authentication</em> strategy (how we want users to be able to login)</li>
    <li><strong>serializeUser</strong>() and <strong>deserializeUser</strong>() - specifies how to store / retrieve a user from the session (and populate <strong>req.user</strong>)</li>
    <li><strong>authenticate</strong>() - to authenticate a request using a specified <em>strategy</em> (there are various ways to use this&#8230;. as middleware or as a plain function called within your route handler)</li>
    <li><strong>req.login</strong>() - to start a logged in session (once a user has been authenticated)</li>
  </ul>

</section>

<section>
  <h2 id="steps-for-site-registration-and-login">Steps for Site Registration and Login</h2>

  <p>If someone registers for our site, <strong>what are the steps that we should take for storing their login/password info?</strong> &#8594;</p>

  <ol class="fragment">
    <li>generate a salt</li>
    <li>append or prepend that salt to the supplied password</li>
    <li>hash the resulting string (some algorithms suggest multiple passes)</li>
    <li>save both the salt and the hash</li>
  </ol>

  <p class="fragment"><br />
<strong>And what about logging in&#8230; how can we tell if a person&#39;s password is correct. What steps should we take?</strong> &#8594;</p>

  <ol class="fragment">
    <li>look up the username</li>
    <li>retrieve the password hash</li>
    <li>salt and hash the incoming password</li>
    <li>compare hashes</li>
  </ol>

</section>

<section>
  <h2 id="passport-local-mongoose">Passport Local Mongoose</h2>

  <p>Again, Passport allows the flexibility of writing our own <em>strategy</em> for:</p>

  <ul>
    <li>registration</li>
    <li>storing a password</li>
    <li>login</li>
    <li>checking username / password.</li>
  </ul>

  <p><br /></p>

  <p>However&#8230; that&#39;s a lot of work, and it&#39;s <em>easy</em> to get that stuff wrong (for something so important, it&#39;s maybe too easy to get wrong).</p>

  <p><strong>Passport-Local Mongoose</strong> is a plugin for Mongoose that bundles up all of that functionality by bringing together passport and Mongoose.</p>

</section>

<section>
  <h2 id="what-does-passport-local-mongoose-do">What Does Passport Local Mongoose Do?</h2>

  <p>It provides a bunch of static methods for us - that we otherwise have to write on our own - for:</p>

  <ul>
    <li><strong>register</strong>() - actually create a new user (with salting and hashing, of course)</li>
    <li><strong>authenticate</strong>() - local strategy authentication (checking for username / passwoord)</li>
    <li><strong>serializeUser</strong>() - for storing a user in the session</li>
    <li><strong>deserializeUser</strong>() - for retrieving a user in the session (and populating req.user)</li>
  </ul>

  <p><br />
We have an idea what these might look like, right? <strong>Let&#39;s check <a href="https://github.com/saintedlama/passport-local-mongoose/blob/master/index.js#L196">the actual implementation</a></strong></p>
</section>

<section>
  <h1 id="phew-ok-lets-get-into-some-interaction-design-stuff-for-a-moment">Phew! Ok&#8230; let&#39;s get into some interaction design stuff for a moment&#8230;</h1>

</section>
<section>
  <h2 id="login--registration-considerations">Login / Registration Considerations</h2>

  <ul>
    <li><strong>what are some possible outcomes of login that we&#39;ll have to handle?</strong> &#8594;
      <ul>
        <li class="fragment">user does not exist</li>
        <li class="fragment">password incorrect</li>
        <li class="fragment">how specific should the error message be? &#8594;</li>
        <li class="fragment">specificity helps usability, but may be a vector for snooping for valid usernames</li>
      </ul>
    </li>
    <li class="fragment"><strong>&#8230;and registration errors</strong> &#8594;
      <ul>
        <li class="fragment">user already exists</li>
        <li class="fragment">password or username doesn&#39;t meet requirements</li>
      </ul>
    </li>
  </ul>

</section>
<section>
  <h2 id="considerations-continued">Considerations Continued</h2>

  <p>Outside of registration and login, what else might we need to support if we have username/password authentication?</p>

  <ul>
    <li class="fragment">password reset? <strong>how?</strong> &#8594;
      <ul>
        <li class="fragment">&#8230; common practice is to send email with reset link</li>
        <li class="fragment">&#8230; obvs, not send new password!</li>
      </ul>
    </li>
    <li class="fragment">forgot username?</li>
  </ul>
</section>

<section>
  <h1 id="implementation-uh-oh-live-demo-time">Implementation (Uh-oh, live demo time)</h1>
</section>

<section>
  <h2 id="demo-overview">Demo Overview</h2>

  <p>We&#39;ll support the following features:</p>

  <ul>
    <li>users that have usernames and passwords</li>
    <li>login</li>
    <li>register</li>
  </ul>

</section>

<section>
  <h2 id="user-schema">User Schema</h2>

  <p>As usual, we&#39;ll create a <code>db.js</code> that contains our schemas, registers our models and connects to the database.</p>

  <p>The user schema can be totally blank. <strong>Passport local mongoose will add properties to the schema, as well as some static methods!</strong> &#8594;</p>

  <ul>
    <li>username, password, salt</li>
    <li>authenticate, serialize, deserialize, etc.</li>
  </ul>

  <pre><code data-trim="" contenteditable="">
const mongoose = require('mongoose');
const passportLocalMongoose = require('passport-local-mongoose');

const UserSchema = new mongoose.Schema({ });

UserSchema.plugin(passportLocalMongoose);

mongoose.model('User', UserSchema);
mongoose.connect('mongodb://localhost/class16db');
</code></pre>
</section>

<section>
  <h2 id="some-passport-setup">Some Passport Setup</h2>

  <p>In a file called <code>auth.js</code> in the root of your project, let passport know what strategy you want to use as well as how to serialize and deserialize a user:</p>

  <pre><code data-trim="" contenteditable="">
const mongoose = require('mongoose'),
	passport = require('passport'),
	LocalStrategy = require('passport-local').Strategy,
	User = mongoose.model('User');
</code></pre>

  <pre><code data-trim="" contenteditable="">
// hey... one of those static functions that passport-local
// mongoose gives our model...
passport.use(new LocalStrategy(User.authenticate()));

passport.serializeUser(User.serializeUser());
passport.deserializeUser(User.deserializeUser());
</code></pre>
</section>

<section>
  <h2 id="prepping-appjs">Prepping app.js</h2>

  <p>At the top of app.js, bring in the two files that we created, <code>db.js</code> and <code>auth.js</code>:</p>

  <pre><code data-trim="" contenteditable="">
require('./db');
require('./auth');

const passport = require('passport');

</code></pre>
</section>

<section>
  <h2 id="add-session-support">Add Session Support</h2>

  <p>We&#39;ve done this before (put this after you&#39;ve created your app object):</p>

  <pre><code data-trim="" contenteditable="">
const session = require('express-session');
const sessionOptions = {
	secret: 'secret cookie thang (store this elsewhere!)',
	resave: true,
	saveUninitialized: true
};
app.use(session(sessionOptions));
</code></pre>

</section>

<section>
  <h2 id="enable-the-passport-middleware">Enable the Passport Middleware</h2>

  <p>Start up passport and allow login sessions using the following middleware (do this before defining/using your routes!):</p>

  <pre><code data-trim="" contenteditable="">
app.use(passport.initialize());
app.use(passport.session());

</code></pre>

</section>

<section>
  <h2 id="make-user-data-available-to-all-templates">Make User Data Available to All Templates</h2>

  <p>Add some middleware that drops req.user into the context of every template. This is done by adding properties to res.locals.</p>

  <pre><code data-trim="" contenteditable="">
app.use(function(req, res, next){
	res.locals.user = req.user;
	next();
});
</code></pre>
</section>

<section>
  <h1 id="wowz-lots-of-setup-and-we-dont-even-have-routes">Wowz. Lots of Setup, and we Don&#39;t Even Have Routes!</h1>

</section>

<section>
  <h2 id="requires-for-our-routes">Requires for our Routes</h2>

  <p>In a file in the routes directory, let&#39;s setup our usual set of requires for creating routers. Additionally, add dependencies for passport and mongoose so that we can actually login and register. (Don&#39;t forget to export your router too)</p>

  <pre><code data-trim="" contenteditable="">
const express = require('express'), 
    router = express.Router(),
    passport = require('passport'),
    mongoose = require('mongoose'),
    User = mongoose.model('User');
</code></pre>

  <pre><code data-trim="" contenteditable="">
// route handlers go above
module.exports = router;
</code></pre>

</section>

<section>
  <h2 id="the-easy-ones-home-login-and-reg-forms">The Easy Ones (Home, Login and Reg Forms)</h2>

  <p>These route handlers will handle requests to home, the login form and the registration form:</p>

  <pre><code data-trim="" contenteditable="">
router.get('/', function(req, res) {
  res.render('index');
});

router.get('/login', function(req, res) {
  res.render('login');
});

router.get('/register', function(req, res) {
  res.render('register');
});
</code></pre>

</section>

<section>
  <h2 id="templates-for-login-and-register">Templates for Login and Register</h2>

  <p>The templates for both of these will pretty much be the same. The auth strategy we use expect <em>username</em> and <em>password</em>, so we&#39;ll name our input fields that.</p>

  <p>We&#39;ll also reserve a spot for error messages.</p>

  <pre><code data-trim="" contenteditable="">
<h2>...</h2>

<form method="POST" action="">
		username: <input name="username" type="text" />	
		password: <input name="password" type="password" />	
		<input type="submit" value="..." />	
</form>
</code></pre>

  <p>Lastly, it might be nice to drop in username in our <code>layouts.hbs</code> (Remember, we put user into the context using some not-so-fancy middleware).</p>

  <pre><code data-trim="" contenteditable="">
{{#if user}}
Logged in as {{user.username}}
{{/if}}
</code></pre>
</section>

<section>
  <h2 id="registration-post">Registration Post</h2>

  <p>Our registration post handler will create a new user or render an error if something goes wrong. If a new user is created, go ahead and log them in!</p>

  <pre><code data-trim="" contenteditable="">
router.post('/register', function(req, res) {
  User.register(new User({username:req.body.username}), 
      req.body.password, function(err, user){
    if (err) {
      res.render('register',{message:'Your registration information is not valid'});
    } else {
      passport.authenticate('local')(req, res, function() {
        res.redirect('/');
      });
    }
  });   
});
</code></pre>
</section>

<section>
  <h2 id="login-post">Login Post</h2>

  <p>Ugh&#8230; so login is a bit weird. Here, we authenticate, and on successful authentication, use req.logIn to start the logged in session.</p>

  <p>Otherwise, render an error message&#8230;</p>

  <pre><code data-trim="" contenteditable="">
router.post('/login', function(req,res,next) {
  passport.authenticate('local', function(err,user) {
    if(user) {
      req.logIn(user, function(err) {
        res.redirect('/');
      });
    } else {
      res.render('login', {message:'Your login or password is incorrect.'});
    }
  })(req, res, next);
});
</code></pre>

</section>

<section>
  <h2 id="canned-demos">Canned Demos</h2>

  <p>There are a couple of demos that I&#39;ve created in the <a href="https://github.com/nyu-csci-ua-0480-001-fall-2016/examples/tree/master/class16">examples repository</a>  (<strong>you need to be logged in to github to see these</strong>):</p>

  <ul>
    <li>A <em>bare minimum</em> demo using passport-local-mongoose</li>
    <li>Another version that has more user specific features</li>
  </ul>

  <p><br />
The 2nd version allows a user to store image urls.</p>

  <ul>
    <li>outside of login and register, there&#39;s a single page: <code>/users/some-username</code></li>
    <li>&#8230; that shows all of the images urls that someone has saved</li>
    <li>if the person is logged in, the same page will show a form to add another image</li>
  </ul>
</section>

<section>
  <h2 id="check-out">Check Out</h2>

  <ul>
    <li>defining (or supplying) the strategy</li>
    <li>the actual passport-local-mongoose code</li>
    <li>the schema that utilizes the passport-local-mongoose plugin</li>
    <li>the middleware</li>
    <li>the routes; watch out for&#8230;
      <ul>
        <li>using req.body</li>
        <li>calls to authenticate</li>
        <li>populating related schemas!</li>
      </ul>
    </li>
  </ul>
</section>

<section>
  <h2 id="other-tutorials--demos">Other Tutorials / Demos</h2>

  <ul>
    <li>From mherman.org: <a href="http://mherman.org/blog/2015/01/31/local-authentication-with-passport-and-express-4/#.VjGSOq6rSRs">a straightforward guide to authentication</a></li>
    <li><a href="http://passportjs.org/docs">The passport docs</a></li>
    <li>From scotch.io: <a href="http://scotch.io/tutorials/javascript/easy-node-authentication-setup-and-local">a comprehensive authentication with passport tutorial (without passport-local-mongoose)</a></li>
    <li>From passport-local-mongoose: <a href="https://github.com/saintedlama/passport-local-mongoose/tree/master/examples/login">a somewhat dated version</a></li>
  </ul>

</section>

:ET