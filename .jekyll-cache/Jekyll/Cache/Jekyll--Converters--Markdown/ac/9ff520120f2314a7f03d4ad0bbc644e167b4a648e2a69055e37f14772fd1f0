I"ô`<section class="intro-slide">
  <h1 id="sessions">Sessions</h1>

  <h3 id="csci-ua0480-001">CSCI-UA.0480-001</h3>

  <p><small></small></p>
</section>

<section>
  <h2 id="about-http-and-state">About HTTP and State</h2>

  <p><strong>HTTP is a stateless protocol.</strong></p>

  <p>That means HTTP requests don&#39;t know anything about each other. <strong>However, there are situations where we want to maintain state across HTTP requests. What are some of those situations?</strong> &#8594;</p>

  <ol>
    <li class="fragment">authentication (is this client logged in? &#8230; maintaining logged in state means the user doesn&#39;t have to log in per request!)</li>
    <li class="fragment">any time that we want to store persistent data about a client, like:
      <ul>
        <li class="fragment">have they visited the site before</li>
        <li class="fragment">what are some <em>user&#39;s preferences</em> (personalization)</li>
        <li class="fragment">tracking / analyzing their behavior (!?)</li>
        <li class="fragment">etc.</li>
      </ul>
    </li>
  </ol>
</section>

<section>
  <h2 id="maintaining-state-between-requests">Maintaining State Between Requests</h2>

  <p>OK, fine - HTTP is stateless, but maintaining state can be useful.</p>

  <p><strong>So&#8230; how might we maintain state or share data between requests?</strong> &#8594;</p>

  <ul>
    <li class="fragment">store data on the server about a user</li>
    <li class="fragment"><strong>link that data to the requests from a particular client</strong>
      <ul>
        <li class="fragment">by using a <strong>session id</strong> that represents that client</li>
        <li class="fragment">&#8230;that <strong>session id is always retransmitted back to the server with every request from <em>the same client</em>!</strong></li>
        <li class="fragment">which essentially <strong>maintains state</strong></li>
      </ul>
    </li>
  </ul>

</section>

<section>
  <h2 id="about-that-session-id">About That Session ID</h2>

  <p><strong>Welp! That sounds terribly insecure. Why should that make you wince just a little bit.</strong> &#8594;</p>

  <ul>
    <li class="fragment">once you own that id, you own that session!</li>
    <li class="fragment">which means that session ids shouldn&#39;t be easy to:
      <ul>
        <li class="fragment"><em>steal</em></li>
        <li class="fragment">guess</li>
      </ul>
    </li>
  </ul>

  <p><br /></p>

  <p class="fragment">This means that:</p>

  <ol>
    <li class="fragment"><strong>session ids shouldn&#39;t be generated sequentially</strong></li>
    <li class="fragment">they <strong>shouldn&#39;t be present in the query string</strong> of a url (where someone shoulder surfing could see it, it appears in request logs, etc.)</li>
    <li class="fragment">they <strong>should be <em>adequately</em> long / complex</strong> to prevent brute force guessing</li>
  </ol>
</section>

<section>
  <h2 id="back-to-maintaining-state">Back to Maintaining State</h2>

  <p>A browser has to keep a session id, and send it over to the server on every request in order to maintain state. <strong>What are some potential mechanisms for doing this?</strong> &#8594;</p>

  <ul>
    <li class="fragment">add a query string parameter for the session id on each request (<strong>is this a good idea</strong>? &#8594; <span class="fragment">no! shoulder surfing, logs, etc.</span>)</li>
    <li class="fragment">add a secret form input for every page (input type is hidden), <strong>but&#8230;</strong> &#8594; <span class="fragment">same problem as above if using get, otherwise every request isn&#39;t a post</span></li>
    <li class="fragment">cookies! - text files stored by your browser (Chrome actually stores cookies in a sqlite database, which is <em>essentially</em> just a text file)</li>
    <li class="fragment">they can store a session id which links to more data on the server</li>
    <li class="fragment">as well as client side data (though there are better ways to do this)</li>
  </ul>

  <p class="fragment"><br />
Check out the <a href="https://www.owasp.org/index.php/OWASP_Application_Security_FAQ#Which_is_the_best_way_to_transmit_session_ids-_in_cookies.2C_or_URL_or_a_hidden_variable.3F">Open Web Application Security Project for more details</a></p>

</section>

<section>
  <h2 id="um-what-how-does-that-work">Um What? How Does That Work?</h2>

  <p><strong>Here&#39;s how state is maintained between requests using cookies.</strong> &#8594;</p>

  <ol>
    <li class="fragment">the server <strong>generates a session id</strong> for an http request</li>
    <li class="fragment">as part of the response, it tells the browser to <strong>store a session id in a cookie</strong> (to <em>set</em> a cookie)</li>
    <li class="fragment">upon receiving the response, your browser <strong>creates or updates a cookie</strong> (tied to the domain that was visited)</li>
    <li class="fragment">it contains some identifier (the session id)</li>
    <li class="fragment"><strong>when your browser makes a request to the server, it sends along that identifier</strong></li>
    <li class="fragment">the server finds the <strong>session</strong> associated with that identifier</li>
    <li class="fragment">the <strong>session store</strong> can be as simple as in-memory or file-based store&#8230; or it can be a database!</li>
    <li class="fragment">you can store data for that user&#39;s session, including authentication, in the session store</li>
  </ol>

</section>

<section>
  <h2 id="cookie-documentation">Cookie Documentation</h2>

  <p><strong>First&#8230; check out the documentation on cookies</strong>:</p>

  <ol>
    <li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Cookies">Cookies on mdn</a></li>
    <li><a href="https://www.nczonline.net/blog/2009/05/05/http-cookies-explained/">Cookies on nczonline</a></li>
    <li><a href="https://www.nczonline.net/blog/2009/05/12/cookies-and-security/">Cookies and Security on nczonline</a></li>
  </ol>
</section>

<section>
  <h2 id="cookie-creation">Cookie Creation</h2>

  <p>Cookies are stored by your browser, but <strong>how do they get there?</strong> &#8594;</p>

  <ol>
    <li class="fragment">the server <strong>sets a header in an http response called <code class="highlighter-rouge">Set-Cookie</code></strong> (multiple <code class="highlighter-rouge">Set-Cookie</code>&#39;s in a single http response are allowed)</li>
    <li class="fragment">this header instructs the <strong>browser to create a cookie</strong></li>
    <li class="fragment"><code class="highlighter-rouge">Set-Cookie</code> header values can specify (separated by <code class="highlighter-rouge">;</code>&#39;s):
      <ul>
        <li>an arbitrary <strong><code class="highlighter-rouge">name=value</code></strong> pair</li>
        <li><strong>expiration</strong> / how long a cookie is valid for</li>
        <li>various security options (we&#39;ll see later)</li>
      </ul>
    </li>
    <li class="fragment">now, <strong>every request that the browser makes to the domain that set the cookie will contain a <code class="highlighter-rouge">Cookie</code> header</strong>
      <ul>
        <li>the value is all of the cookies that the browser has for that domain, separated by semicolons</li>
        <li>(the original security options and expiration are not sent back)</li>
      </ul>
    </li>
  </ol>

</section>

<section>
  <h2 id="set-cookie-and-cookie-examples">Set-Cookie and Cookie examples</h2>

  <p><strong>An http response that sets a few cookie values.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
HTTP/1.0 200 OK
Content-type: text/html
Set-Cookie: foo=bar
Set-Cookie: baz=qux 
Set-Cookie: session_id=5d6d473c-a370-44c8-bff0-4f28efd7c92a; HttpOnly; Secure
</code></pre>

  <p><strong>An http request that sends back cookies.</strong> &#8594;</p>
  <pre><code data-trim="" contenteditable="">
GET / HTTP/1.1
Cookie: foo=bar;baz=qux
</code></pre>

  <p>Note that:</p>

  <ul>
    <li>you can use multiple <code class="highlighter-rouge">Set-Cookie</code> headers in one response</li>
    <li>the client sends all values in a single <code class="highlighter-rouge">Cookie</code> header in the request</li>
  </ul>

  <p><br />We&#39;ll discuss <code class="highlighter-rouge">HttpOnly</code> and <code class="highlighter-rouge">Secure</code> in a moment</p>
</section>

<section>
  <h2 id="session-vs-permanent-cookies">Session vs Permanent Cookies</h2>

  <p><strong>Cookies will be deleted when the client is shut down</strong> (for example, when you quit your browser). These are <strong>session cookies</strong>.</p>

  <p>For cookies that last longer (or shorter!), you can create <strong>permanent cookies</strong> that expire at a certain date or after a certain length of time.</p>

  <p><strong>You can do this by adding options to the <code class="highlighter-rouge">Set-Cookie</code> header</strong> &#8594;</p>

  <ul>
    <li>Expires (date)
      <ul>
        <li><code class="highlighter-rouge">Set-Cookie: foo=bar; Expires=Thu, 29 Oct 2016 07:28:00 GMT;</code></li>
      </ul>
    </li>
    <li>Max-Age (number of seconds)
      <ul>
        <li><code class="highlighter-rouge">Set-Cookie: foo=bar; Max-Age=300;</code></li>
      </ul>
    </li>
  </ul>

  <p><br />
<strong>Note that a server cannot force the browser to delete cookies!</strong> &#8230; but it can set an expiration date which will hopefully convince the client to eventually delete them.</p>

</section>

<section>
  <h2 id="security-options">Security Options</h2>

  <p>In addition to name value pairs of arbitrary data, there are also <strong>options that can be set through the <code class="highlighter-rouge">Set-Cookie</code> header</strong> (also separated by semicolons):</p>

  <ul>
    <li class="fragment"><code class="highlighter-rouge">Domain</code> - cookies sent will only be valid for this domain (default is current domain)</li>
    <li class="fragment"><code class="highlighter-rouge">Path</code> - cookies sent will only be valid for this path (default is all paths)</li>
    <li class="fragment"><code class="highlighter-rouge">HttpOnly</code> - only allow reading of cookies via http, <strong>don&#39;t allow JavaScript!!!!</strong> &#8230;<strong>why do this?</strong> &#8594; <span class="fragment">3rd party JavaScript included on your page is allowed to read cookies for that domain!?</span></li>
    <li class="fragment"><code class="highlighter-rouge">Secure</code> - cookies will only be sent if the request is encrypted (using SSL/HTTPS)</li>
  </ul>

  <p class="fragment"><br />
Out of these, <strong>definitely use <code class="highlighter-rouge">HttpOnly</code> and <code class="highlighter-rouge">Secure</code></strong>&#8230; though for most of class, we&#39;ll be omitting <code class="highlighter-rouge">Secure</code> until we get to SSL/HTTPS.</p>
</section>

<section>
  <h2 id="sessions-1">Sessions</h2>

  <p>Ok, so back to this idea of sessions. <strong>Sessions allow you to:</strong> &#8594;</p>

  <ul>
    <li class="fragment">store data on a <em>per-session</em> basis</li>
    <li class="fragment">by maintaining a small piece of data on the client (via cookies)</li>
    <li class="fragment">that matches with data on the server</li>
    <li class="fragment">that means&#8230; different clients will have different sessions (and consequently different state)</li>
    <li class="fragment">a session is ended, from the browser perspective, when the browser is closed</li>
  </ul>
</section>

<section>
  <h2 id="creating-your-own-session-management">Creating Your Own Session Management</h2>

  <p><strong>You can create your own session management by creating custom middleware that:</strong> &#8594;</p>

  <ol>
    <li class="fragment">has an <strong>in-memory store of session ids</strong> (read: global variable)</li>
    <li class="fragment"><strong>checks</strong> every request for <strong>a <code class="highlighter-rouge">Cookie</code> header</strong></li>
    <li class="fragment">if there is no <code class="highlighter-rouge">Cookie</code> header that contains a session id, it&#39;ll <strong>generate a session id</strong> (using the <code class="highlighter-rouge">crypto</code> module)
      <ul>
        <li class="fragment">then <strong>sends back the <code class="highlighter-rouge">Set-Cookie</code> header with that id</strong></li>
      </ul>
    </li>
    <li class="fragment">however, if there is a <code class="highlighter-rouge">Cookie</code> header with a session id, it&#39;ll:
      <ul>
        <li class="fragment">search for that id in the session store</li>
        <li class="fragment">retrieve that data</li>
        <li class="fragment">add it as a property on the request object so that it can be accessed programmatically</li>
        <li class="fragment">send back a response like usual</li>
      </ul>
    </li>
  </ol>

</section>

<section>
  <h2 id="creating-your-own-session-management-continued">Creating Your Own Session Management Continued</h2>

  <p><strong>You can try writing some session management middleware by using</strong> &#8594;</p>

  <ul>
    <li><code class="highlighter-rouge">req.get</code> - to retrieve the <code class="highlighter-rouge">Cookie</code> header</li>
    <li>parsing that header into name/value pairs</li>
    <li>the <code class="highlighter-rouge">crypto</code> module to create a session id</li>
    <li><code class="highlighter-rouge">res.set</code> or <code class="highlighter-rouge">res.append</code>- to set the <code class="highlighter-rouge">Set-Cookie</code> header</li>
  </ul>

  <p><br />
<strong>Note that&#8230; <code class="highlighter-rouge">res.set</code> doesn&#39;t allow you to set multiple <code class="highlighter-rouge">Set-Cookie</code> headers</strong> (it only leaves the last cookie set). So <a href="http://expressjs.com/en/api.html#res.append">res.append</a> allows you to add values to an already set response field.</p>

  <p><br />
Of course, as you might expect, session middleware already exists&#8230; but we&#39;ll try a little bit of the above to see what&#39;s going on.</p>

</section>

<section>
  <h2 id="managing-cookies-on-the-client-side">Managing Cookies on the Client Side</h2>

  <p><em>Stock</em> Chrome always you to <strong>view cookies as well as delete them</strong>: &#8594;</p>

  <ol>
    <li class="fragment">Web Developer Tools</li>
    <li class="fragment">Application (tab bar on top of web developer tools)</li>
    <li class="fragment">Cookies (left panel, under &quot;Storage&quot;)</li>
    <li class="fragment">use dropdown to see cookies</li>
    <li class="fragment">or chrome://settings/cookies</li>
  </ol>

</section>

<section>
  <h2 id="setting-some-cookies">Setting Some Cookies</h2>

  <p>Use <code class="highlighter-rouge">res.set</code> or <code class="highlighter-rouge">res.append</code> to <strong>set the <code class="highlighter-rouge">Set-Cookie</code> header</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
app.get('/make-a-cookie', function(req, res) {
    // used append so that we can Set-Cookie more than once
    res.append('Set-Cookie', 'MY_SESSION_ID=123; HttpOnly');
    res.append('Set-Cookie', 'color=#00ff00');
    res.send('made you a cookie');
});
</code></pre>

  <p><br />
<strong>Watch all following requests send those cookies back via the <code class="highlighter-rouge">Cookie</code> header.</strong>!</p>

</section>

<section>
  <h2 id="httponly">HttpOnly?</h2>

  <p>Here&#39;s an example of displaying cookies using <strong>client side JavaScript, using <code class="highlighter-rouge">document.cookie</code>.</strong> &#8594;</p>

  <pre><code data-trim="" contenteditable="">
app.get('/peek', function(req, res) {
    // uncomment this: 
    // const s = "alert(document.cookie);";
    res.send('<script>' + s + '</script>' + 'check out yr cookies!');
});
</code></pre>

  <p><br />
If you used the example in the previous slide, the <code class="highlighter-rouge">HttpOnly</code> cookie, <code class="highlighter-rouge">MY_SESSION_ID</code>, should not appear in the <code class="highlighter-rouge">alert</code>.</p>
</section>

<section>
  <h2 id="session-middleware">Session Middleware</h2>

  <p>The previous slides sketch out a way of implementing manual cookie management.</p>

  <p><strong>For &quot;production&quot;, instead of using a custom solution , you can use the <a href="https://github.com/expressjs/session"><code class="highlighter-rouge">express-session</code> module</a>!</strong> &#8594;</p>

  <ul>
    <li class="fragment">handles session id generation for you!</li>
    <li class="fragment">deals with setting cookies on the browser, parsing cookies and retrieving session ids from requests</li>
    <li class="fragment"><strong>most importantly, it provides a property on your request object that contains session data: req.session!</strong>
      <ul>
        <li>on the server, you can store data in a user&#39;s session by using req.session.someData = &#39;some value&#39;</li>
        <li>&#8230; and, of course, you can read it back out by using <code class="highlighter-rouge">req.session.someData</code></li>
      </ul>
    </li>
  </ul>

  <p class="fragment"><br />
<strong>How might you use this?</strong></p>

  <ul>
    <li class="fragment">tracking views to a page: in a route handler for a path, <code class="highlighter-rouge">req.session.count += 1</code></li>
    <li class="fragment">keeping preferences: in route that handles form input, <code class="highlighter-rouge">req.session.favoriteColor = req.body.favoriteColor</code></li>
  </ul>

</section>

<section>
  <h2 id="setting-up-session-middleware">Setting Up Session Middleware</h2>

  <p><strong>Use npm to install as usual:</strong> <code class="highlighter-rouge">npm install express-session</code></p>

  <p><strong>Boilerplate setup.</strong></p>
  <pre><code data-trim="" contenteditable="">
const express = require('express');
</code></pre>

  <p><strong>Include the express-session module&#8230;</strong></p>

  <pre><code data-trim="" contenteditable="">
const session = require('express-session');
</code></pre>

  <pre><code data-trim="" contenteditable="">
const app = express();

app.set('view engine', 'hbs');
app.use(express.urlencoded({ extended: false }));
</code></pre>

</section>

<section>
  <h2 id="storing-data-in-your-session">Storing Data in Your Session</h2>

  <p><strong>Set up some session options (the secret should really be externalized and not in version control, but we&#39;ll keep it here for convenience).</strong></p>

  <pre><code data-trim="" contenteditable="">
const sessionOptions = { 
	secret: 'secret for signing session id', 
	saveUninitialized: false, 
	resave: false 
};
app.use(session(sessionOptions));
</code></pre>

</section>

<section>
  <h2 id="whats-the-deal-with-these-options">What&#39;s the Deal With These Options</h2>

  <p>Check out the <a href="https://github.com/expressjs/session">docs for details on all of the options</a>. The ones that we set explicitly are:</p>

  <ul>
    <li><strong>secret</strong> - used to sign the session id cookie to prevent tampering (and possibly to ensure length/complexity to make <em>unguessable</em>)</li>
    <li><strong>saveUnitialized</strong>: false - don&#39;t save new empty session (to preserve space)</li>
    <li><strong>resave</strong>: false - prevents session data from being resaved if session data is unmodified</li>
  </ul>

  <p><br /></p>

  <p>Some others interesting ones that we don&#39;t explicitly set:</p>

  <ul>
    <li><strong>store</strong> - where session data is stored, defaults to in memory storage</li>
    <li><strong>genid</strong> - function that generates session id</li>
  </ul>

</section>

<section>
  <h2 id="default-memorystore">Default MemoryStore</h2>

  <p><strong>By default, <code class="highlighter-rouge">express-session</code> uses an in memory session store, <code class="highlighter-rouge">MemoryStore</code></strong> &#8594;</p>

  <ul>
    <li class="fragment">this works great for development and prototyping because you don&#39;t have to set up a database to store sessions</li>
    <li class="fragment">however, from the module&#39;s documentation:</li>
    <li class="fragment">&quot;<strong>Warning</strong> The default server-side session storage, <code class="highlighter-rouge">MemoryStore</code>, is purposely not designed for a production environment. It will leak memory under most conditions, does not scale past a single process, and is meant for debugging and developing.&quot;</li>
  </ul>

  <p class="fragment">So, for our purposes, it&#39;s ok to use the in-memory store, but any production application should use another compatible <a href="https://github.com/expressjs/session#compatible-session-stores">session store</a>, such as memcache, mongodb, etc.</p>

</section>

<section>
  <h2 id="reqsession-reqsessionid">req.session, req.session.id</h2>

  <p><strong>Once you have all of the setup finished, you&#39;ll have a new property available on your request object. It will allow you to use:</strong> &#8594;</p>

  <ol>
    <li class="fragment"><code class="highlighter-rouge">req.session</code> - an object that you can read and write session data to</li>
    <li class="fragment"><code class="highlighter-rouge">req.session.id</code> and <code class="highlighter-rouge">req.sessionID</code> - the id for the session (both are the same and both are read only)</li>
  </ol>

</section>

<section>
  <h2 id="saving-data-in-a-session">Saving Data in a Session</h2>

  <p><strong>Let&#39;s create a simple-form that:</strong> &#8594;</p>

  <ul>
    <li>allows a user to submit their name using a form</li>
    <li>the form page will have a heading that consists of the user&#39;s submitted name (so, before submitting data, the name will be blank, but afterwards, it will display the submitted data)</li>
    <li>the form is at /</li>
    <li>the form will post to itself (the same url that the form is on)</li>
    <li>the name submitted will be stored in the session</li>
    <li>it will redirect back to the form</li>
  </ul>

</section>

<section>
  <h2 id="routes">Routes</h2>

  <p><strong>Our usual routes, but note the use of <code>req.session.</code></strong></p>

  <pre class="fragment"><code data-trim="" contenteditable="">

app.get('/', function(req, res) {
    const name = req.session.myName || '';
    res.render('index', {'myName':name});
});

app.post('/', function(req, res) {
    console.log(req.body);
    req.session.myName = req.body.firstName;
    res.redirect('/');
});


app.listen(3000);
</code></pre>
</section>

<section>
  <h2 id="and-in-the-template">And, In the Template</h2>

  <pre><code data-trim="" contenteditable="">
<h1>myName: {{myName}}</h1>

<form method="POST" action="">
my name: <input name="firstName" type="text" />
<input type="submit" />section
</form>
</code></pre>

</section>

<section>

  <h2 id="try-entering-data-with-two-different-browsers-or-incognito-mode">Try Entering Data With Two Different Browsers Or Incognito Mode</h2>

  <p><strong>What do you think will happen?</strong> &#8594;</p>

  <p class="fragment">Session data will be unique to each browser session (so you can have foo for one name and bar for another name if you&#39;re using two different browsers)</p>

</section>

<section>
  <h2 id="lets-prove-that-theres-some-data-stored-on-the-client-side">Let&#39;s Prove That There&#39;s Some Data Stored on the Client Side</h2>

  <ol>
    <li>chrome://settings/cookies</li>
    <li>find localhost:3000</li>
    <li>check out the content of <strong>connect.sid</strong></li>
  </ol>

</section>

<section>
  <h2 id="copying-cookie-data-stealing-sessions">Copying Cookie Data, Stealing Sessions!</h2>

  <p><strong>What do you think will happen if we request the page with curl? Will the name be there?</strong> &#8594;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
curl localhost:3000 
</code></pre>

  <p class="fragment">Nooope&#8230; no info to identify the session, so name isn&#39;t there.</p>

  <p class="fragment">We can actually use curl to send cookies by using the <code class="highlighter-rouge">--cookie</code> flag. Let&#39;s copy over the cookie data&#8230;</p>

  <pre class="fragment"><code data-trim="" contenteditable="">
curl localhost:3000 -v --cookie "connect.sid=..."
</code></pre>

</section>

<section>
  <h2 id="shutting-down-the-server">Shutting Down the Server</h2>

  <p><strong>What will happen if we restart the server? Will the session data still be present?</strong> &#8594;</p>

  <p class="fragment">We&#39;re using an in-memory session store, so, the session data will not be persisted.</p>

</section>

:ET