I"„B<div class="panel panel-default">
	<div class="panel-heading">Homework #4</div>
	<div class="panel-body">

    <h1 id="express---static-files-forms-sessions-due-monday-march-7th-by-11pm">Express - Static Files, Forms, Sessions <strong>Due Monday, March 7th, by 11PM</strong></h1>

    <h2 id="overview">Overview</h2>

    <h3 id="description">Description</h3>

    <p>Create a site the collects and displays complaints about the New York City subway. Call it: &quot;The Complaining Commuter&quot;. In this homework you&#39;ll be working with:</p>

    <ul>
      <li>serving static files</li>
      <li>middleware</li>
      <li>handling forms, both GET and POST</li>
      <li>sessions</li>
    </ul>

    <p>You&#39;ll be creating 3 pages:</p>

    <ul>
      <li><strong>home</strong> - <code>/</code>: displays a list of all of the complaints submitted on the site; can be filtered by subway line</li>
      <li><strong>complain</strong> - <code>/complain</code>: a page that allows a user to submit a new complaint</li>
      <li><strong>stats</strong> - <code>/stats</code>: displays the number of times the user has submitted a complaint during this browsing session</li>
    </ul>

    <h3 id="example-interaction">Example Interaction</h3>

    <div class="img">
      <p><img src="../resources/img/hw04_01_example_interaction.gif" alt="interaction" /></p>
    </div>

    <h3 id="submission-process">Submission Process</h3>

    <ol>
      <li>You will be given access to a private repository on GitHub</li>
      <li>The final version of your assignment should be in GitHub</li>
      <li><strong>Push</strong> your changes to the homework repository on GitHub by the due date.</li>
    </ol>

    <h3 id="points-make-at-least-4-commits">(3 points) Make at Least 4 Commits</h3>

    <ul>
      <li>Commit multiple times throughout your development process.</li>
      <li>Make at least 3 separate commits - (for example, one option may be to make one commit per part in the homework).</li>
    </ul>

    <h2 id="part-1---setup">Part 1 - Setup</h2>

    <h3 id="points-installing-dependencies">(2 points) Installing Dependencies</h3>

    <ul>
      <li>create a <code>package.json</code></li>
      <li><strong>install</strong> the following <strong>dependencies</strong> (make sure you use the <code>--save</code> option), and <strong>no others</strong>:
        <ul>
          <li><code>body-parser</code></li>
          <li><code>express</code></li>
          <li><code>hbs</code></li>
          <li><code>express-session</code></li>
        </ul>
      </li>
    </ul>

    <h3 id="points-gitignore">(2 points) .gitignore</h3>

    <ul>
      <li>create a <code>.gitignore</code></li>
      <li>ignore the following files:
        <ul>
          <li><code>node_modules</code></li>
          <li>any other files that aren&#39;t relevant to the project&#8230; for example
            <ul>
              <li><code>.DS_Store</code> if you&#39;re on OSX</li>
              <li><code>.swp</code> if you use vim as your editor</li>
              <li>etc.</li>
            </ul>
          </li>
        </ul>
      </li>
    </ul>

    <h2 id="part-2---homepage-and-static-files">Part 2 - Homepage and Static Files</h2>

    <h3 id="points-enabling-static-files">(3 points) Enabling Static Files</h3>

    <p>First, let&#39;s make sure you can serve up static content, like css and images.</p>

    <ul>
      <li>create the following directory structure in your project&#39;s root directory
        <ul>
          <li><code>public</code></li>
          <li><code>public/css</code></li>
          <li><code>public/img</code></li>
        </ul>
      </li>
      <li>add a blank css file in <code>public/css/base.css</code></li>
      <li>add a subway related image in <code>public/img/subway.jpg</code></li>
      <li>create a basic express application called <code>app.js</code>; you don&#39;t have to define any routes yet&#8230;</li>
      <li>just add the appropriate requires and middleware to enable static file serving:
        <ul>
          <li>check out the <a href="http://foureyes.github.io/csci-ua.0480-spring2016-010/slides/08/express.html#/29">slides on serving static files with Express</a></li>
          <li>or see page 26 in Chapter 3 of</li>
        </ul>
      </li>
      <li>test that both the css files and image work
        <ul>
          <li>for example, try to curl <code>http://localhost:3000/img/subway.jpg</code></li>
          <li>or go that url in your browser</li>
        </ul>
      </li>
    </ul>

    <h3 id="points-creating-a-home-page">(4 points) Creating a Home Page</h3>

    <p>Now that static files are set, create a homepage.</p>

    <ul>
      <li>for the home page, your app should accept <code>GET</code> requests on the path, <code>/</code></li>
      <li>set up handlebars - <a href="http://foureyes.github.io/csci-ua.0480-spring2016-010/slides/10/templating.html#/5">these slides</a> may help&#8230; (it&#39;s just one line!)
        <ul>
          <li>get all the requirements and config setup</li>
          <li>create the appropriate views folder, along with an initial layout file:
            <ul>
              <li><code>views</code></li>
              <li><code>views/layout.hbs</code></li>
            </ul>
          </li>
        </ul>
      </li>
      <li>in your <code>layout.hbs</code>, drop in the surrounding html that will go on every page
        <ul>
          <li>pull in your <code>base.css</code> stylesheet</li>
          <li>include a header containing both your <code>subway.jpg</code> image and the title of your site, <strong>The Complaining Commuter</strong></li>
          <li>additionally, add a footer that links to all 3 pages in your site:
            <ul>
              <li>a link to the home / list of complaints page (/)</li>
              <li>a link to <strong>a page to add a complaint</strong> page (/complain)</li>
              <li>a link to a <strong>stats</strong> page (/stats)</li>
            </ul>
          </li>
          <li>don&#39;t forget <code>body</code>, surrounded by triple curly braces!</li>
        </ul>
      </li>
      <li>in your template for your homepage (you can name this template whatever you want&#8230; just make sure you can pull it up later), add the following:
        <ul>
          <li>an <code>h3</code> header that says &quot;Complaints List&quot;</li>
        </ul>
      </li>
      <li>create the appropriate route so that a <code>GET</code> request pulls up the rendered template</li>
      <li>add some css to change some styles, (for example change the color of the text, change the font, etc.)</li>
    </ul>

    <p>Here&#39;s an example of what the page could look like (you don&#39;t have to use the same exact styles, but add enough styles so that you can see that the style sheet is integrated correctly):</p>

    <div class="img">
      <p><img src="../resources/img/hw04_02_home.png" alt="png" /></p>
    </div>

    <h2 id="part-3---list-of-complaints-filtering-list-of-complaints">Part 3 - List of Complaints, Filtering List of Complaints</h2>

    <p>The homepage should also have a list of all of the complaints submitted to the site. By default, this list will start with the following content:</p>

    <ul>
      <li>G - The person sitting next to me was eating hard-boiled eggs in the subway car (???!!!)</li>
      <li>F - There was a possum loose on the platform</li>
      <li>A - The train was an hour late!, A Line</li>
    </ul>

    <p>These complaints can be filtered so that your application only shows complaints for a particular subway line.</p>

    <h3 id="points-middleware-and-logging">(3 points) Middleware and Logging</h3>

    <p>First, get some logging together so that you can troubleshoot. Log out the request that you receive, including the request&#39;s query string and body.</p>

    <ul>
      <li>require the <code>body-parser</code> middleware and use it; this will allow you to access the content of the request&#39;s body</li>
      <li>set up some logging using your own middleware function; it should include
        <ul>
          <li>the request <strong>method</strong>,  <strong>path</strong></li>
          <li>followed by the contents of the request&#39;s query string</li>
          <li>followed by the contents of the request <strong>body</strong></li>
        </ul>
      </li>
    </ul>

    <h3 id="points-complaint-list">(6 points) Complaint List</h3>

    <p>Now for some actual content. This page will display the complaints and the subway line associated with the complaint.</p>

    <p><strong>Bootstrap the list with some data.</strong></p>

    <ul>
      <li>store all of the complaint data in a global Array of objects&#8230;</li>
      <li>each object has two properties:
        <ul>
          <li>the <em>actual</em> complaint (just text)</li>
          <li>the subway line</li>
        </ul>
      </li>
      <li>it should start off with:
        <ul>
          <li>G - The person sitting next to me was eating hard-boiled eggs in the subway car (???!!!)</li>
          <li>F - There was a possum loose on the platform</li>
          <li>A - The train was an hour late!</li>
        </ul>
      </li>
      <li>(storing this data in a global variable isn&#39;t typical, of course, but we&#39;ll have to store the data <em>somewhere</em> for now!)</li>
    </ul>

    <p><strong>Create the actual page&#8230;</strong></p>

    <ul>
      <li>modify your route for your home page (<code>/</code>) so that you render the template with the correct context object (that is, the list of complaints to display)</li>
      <li>in the template, you can iterate through the list of complaints using the <code>#each</code> helper</li>
      <li><strong>display the complaints in reverse order</strong> - the last element on the list should be on top</li>
      <li>put each complaint/subway line pair in a list item (<code>li</code>)</li>
      <li>additionally, make the subway line a different style (such as a different font-weight or background-color or &#8230; any other style that&#39;s different from the complaint)</li>
    </ul>

    <p><strong>Test your page.</strong></p>

    <ul>
      <li>it should look a little like the image below</li>
      <li>again, the styles don&#39;t have to match exactly - just add enough styling to distinguish between the subway line and the actual message</li>
      <li>(ignore the form for now&#8230; you&#39;ll set that up next)</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw04_03_list.png" alt="list" /></p>
    </div>

    <h3 id="points-filter-by-subway-line">(7 points) Filter by Subway Line</h3>

    <p><strong>Once you have your list of complaints working&#8230; add a form that allows you to filter by subway line.</strong> &#8594;</p>

    <ul>
      <li>create a form in your <code>index.hbs</code> template
        <ul>
          <li>the form should issue a <code>GET</code> request</li>
          <li>the request should go to the same URL that it&#39;s on (still home, <code>/</code>)</li>
          <li>the form should also have a text field and a submit button</li>
          <li><strong>remember to give you text field a name!</strong></li>
        </ul>
      </li>
      <li>on the server side, modify your route for your home page (<code>/</code>) so that it sends filtered data if the form is submitted
        <ul>
          <li>how does your route know if the form was submitted?</li>
          <li>how does the route extract the data from the <code>GET</code> request / form submission?</li>
          <li>find some way to filter the data</li>
          <li>send that data to the template</li>
          <li>if the filter submitted is blank or if there is no filter, display all of the complaints</li>
        </ul>
      </li>
      <li><strong>here&#39;s what the filter interaction should look like:</strong></li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw04_04_filter.gif" alt="filter" /></p>
    </div>

    <p><strong>The log should look something like this:</strong></p>

    <p><code>GET</code> the home page</p>

    <pre><code data-trim="" contenteditable="">GET /
=====
req.query: {}
req.body: {}
</code></pre>

    <p><code>GET</code> to submit your filter</p>
    <pre><code data-trim="" contenteditable="">GET /
=====
req.query: { filter: 'G' }
req.body: {}
</code></pre>

    <h2 id="part-4---adding-a-complaint">Part 4 - Adding a Complaint</h2>

    <h3 id="points-create-a-complaint-form">(9 points) Create a Complaint Form</h3>

    <ul>
      <li>in <strong>app.js</strong> create a new route handler and template for <code>/complain</code>
        <ul>
          <li>add a form in your template</li>
          <li>it should have 2 <code>inputs</code> (choose whatever form elements you like, they can both be text if you want to keep things simple) - with appropriate name attributes&#8230; you&#39;ll see that name in the request body!
            <ul>
              <li>the text of the complaint</li>
              <li>&#8230;and the subway line</li>
            </ul>
          </li>
          <li>&#8230;as well as a submit <code>input</code></li>
        </ul>
      </li>
      <li>the form&#39;s method should be <code>POST</code></li>
      <li>the action should be empty string <code>""</code> or <code>/complain</code> (it&#39;s <code>POST</code>ing to itself)</li>
      <li>modify <strong>app.js</strong> again&#8230; by adding a new route so that it accepts <code>POST</code> requests on <code>/complain</code>
        <ul>
          <li>in your callback function for this route&#8230;</li>
          <li>create an object for this new complaint (with the actual complaint text and the subway line) and add it to your global list of complaint objects</li>
          <li>&#8230;after that, redirect to home <code>/</code> with a <code>GET</code> request</li>
        </ul>
      </li>
      <li><strong>here&#39;s what the filter interaction should look like:</strong></li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw04_05_add.gif" alt="add" /></p>
    </div>

    <p>The logs should look something like this for the POST, Redirect and GET:</p>

    <p><code>GET</code> the list page.</p>

    <pre><code data-trim="" contenteditable="">GET /complain
=====
req.query: {}
req.body: {}
</code></pre>

    <p><code>POST</code> the form (notice the body).</p>

    <pre><code data-trim="" contenteditable="">POST /complain
=====
req.query: {}
req.body: { complaint: 'Blah blah blah!', line: 'Q' }
</code></pre>

    <p><code>GET</code> the home page (/)&#8230;</p>

    <pre><code data-trim="" contenteditable="">GET /
=====
req.query: {}
req.body: {}
</code></pre>

    <h2 id="part-5---stats-page--using-a-session-value">Part 5 - Stats Page / Using a Session Value</h2>

    <p>Create a page that shows how many complaints that a user has submitted <strong>during their browsing session</strong>.</p>

    <h3 id="points-session-setup">(6 points) Session Setup</h3>

    <p><strong>First, setup and configure sessions:</strong></p>

    <ul>
      <li>bring in the session module by requiring <code>express-session</code></li>
      <li>set up a some options for your session:</li>
    </ul>

    <pre><code data-trim="" contenteditable="">
var sessionOptions = {
	secret: 'secret cookie thang',
	resave: true,
	saveUninitialized: true
};
</code></pre>

    <ul>
      <li>then use those options for session handling middleware: <code>app.use(session(sessionOptions));</code></li>
    </ul>

    <p><strong>Modify your add route (<code>/complain</code>) so that every time a user adds a new complaint, it&#39;s counted in their session.</strong></p>

    <ul>
      <li>in the add (<code>/complain</code>) route, count how many times a person has complained for their session by adding a property to the <code>req.session</code> object</li>
      <li>increment the count if there&#39;s already a value there</li>
      <li>otherwise, the count should start at 0</li>
    </ul>

    <h3 id="points-the-stats-page">(5 points) The Stats Page</h3>

    <ul>
      <li>create a route handler for <code>/stats</code></li>
      <li>create a template for it</li>
      <li>display the session variable that represents the current count of the user&#39;s complaint submssions</li>
      <li>the page should look like:</li>
    </ul>

    <div class="img">
      <p><img src="../resources/img/hw04_06_stats.gif" alt="stats" /></p>
    </div>

    <p><strong>Test the session management.</strong></p>

    <ul>
      <li>open your app with one browser&#8230; and add some complaints</li>
      <li>the stats page should show the count of complaints</li>
      <li>open your app in another browser or in private browsing / incognito mode</li>
      <li>check that the count is 0 for this other browser session</li>
      <li>(and of course, make sure that the previous count in your other session was maintained)</li>
    </ul>

  </div>

</div>
:ET